<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angusの博客</title>
  
  <subtitle>学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qijianguo.com/"/>
  <updated>2018-04-27T01:41:42.520Z</updated>
  <id>https://qijianguo.com/</id>
  
  <author>
    <name>Angus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka-入门</title>
    <link href="https://qijianguo.com/Kafka%E5%AD%A6%E4%B9%A0/2018/04/27/Kafka_%E5%85%A5%E9%97%A8.html"/>
    <id>https://qijianguo.com/Kafka学习/2018/04/27/Kafka_入门.html</id>
    <published>2018-04-27T00:59:03.893Z</published>
    <updated>2018-04-27T01:41:42.520Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> kafka是一种消息中间件（生产者把消息放到队列里，消费者到'指定'队列消费）</span><br><span class="line"><span class="number">2.</span> producer：生产者、consumer：消费者、topic：队列（消息标签）、broker：kafka：扩容</span><br><span class="line"><span class="number">3.</span> kafka作为一个集群运行在一个或多个服务器上， 集群存储的消息是以topic为类别存储的</span><br><span class="line"><span class="number">4.</span> 一个消息（record）是由<span class="type">key</span>、value、时间戳构成</span><br></pre></td></tr></table></figure><h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><h5 id="Topic（主题）"><a href="#Topic（主题）" class="headerlink" title="Topic（主题）"></a>Topic（主题）</h5><ul><li>将消息或种子Feed分门别类，每一类消息就是一个Topic<blockquote><p>每个分区都是一个顺序的，不可变的消息队列，并且可以持续的添加，分区中的消息都被分了一个序列号，成为偏移量（offset），每个分区中的偏移量都是唯一的。对于每一个Topic， kafka集群维护这一个分区的log，如下图<br><img src="1524625989644.png" alt="Broker（多分区）"><br>kafka集群无论消息是否被消费都会保存所有的消息，直到过期！实际上Consumer持有的仅仅是消息的偏移量，Consumer既可以读取新消息，也可以重新读取旧消息。且Consumer之间互不干扰。这样做为了处理更多的消息而不被限制在单台服务器上。Topic拥有多个分区意味着它可以处理更多的数据。分区可以作为并行处理的单元。<br><img src="1524625961392.png" alt="Alt text"></p></blockquote><h5 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h5></li><li>发布消息的对象<blockquote><p>生产者往某个Topic上发布消息，生产者也负责选择发布到Topic上的哪一分区，最简单的方式是重分区列表中轮流选择，也可以根据某种算法依照权重进行选择分区，开发者负责如何选择分区的算法。 </p></blockquote><h5 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h5></li><li>订阅消息，并处理发布的消息<blockquote><p>通常消费模型分为队列和发布-订阅模式</p></blockquote></li><li>队列： 一条消息只有一个消费者可以处理</li><li>发布-订阅：消息被广播给所有的消费者，接收到消息的消费者都可以处理这条消息。<blockquote><blockquote><p>kafka为这两种模型提供了单一的消费者抽象模型: 消费者组（Consumer group）。消费者用一个消费者组名标记自己，一个发布在Topic上的消息被分发给消费者，如果所有的消费者都在一个组里，那么就成了queue 模型， 如果所有消费者都不在同一组中，那么就变成了发布-订阅模型。更通用的，我们可以创建一个消费者组作为逻辑上的订阅者，每个字包含数目不等的消费者，一个组内的消费者可以用来扩展和容错。<img src="1524633231026.png" alt="Alt text"><br>正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区。 因为Topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。</p></blockquote></blockquote></li></ul><h5 id="Broker（代理）"><a href="#Broker（代理）" class="headerlink" title="Broker（代理）"></a>Broker（代理）</h5><ul><li>已发布的消息保存在一组服务器中， 称为kafka集群，集群中的每个服务器就是一个Broker，Consumer可以订阅一个或多个Topic，并从Broker上拉数据，从而消费这些已发布的消息<h5 id="分布式（Distribution）"><a href="#分布式（Distribution）" class="headerlink" title="分布式（Distribution）"></a>分布式（Distribution）</h5></li><li>Log被分配到多个服务器上，每个服务器处理它分到的分区。根据配置每个分区还可以备份到其他服务器作为容错备份。每个分区有一个Leader，有零或多个Follower，Leader处理此分区的所有读写请求，而Follower则被动的复制数据，如果Leader宕机，则从Follower中选举一个作为新Leader。一个分区的Leader可能还是其他分区的Follower。这样可以负载均衡，避免所有请求只由一台或某几台服务器处理<h5 id="Geo-Replication-异地数据同步技术"><a href="#Geo-Replication-异地数据同步技术" class="headerlink" title="Geo-Replication(异地数据同步技术)"></a>Geo-Replication(异地数据同步技术)</h5></li><li>Kafka MirrorMaker为集群提供了Geo-Replication支持。借助MirrorMaker，消息可以跨多个数据中心或云区域进行备份。可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。</li></ul><hr><hr><h4 id="流平台（kafka作为一个分布式的流平台）"><a href="#流平台（kafka作为一个分布式的流平台）" class="headerlink" title="流平台（kafka作为一个分布式的流平台）"></a>流平台（kafka作为一个分布式的流平台）</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">流平台具有三个关键能力：</span><br><span class="line"><span class="bullet">1. </span>发布和订阅</span><br><span class="line"><span class="bullet">2. </span>以容错的方式存储消息（流）</span><br><span class="line"><span class="bullet">3. </span>在消息流发生时处理</span><br></pre></td></tr></table></figure><h4 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Producer API: <span class="code">`发布一个或多个Topic（主题）`</span></span><br><span class="line"><span class="bullet">2. </span>Consumer API: <span class="code">`订阅一个或多个Topic，并处理产生的消息`</span></span><br><span class="line"><span class="bullet">3. </span>Streams API: <span class="code">`消费topic，同时生产topic，将输入流转换为输出流`</span></span><br><span class="line"><span class="bullet">4. </span>Connector API： </span><br><span class="line">![<span class="string">关系图</span>](<span class="link">http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DXiAVXBMAAFScKNS-Og538.png</span>)</span><br></pre></td></tr></table></figure><h4 id="学习完应该掌握哪些内容"><a href="#学习完应该掌握哪些内容" class="headerlink" title="学习完应该掌握哪些内容"></a>学习完应该掌握哪些内容</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kafka节点之间如何复制备份的？</span><br><span class="line">kafka消息是否会丢失？为什么？</span><br><span class="line">kafka最合理的配置是什么？</span><br><span class="line">kafka的leader选举机制是什么？</span><br><span class="line">kafka对硬件的配置有什么要求？</span><br><span class="line">kafka的消息保证有几种方式？</span><br><span class="line"></span><br><span class="line">后续补充...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Kafka学习" scheme="https://qijianguo.com/categories/Kafka%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="kafka" scheme="https://qijianguo.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>开头</title>
    <link href="https://qijianguo.com/uncategorized/2018/04/19/%E8%89%B0%E9%9A%BE%E7%AC%AC%E4%B8%80%E6%AD%A5.html"/>
    <id>https://qijianguo.com/uncategorized/2018/04/19/艰难第一步.html</id>
    <published>2018-04-19T10:41:30.480Z</published>
    <updated>2018-04-19T10:52:48.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开头总是痛苦滴—痛并快乐着"><a href="#开头总是痛苦滴—痛并快乐着" class="headerlink" title="开头总是痛苦滴—痛并快乐着"></a>开头总是痛苦滴—<code>痛并快乐着</code></h3><blockquote><p>很早之前就想写点儿东西, 都怪自己的懒惰心理把所有的事都甩给了<code>没时间!</code>，总结一个字就是‘懒’， 以至于耽搁了很多事, 例如某件事上个月才算完结, 先去面壁了…</p></blockquote><h4 id="我该写点儿什么"><a href="#我该写点儿什么" class="headerlink" title="我该写点儿什么"></a>我该写点儿什么</h4><blockquote><p>趴在桌子上面壁了十分钟，还是想到了很多东西的， 比如，飞黄腾达啊，攒钱买房子啊，跟媳妇儿结婚啊，哈哈哈，其实我还想到了，做一个文艺的程序猿。在提升撸码技能的同时也能写写肉麻文章，给我亲爱的紫儿看。么么哒</p></blockquote><p>####我该做点儿什么 ?</p><blockquote><p>思考明天要做的事真的很要命，但是今天貌似又虚度了一天，无助加绝望。改了APP中产品新提出的几个需求，每天都是改bug&amp;&amp;改bug，痛苦ing…</p></blockquote><ul><li>长期目标：<blockquote><p>Java深入学习（多线程、netty、反射、Spring系列、Mybatis等）</p></blockquote></li></ul><blockquote><p>Android系统学习</p></blockquote><blockquote><p>数据库（MySQL、mongo、redis）</p></blockquote><blockquote><p>Linux</p></blockquote><blockquote><p>小程序</p></blockquote><ul><li>短期目标：<blockquote><p>4/5月学习Java多线程、Netty。<br>学习《企业级微信点餐系统》</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开头总是痛苦滴—痛并快乐着&quot;&gt;&lt;a href=&quot;#开头总是痛苦滴—痛并快乐着&quot; class=&quot;headerlink&quot; title=&quot;开头总是痛苦滴—痛并快乐着&quot;&gt;&lt;/a&gt;开头总是痛苦滴—&lt;code&gt;痛并快乐着&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qijianguo.com/uncategorized/2018/04/16/hello-world.html"/>
    <id>https://qijianguo.com/uncategorized/2018/04/16/hello-world.html</id>
    <published>2018-04-16T01:15:35.364Z</published>
    <updated>2018-04-16T01:15:35.364Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
