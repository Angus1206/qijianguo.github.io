{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/imgbak/icon_wechat.png","path":"imgbak/icon_wechat.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/img/avatar/ironman.png.bak","path":"img/avatar/ironman.png.bak","modified":0,"renderable":0},{"_id":"source/img/avatar/ironman1.png","path":"img/avatar/ironman1.png","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"source/imgbak/avatar/ironman.png","path":"imgbak/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/imgbak/article/tag.png","path":"imgbak/article/tag.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/about.jpg","path":"imgbak/header_img/about.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/archives-widget.jpg","path":"imgbak/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/archive.jpg","path":"imgbak/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/signature/BeanTechSign-white.png","path":"imgbak/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/signature/BeanTechSign-black.png","path":"imgbak/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/imgbak/article_header/article_bg.jpg","path":"imgbak/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/article/huweihuang_blog.png","path":"imgbak/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/imgbak/blog.jpg","path":"imgbak/blog.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/home.jpg","path":"imgbak/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/tag.png","path":"imgbak/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/imgbak/article_header/article_header.png","path":"imgbak/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/home-bg-o.png","path":"imgbak/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/home2.png","path":"imgbak/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/imgbak/header_img/404.png","path":"imgbak/header_img/404.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1555762810462},{"_id":"source/.DS_Store","hash":"15159d4f15e21da30bfeae03b67b87b8b99338c5","modified":1555935782385},{"_id":"source/CNAME","hash":"0bb25678b1fdb66277367cb9156542dc5099e0e6","modified":1555762810462},{"_id":"source/favicon.ico","hash":"31980716be933f099d580db04db1569cf981af90","modified":1555762810494},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1555762810625},{"_id":"themes/huweihuang/_config.yml","hash":"221086fef227271d0041307ac8d8c8575a3db2ac","modified":1555762810626},{"_id":"themes/huweihuang/favicon.ico","hash":"31980716be933f099d580db04db1569cf981af90","modified":1555762810626},{"_id":"source/_posts/.DS_Store","hash":"514d0d17133a3ef7b50eee42163a0645bd78ee11","modified":1555764008026},{"_id":"source/_posts/Another app is currently holding the yum lock; waiting for it to exit....md","hash":"4c3624d9844a90be41c0f81111a8fa3882bf6927","modified":1555762810463},{"_id":"source/_posts/Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常.md","hash":"39910f02bff66587b0cb8041b452e3817bf57696","modified":1555762810464},{"_id":"source/_posts/Android中ViewPager.md","hash":"acb37618dc4e85e3e64d9880146b8a928e3bff12","modified":1555763321458},{"_id":"source/_posts/Android技术分享.md","hash":"c5df57c62bf19ff7473ee5a93ec4c937361d6a5e","modified":1555763294658},{"_id":"source/_posts/EditText监听事件.md","hash":"4de0e70ba177ed15899703f5f548a721ee501c9c","modified":1555762810464},{"_id":"source/_posts/Cordova生成安卓源码无法运行.md","hash":"44770866780f671563975e4454611b7c589a7a09","modified":1555763970885},{"_id":"source/_posts/Git基础.md","hash":"cb20847299139971d6b3b6185de1ddc58b0968e6","modified":1555762810465},{"_id":"source/_posts/IntelliJ IDEA插件（Java）.md","hash":"d720a6efccdc00d54250b346b1663c814c7a7953","modified":1555762810465},{"_id":"source/_posts/Git修改已经提交的注释或日志.md","hash":"4dddd998d066e00260dc703e7f1743ee35069f0d","modified":1555763906919},{"_id":"source/_posts/JAVA8新特性学习.md","hash":"101d2bcfcd5b6287a379c9560478cc37d75fae77","modified":1555763359360},{"_id":"source/_posts/JPA中的could not initialize proxy - no Session异常分析与解决.md","hash":"1148c3158ad57e3827b56ecb4a9dbc9dcd1389da","modified":1555763484331},{"_id":"source/_posts/JAVA中使用openoffice将Excel转PDF再转图片功能实现.md","hash":"bd9d92a978e9d7eefaef744f61d2dcee82c6bc2a","modified":1555763458438},{"_id":"source/_posts/Java Random seed伪随机.md","hash":"f140c00c85a07ee4d955e9e8702d158ee3d4b905","modified":1555762810467},{"_id":"source/_posts/Java多线程技能.md","hash":"97c8c5438bfe6a35742d6e355723c9e02ebaa82d","modified":1555763371668},{"_id":"source/_posts/Java正确获取客户端真实IP方法整理.md","hash":"6db29b2cdddf5e7e2398c4614da6808079c779ef","modified":1555763420961},{"_id":"source/_posts/Java工具类.md","hash":"c3d5c2f52359fd34575e64c217dd28af1646d6ae","modified":1555763397321},{"_id":"source/_posts/Kafka_入门.md","hash":"3918d5a4225c6ee6468bba37dad1de2c0ca919ba","modified":1555763510345},{"_id":"source/_posts/Kafka总结.md","hash":"a39e92a65ca3ff7b563dac33a4c6c2addcfced33","modified":1555763546573},{"_id":"source/_posts/Linux中的快捷键.md","hash":"4804789d2d7b20bfcf8081174e27eb889cf1b58e","modified":1555763707339},{"_id":"source/_posts/Linux中部署Maven项目, 自定义setting.xml文件.md","hash":"a6d6c060991f3b5a55df53c3248e2fbee75e452a","modified":1555763681679},{"_id":"source/_posts/Linux有趣（无用）的命令.md","hash":"a007464cc7d392212e462faf603d4b40e643d061","modified":1555763651029},{"_id":"source/_posts/Linux命令[系统管理与维护命令].md","hash":"13def22ce36f6fcb100261fbf45d7cacf3d52565","modified":1555763613977},{"_id":"source/_posts/Modbus协议服务端（Netty）.md","hash":"cd20064fdbfa75a495a173005c454b7f794d200a","modified":1555763740796},{"_id":"source/_posts/Linux简单命令.md","hash":"b74aa5a2d20191a88f4be657293a819d4b9e37ca","modified":1555763572192},{"_id":"source/_posts/Netty中的ChannelHandler.md","hash":"bf81b91a580ab92b6b5cc2eaae7ab1cd1636ab67","modified":1555762810470},{"_id":"source/_posts/MySQL慢查询日志总结.md","hash":"c109fbb6a57c0b121cd372116c0d4c6600c01964","modified":1555763769583},{"_id":"source/_posts/MySQL性能优化.md","hash":"c11ae88f0a966a93c3ab315ad52907a24b444523","modified":1555764110208},{"_id":"source/_posts/Spring Boot的启动器Starter大全及自定义Starter.md","hash":"133855e2d60ae30dab2d321f3151e60cc0c289be","modified":1555762810471},{"_id":"source/_posts/No accelerator found - failed to create HAX VM.md","hash":"899508042d3f9d8aeae266d1e16057ffe3ac35be","modified":1555762810470},{"_id":"source/_posts/Spring boot 实现Web Service.md","hash":"b7242100cefecc43a8f1cea33998777c8838b6fd","modified":1555762810471},{"_id":"source/_posts/SpringBoot定时任务Schedule使用.md","hash":"febc937234db49af6de5f3382e0a06a3b7cb4b12","modified":1555762810472},{"_id":"source/_posts/Springboot JPA 实体类添加@Transient.md","hash":"96f1c40f27f8ed5a1540a5edd6d3728adef8d23d","modified":1555762810472},{"_id":"source/_posts/Vim 操作（一）.md","hash":"ef55544e700bf682e9c81ce9dd0defa21b6a478c","modified":1555762810473},{"_id":"source/_posts/Springboot项目Netty做服务端并自定义Gson配置类解析数据包.md","hash":"70354d91f13d4142cf280e47e772d79f59425df2","modified":1555762810472},{"_id":"source/_posts/Vue学习中踩的坑.md","hash":"19d1a20c4ebaccbdb72d533c6961ba4877c15e7b","modified":1555762810473},{"_id":"source/_posts/Springbo自定义分页工具类.md","hash":"2565e66cf6222ae8e2fb9168dca12dead1fc261e","modified":1555762810473},{"_id":"source/_posts/Vim 操作（二）.md","hash":"7af8a8c504dba077aa8d5e1564b6fe5fda86aed5","modified":1555762810473},{"_id":"source/_posts/hexo-theme-huweihuang.md","hash":"f0fc34e4871a1e0fc93e23ff03f3c581d61c348e","modified":1555762810474},{"_id":"source/_posts/Windows server部署项目（前后端分离）.md","hash":"2e6913e4d63726f252d9655a89d242c7b59f6c9d","modified":1555764284330},{"_id":"source/_posts/nginx启动、重启、关闭.md","hash":"df5129a8bbdc40c454ad7252bd35d201cc9c999d","modified":1555762810491},{"_id":"source/_posts/Windows 关闭端口号.md","hash":"7548898e5710ae3008d07ab928154b4b91abd136","modified":1555764245246},{"_id":"source/_posts/netty自定义协议上传.md","hash":"69d79448f2296b3d028420486ecaabb9c698604c","modified":1555764191735},{"_id":"source/_posts/poi-tl生成Word.md","hash":"513075eb00e6ea3730917c4b8cb1f1e977534c3c","modified":1555762810491},{"_id":"source/_posts/《EffctiveJava》创建和销毁对象.md","hash":"b72b1e09a00dba78b8702ad12eb3f74e453280f9","modified":1555763115394},{"_id":"source/_posts/《EffctiveJava》对于所有对象都通用的方法.md","hash":"e29b12afa51b929c35bc2cf6f5a4b7adbb1af0bd","modified":1555763138627},{"_id":"source/_posts/从Java内存模型讲双重检查锁原理.md","hash":"38044cd29315ae45bd746d6f23be776fb72d03bc","modified":1555763187243},{"_id":"source/_posts/书签.md","hash":"cc5adb755789af5b3b2102126d9b0f05120fb0bd","modified":1555763213071},{"_id":"source/_posts/对象及变量的并发访问.md","hash":"c45c7fab1e5bd7cb6969b66796db3970e057887d","modified":1555935763191},{"_id":"source/_posts/吐血推荐 _ 那些提升开发人员工作效率的在线工具.md","hash":"44d3436241490075d7d8ebe3f0a7f3c88d5ea0fc","modified":1555763248151},{"_id":"source/_posts/数字格式化工具类     持续更新.md","hash":"53f339cfeefcb961af2b1bd2e301d2738fe562a6","modified":1555763233764},{"_id":"source/_posts/自定义EditText设置图片文字居中.md","hash":"a0b9ab31eed8a11a8e5b0c7857dc6b0c5489a628","modified":1555763277957},{"_id":"source/about/index.md","hash":"e57ae48e2b4909970123f5974881d4cd79fad800","modified":1555762810494},{"_id":"source/archive/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1555762810494},{"_id":"source/_posts/阿里Java开发手册.md","hash":"5dcc52d1d2df81fd7e13d67a999d4a3fd7687385","modified":1555763171331},{"_id":"source/_posts/阿里Android开发手册.md","hash":"c6f2e57851145655f0e9a6567b17682e2aa6afe2","modified":1555763157635},{"_id":"source/img/icon_wechat.png","hash":"737b7edf2b0999bece726bb7a34773befceb9f4f","modified":1555737092000},{"_id":"source/img/.DS_Store","hash":"023fd79a2b4564c04183cf2bcfa1ecff6bb1bdeb","modified":1555766017000},{"_id":"source/imgbak/.DS_Store","hash":"038480e6b777e9a70e4b8caea6a8db9a53fd705a","modified":1555765473158},{"_id":"source/imgbak/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1555762810616},{"_id":"source/tags/index.md","hash":"f6ad1039c242795de5cd7d81781148f8c5298c28","modified":1555762810625},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1555762810626},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1555762810626},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1555762810627},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1555762810627},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1555762810627},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1555762810628},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1555762810628},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1555762810627},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1555762810628},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1555762810628},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1555762810632},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1555762810632},{"_id":"themes/huweihuang/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1555762810632},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1555762810633},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1555762810633},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1555762810633},{"_id":"themes/huweihuang/layout/post.ejs","hash":"a36524a762090581a858ae55b62ca18e6251876a","modified":1555762810633},{"_id":"themes/huweihuang/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1555762810633},{"_id":"themes/huweihuang/source/favicon.ico","hash":"31980716be933f099d580db04db1569cf981af90","modified":1555762810638},{"_id":"source/img/avatar/ironman.png.bak","hash":"c13337cf46ce9aeab86f31d3aa336488c8f54c5c","modified":1555936022859},{"_id":"source/img/avatar/ironman1.png","hash":"c13337cf46ce9aeab86f31d3aa336488c8f54c5c","modified":1555737088000},{"_id":"source/img/article/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1555765915000},{"_id":"source/img/header_img/about.jpg","hash":"3dbd8f96cdae93fb2d425495ec2dde68c97880d5","modified":1555737090000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"760d85dcfe29255b29184929a10bd44d0c9fbb3b","modified":1555737094000},{"_id":"source/imgbak/avatar/ironman.png","hash":"7315cc0a3d3fa261b0df2e18282f58ee436caa18","modified":1555762810513},{"_id":"source/imgbak/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1555762810503},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"98e82878523b65caf56cc1d4f5de90b2af9e277d","modified":1555762810628},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"c1edde91f1be8f01f96a1b8eae938282b5f6839d","modified":1555762810629},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1555762810629},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1555762810629},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1555762810630},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1555762810630},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1555762810630},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1555762810631},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1555762810631},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1555762810631},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1555762810631},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1555762810631},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1555762810632},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1555762810634},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1555762810634},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1555762810634},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1555762810636},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1555762810636},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1555762810637},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1555762810637},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1555762810638},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1555762810638},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1555762810638},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1555762810639},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1555762810641},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1555762810641},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1555762810640},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1555762810642},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1555762810642},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1555762810642},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1555762810647},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1555762810647},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1555762810647},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1555762810647},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"6e05204d914524cdf0dfce70d1e4e2c45ddcc2d0","modified":1555737094000},{"_id":"source/imgbak/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1555762810554},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1555762810636},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1555762810639},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1555762810641},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555762810646},{"_id":"source/img/header_img/archive.jpg","hash":"4ef24aaf2edd05ebbbcdc024e61d6b52e1f80e0f","modified":1555737090000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1555737090000},{"_id":"source/imgbak/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1555762810559},{"_id":"source/imgbak/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1555762810557},{"_id":"source/imgbak/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1555762810624},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1555762810635},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1555762810637},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1555762810637},{"_id":"source/img/article_header/article_bg.jpg","hash":"a51db494ff5b672793985001dafb581598c9c2de","modified":1555737088000},{"_id":"source/img/blog.jpg","hash":"cb30c7bf2f43ed10f3a30f290d5ebd3292383172","modified":1555737090000},{"_id":"source/imgbak/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1555762810621},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1555762810644},{"_id":"source/imgbak/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1555762810507},{"_id":"source/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1555737092000},{"_id":"source/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1555737088000},{"_id":"source/img/header_img/home.jpg","hash":"d1f39791cb2a331d8bd3cedc5d7a0f940e0b4f68","modified":1555737090000},{"_id":"source/imgbak/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1555762810502},{"_id":"source/img/header_img/404.png","hash":"1b98b8219ecee2e263c8c81c58a53e32a62c3526","modified":1555737090000},{"_id":"source/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1555737090000},{"_id":"source/img/header_img/home2.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1555737090000},{"_id":"source/imgbak/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1555762810527},{"_id":"source/imgbak/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1555762810588},{"_id":"source/imgbak/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1555762810615},{"_id":"source/_posts/hexo-theme-huweihuang/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555762810489},{"_id":"source/imgbak/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555762810511},{"_id":"source/imgbak/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1555762810577},{"_id":"source/imgbak/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1555762810604},{"_id":"source/imgbak/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1555762810548},{"_id":"public/post-sitemap.xml","hash":"839796721cff70562553e7a17a100d5fbc9f6a34","modified":1555936074828},{"_id":"public/page-sitemap.xml","hash":"f2042188f6d66e4447469b3b1a9051cd119d4653","modified":1555936075411},{"_id":"public/category-sitemap.xml","hash":"288b2ff3a9b90448974da3ccfcf583047fbfcc96","modified":1555936075604},{"_id":"public/tag-sitemap.xml","hash":"399aca9fe3d4d4745674442f0290fee2c315703f","modified":1555936075632},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1555936075632},{"_id":"public/sitemap.xml","hash":"96f5217402490241a7ba0b5b3e3aaeb7bb4f8dc0","modified":1555936075632},{"_id":"public/404.html","hash":"f6feb0245f0a3b2548420a9989164b941679b78c","modified":1555936075644},{"_id":"public/Vue/Vue学习中踩的坑/index.html","hash":"7c83e2d59efa9e6b1c93399be878f7924fffa0ba","modified":1555936075644},{"_id":"public/Android/Android中ViewPager/index.html","hash":"4d4ce68923bfebb8d3d01a35174701a528adaa9c","modified":1555936075644},{"_id":"public/Java/从Java内存模型讲双重检查锁原理/index.html","hash":"a267f94370167efe854f8983a4a9bc36ce9b21fd","modified":1555936075644},{"_id":"public/tags/index.html","hash":"085e44f3e1bee19c239d27adfe59910a2de04d74","modified":1555936075644},{"_id":"public/Java多线程编程核心技术/对象及变量的并发访问/index.html","hash":"2c41339e6924c0ea75bc831e6465262545ca47ad","modified":1555936075644},{"_id":"public/Java多线程编程核心技术/Java多线程技能/index.html","hash":"d831d700ca1e35a07fa976d33f3a1a91197388e2","modified":1555936075644},{"_id":"public/Java/poi-tl生成Word/index.html","hash":"ba5ae93b97053f6b64ba07d7834764d91a6b1a72","modified":1555936075644},{"_id":"public/nginx/nginx启动、重启、关闭/index.html","hash":"70ebf13fa97a7536cb7f3d02be67632f22c5f67a","modified":1555936075644},{"_id":"public/Vim/Vim 操作（二）/index.html","hash":"8612d0960c4e7b54698177605be3ef40623e1e42","modified":1555936075645},{"_id":"public/Vim/Vim 操作（一）/index.html","hash":"836f1e7350cc2def19773bf06a1f1f5411884064","modified":1555936075645},{"_id":"public/SpringBoot/Springbo自定义分页工具类/index.html","hash":"0faf4e2bdcab9d853151cb156a04e947bdcc8bdf","modified":1555936075645},{"_id":"public/Java/Springboot JPA 实体类添加@Transient/index.html","hash":"0be66130459d44c22b17fac2ba8aa27309724f9b","modified":1555936075645},{"_id":"public/Netty/Springboot项目Netty做服务端并自定义Gson配置类解析数据包/index.html","hash":"3416c1dda13ce54a8aab69fd24d160e980dfc313","modified":1555936075645},{"_id":"public/Java/SpringBoot定时任务Schedule使用/index.html","hash":"3ff112b008b57e567e77635a20208e2aade01617","modified":1555936075645},{"_id":"public/Java/Spring boot 实现Web Service/index.html","hash":"69de0d6984074121c309e282cb9e4117311a6595","modified":1555936075645},{"_id":"public/Netty/Netty中的ChannelHandler/index.html","hash":"62a7d2bd0bf137485b2530ca6a8dd6b0edae7c28","modified":1555936075645},{"_id":"public/Java/Spring Boot的启动器Starter大全及自定义Starter/index.html","hash":"0ab688b553a1a19463e814761c8313ed874c27cb","modified":1555936075645},{"_id":"public/Java/No accelerator found - failed to create HAX VM/index.html","hash":"e2092064ce2046cdd48ce9ff9d0d52b7e0bb6945","modified":1555936075645},{"_id":"public/Java/Java Random seed伪随机/index.html","hash":"3dd6d94c9e706b0021de29310a20eb6bdb5c17cf","modified":1555936075645},{"_id":"public/Git/Git基础/index.html","hash":"149dec13f1c865664068887e40892d06e3ce80f1","modified":1555936075645},{"_id":"public/Idea/IntelliJ IDEA插件（Java）/index.html","hash":"f2e198516e1a977d2dd0d9bd1c1cdc9467945d47","modified":1555936075645},{"_id":"public/Java/Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常/index.html","hash":"8f1a58ae6030a092c32eedfac11d52e98fdd3c9e","modified":1555936075645},{"_id":"public/Linux/Another app is currently holding the yum lock; waiting for it to exit.../index.html","hash":"2b3496acc3cfabf9089ddf1eba49e8b93fb05022","modified":1555936075646},{"_id":"public/Linux/Linux中的快捷键/index.html","hash":"464558dc362660cc2f26526922de40273df5ff75","modified":1555936075646},{"_id":"public/Git/Git修改已经提交的注释或日志/index.html","hash":"5aeaf88f265008eed7e3605de09b2e9b37434cf9","modified":1555936075646},{"_id":"public/Android/Android技术分享/index.html","hash":"f96d2d3534ef5d066d4776e92bbf85b6a837b518","modified":1555936075646},{"_id":"public/MySQL/MySQL性能优化/index.html","hash":"aa387d307ebd7654367730e8c9025b4f2131fb0b","modified":1555936075646},{"_id":"public/Android/Cordova生成安卓源码无法运行/index.html","hash":"f6f0a8b067a49be470a1c9d0c017910fd7d804b1","modified":1555936075646},{"_id":"public/Netty/netty自定义协议上传/index.html","hash":"4c308a3f6d6e51ff0e5ed2caecde089aca789d55","modified":1555936075646},{"_id":"public/Java/Java工具类/index.html","hash":"fbbbfa3e1257d8a301475728594d2130dd8da92f","modified":1555936075646},{"_id":"public/winsw/Windows 关闭端口号/index.html","hash":"27c72f21919a0c704ea3e499e911871582f521eb","modified":1555936075646},{"_id":"public/winsw/Windows server部署项目（前后端分离）/index.html","hash":"843c476608db3cbefb5b265fee864362101f4b38","modified":1555936075646},{"_id":"public/Tool/吐血推荐 _ 那些提升开发人员工作效率的在线工具/index.html","hash":"c14697309c535d6b73a0b5fd3d6559b6378f624c","modified":1555936075646},{"_id":"public/Linux/Linux中部署Maven项目, 自定义setting.xml文件/index.html","hash":"ae4868fc79d74e7c57c639a9af0eb6b42105c433","modified":1555936075647},{"_id":"public/Java/JPA中的could not initialize proxy - no Session异常分析与解决/index.html","hash":"1a698f028ff8e44ec5edf2dc6786485018c11a24","modified":1555936075647},{"_id":"public/Android/阿里Android开发手册/index.html","hash":"5193c5da0804b923fc8ee28d8db057ad7a1854de","modified":1555936075647},{"_id":"public/Linux/Linux有趣（无用）的命令/index.html","hash":"6147028df7eb38740dcb8180988e85d040eaec22","modified":1555936075647},{"_id":"public/Linux/Linux命令[系统管理与维护命令]/index.html","hash":"814740dd9f869421e9446b85e6498e931b925af1","modified":1555936075647},{"_id":"public/Linux/Linux简单命令/index.html","hash":"f1d8d5ad3ccc41f124997b9c785b15ae700e5863","modified":1555936075647},{"_id":"public/Linux/Modbus协议服务端（Netty）/index.html","hash":"ca17d56699ae39f0a50a0e5da8687d10ee6d58f6","modified":1555936075647},{"_id":"public/EffctiveJava学习/《EffctiveJava》对于所有对象都通用的方法/index.html","hash":"2f244e0eaddd2786326ae0eaacb04f8f401126a4","modified":1555936075647},{"_id":"public/EffctiveJava学习/《EffctiveJava》创建和销毁对象/index.html","hash":"02ab8d501e102e9574c2b485c66f129fa9be253f","modified":1555936075647},{"_id":"public/MySQL/MySQL慢查询日志总结/index.html","hash":"51a2bf8ef11f16b162a00807f3282b8b0e4bb78f","modified":1555936075648},{"_id":"public/Java/JAVA中使用openoffice将Excel转PDF再转图片功能实现/index.html","hash":"be5bff8a6ce4d40a62f3c46dc72079042933f67c","modified":1555936075648},{"_id":"public/Kafka/Kafka总结/index.html","hash":"d789cb20508a66879eeb73fe6f531c540226eaa5","modified":1555936075648},{"_id":"public/Kafka学习/Kafka_入门/index.html","hash":"9a442e45ec2ef6c0609a6acd3b9da8d119e6551d","modified":1555936075648},{"_id":"public/Java/阿里Java开发手册/index.html","hash":"ad2b26ac8576ffde670fe143173ce9b6c73880e2","modified":1555936075648},{"_id":"public/Java/JAVA8新特性学习/index.html","hash":"390fb032fd48c4a152f4fa692780174f45bbdafa","modified":1555936075648},{"_id":"public/Other/书签/index.html","hash":"88bd125c5722f78cdc686e7cf8e1ec3eca7578db","modified":1555936075648},{"_id":"public/Java/Java正确获取客户端真实IP方法整理/index.html","hash":"0cfdcb8aebb0942af03ad9822b7f99dda3acbe4b","modified":1555936075648},{"_id":"public/Java/数字格式化工具类     持续更新/index.html","hash":"a9d056465da2f7ef00c2ffe7a9516f9a653d6d12","modified":1555936075648},{"_id":"public/Android/自定义EditText设置图片文字居中/index.html","hash":"e647bedfce3f40aa5864b22eae0a7f66585db2de","modified":1555936075648},{"_id":"public/article/hexo-theme-huweihuang/index.html","hash":"da439ac163077bdbfc3e5c522f1b38cdce474ea0","modified":1555936075648},{"_id":"public/Android/EditText监听事件/index.html","hash":"0907ec5263ad6f95b07be4c52417875b45678a52","modified":1555936075649},{"_id":"public/about/index.html","hash":"55741dc4e9b971393937c90d23de6f0eb563add7","modified":1555936075649},{"_id":"public/archive/index.html","hash":"3a9b6e9ff3fdf076f6087abdc2f833822043ed83","modified":1555936075649},{"_id":"public/index.html","hash":"97a9344b9d9216626e107a815879df6dac8fc590","modified":1555936075649},{"_id":"public/archives/2/index.html","hash":"7bd818a16ff549443051b4287e9c73d15f02641a","modified":1555936075649},{"_id":"public/archives/3/index.html","hash":"339e1d2111c9cee5e108b79afd5a6d779173f960","modified":1555936075649},{"_id":"public/archives/4/index.html","hash":"ba5e84c1d5bdc5174103eb508d9c8fd84fafc5d7","modified":1555936075649},{"_id":"public/archives/5/index.html","hash":"a2050924ef1096e1ed856a226dc3b8469fb21f4b","modified":1555936075649},{"_id":"public/archives/6/index.html","hash":"34f2bb3e928932468de8fc41b89cbe20f6605335","modified":1555936075649},{"_id":"public/archives/index.html","hash":"30e5ec4a31cede5e880f0fc49afcb164c102cd08","modified":1555936075649},{"_id":"public/archives/archives/2/index.html","hash":"e365d166af014726f886aad7be220805412f1d4b","modified":1555936075649},{"_id":"public/archives/archives/3/index.html","hash":"cd1b539616800ca2c8655a728b52015d2a06cd55","modified":1555936075649},{"_id":"public/archives/archives/4/index.html","hash":"e4d8db06607e133a9b38389f97b94b264741da1e","modified":1555936075649},{"_id":"public/archives/archives/5/index.html","hash":"f3212b5ce4371f09223cdebc78c4dbb9d4daedb9","modified":1555936075650},{"_id":"public/archives/archives/6/index.html","hash":"189c542d914371ac444130f4c2b3d09557a5008f","modified":1555936075650},{"_id":"public/archives/2015/index.html","hash":"d81140037765d5eb2529175c6fc7d64cf237eb64","modified":1555936075650},{"_id":"public/archives/2015/01/index.html","hash":"c951b2414d1bafcbcdff0b43fb18a6f2a3ea710b","modified":1555936075650},{"_id":"public/archives/2017/index.html","hash":"65232fa9ea9d24fb6d3b4991379f403fa6ee1143","modified":1555936075650},{"_id":"public/archives/2017/09/index.html","hash":"ba9e56bbeb1762862812b390ccc9013223e68bba","modified":1555936075650},{"_id":"public/archives/2017/10/index.html","hash":"7e30580063e96b30f127b9f47484270f078e2ae3","modified":1555936075650},{"_id":"public/archives/2017/12/index.html","hash":"a5ca119480a892799783c1dc0bfa5cbe0d9fe308","modified":1555936075650},{"_id":"public/archives/2018/index.html","hash":"f4506163de932d44dd303d9d044ed511dd875ef4","modified":1555936075650},{"_id":"public/archives/2018/archives/2/index.html","hash":"ccd3936a5f86b8ffe653a772fe7054336d34965c","modified":1555936075650},{"_id":"public/archives/2018/archives/3/index.html","hash":"a2f1ab51a310c0fa43e849fbb903c503ece8de57","modified":1555936075651},{"_id":"public/archives/2018/01/index.html","hash":"a5b7c9c7b1387a987320e5916d9073ec833107a3","modified":1555936075651},{"_id":"public/archives/2018/02/index.html","hash":"f8f8239c769853a167013a274bae85578c2416d2","modified":1555936075651},{"_id":"public/archives/2018/03/index.html","hash":"024e85a31396254073ae355a040f5208521d5a5d","modified":1555936075651},{"_id":"public/archives/2018/04/index.html","hash":"914f43d5a8c01026aaef42377fda59dcf6691c8f","modified":1555936075651},{"_id":"public/archives/2018/05/index.html","hash":"36a25982688bf7186861cc121717bd5a37c59118","modified":1555936075651},{"_id":"public/archives/2018/06/index.html","hash":"adefed936aec9b6694bfa524f6a684e30a89f834","modified":1555936075651},{"_id":"public/archives/2018/07/index.html","hash":"e42c76b04c92144a4f7087bdd055877e24067571","modified":1555936075651},{"_id":"public/archives/2018/08/index.html","hash":"9eef3c7c8ac2dd1895fe5ed8e42d17027ef7ea61","modified":1555936075651},{"_id":"public/archives/2018/09/index.html","hash":"02e0988da05c867163b5bcecca441a5f8e4120c9","modified":1555936075651},{"_id":"public/archives/2018/10/index.html","hash":"19a3fcb99ca47dbac3ef392b86cd6958bb434579","modified":1555936075651},{"_id":"public/archives/2018/11/index.html","hash":"b41096683be6d150763d3adc1e774e31eb1943ff","modified":1555936075652},{"_id":"public/archives/2018/12/index.html","hash":"b7c8e2373bca62ff1dde95157c32b01212fe246b","modified":1555936075652},{"_id":"public/archives/2019/index.html","hash":"3cf5c6871a78c9ccf2d6d9fbb5741656026eabb0","modified":1555936075652},{"_id":"public/archives/2019/archives/2/index.html","hash":"8dd9c8cacd433168f6a97f95d51108a4f31f26e0","modified":1555936075652},{"_id":"public/archives/2019/archives/3/index.html","hash":"74357f8cb66eae1fd9c722fe9b02086267bc7577","modified":1555936075652},{"_id":"public/archives/2019/02/index.html","hash":"32bb8977bdf2817896bd05bec18ad077916b5c64","modified":1555936075652},{"_id":"public/archives/2019/03/index.html","hash":"c5d049f482d16c02ac8c6d00414b7bdab17a71f7","modified":1555936075652},{"_id":"public/archives/2019/04/index.html","hash":"18dafae73a83abbef3a29c9f1910e06571fa404f","modified":1555936075652},{"_id":"public/archives/2019/04/archives/2/index.html","hash":"172e57823524d0514ff21ed35878ec86ec1aa506","modified":1555936075652},{"_id":"public/categories/Linux/index.html","hash":"e7c45b30474f96132e0a30f91effb4a808e52986","modified":1555936075652},{"_id":"public/categories/Java/index.html","hash":"67be5e60cf35f3fbc118c84070368c268b42fab2","modified":1555936075653},{"_id":"public/categories/Java/archives/2/index.html","hash":"2045a596c79f46f845c5cbd5aded429331a45cc4","modified":1555936075653},{"_id":"public/categories/Android/index.html","hash":"68ec0f7df8f05e17e14a67f325b9e9faf57bba55","modified":1555936075653},{"_id":"public/categories/Idea/index.html","hash":"17a6758ae92d8974735520efca903acff67771f4","modified":1555936075653},{"_id":"public/categories/Git/index.html","hash":"804d357ae1d96ea4f128d20e9b4a22dc28b4b73b","modified":1555936075653},{"_id":"public/categories/Kafka学习/index.html","hash":"2ebc77e54ecdf79a8a689356cf084089d7dd4980","modified":1555936075653},{"_id":"public/categories/Kafka/index.html","hash":"b9c82ad2f041498809c195f5c55f92316ee55f31","modified":1555936075653},{"_id":"public/categories/Java多线程编程核心技术/index.html","hash":"c6db7fdd86f7d9f44b35c1f740358aff73dd84fd","modified":1555936075653},{"_id":"public/categories/Netty/index.html","hash":"f6e1f49be53e74e7bfb758670e68ce9f2e4a446a","modified":1555936075653},{"_id":"public/categories/MySQL/index.html","hash":"c530fbb2c56ad97be8e63bea56e6ab03ce939e91","modified":1555936075654},{"_id":"public/categories/Vim/index.html","hash":"70f25c853c665075d6fc7185304ccd43eb7c5e30","modified":1555936075654},{"_id":"public/categories/Vue/index.html","hash":"da375b70d26c5dec8f5b81d65ec0b323c52bf39e","modified":1555936075654},{"_id":"public/categories/SpringBoot/index.html","hash":"571b080d2734755cc4d9aeef24aa05c2649ed1d0","modified":1555936075654},{"_id":"public/categories/winsw/index.html","hash":"d35e05f708247e1512b31bba0a733f998f03ad12","modified":1555936075654},{"_id":"public/categories/nginx/index.html","hash":"c3103fe21d4945a0ef23f39bb5d56596e90e1cb8","modified":1555936075654},{"_id":"public/categories/EffctiveJava学习/index.html","hash":"a24490f5d9ef4a054d8efc7d29fb2e792e0180f7","modified":1555936075654},{"_id":"public/categories/Other/index.html","hash":"5eeac304b39f2908d2950d39b30a3affe5693fff","modified":1555936075654},{"_id":"public/categories/Tool/index.html","hash":"bac7fbb764b7d3ecdf6ad0a97984b6b107d1777c","modified":1555936075654},{"_id":"public/tags/linux/index.html","hash":"39dd62f7be77998b15c522e74cfa69b114c3f4e3","modified":1555936075654},{"_id":"public/tags/java/index.html","hash":"fe9bd371f9b327e0243b2c9ba18ad07a56d92641","modified":1555936075654},{"_id":"public/tags/java/archives/2/index.html","hash":"720af6c085323478e9e400a818c53c3cf6de55ad","modified":1555936075655},{"_id":"public/tags/android/index.html","hash":"61bc238fc6711dcce27f0cd010a893de9f965b47","modified":1555936075655},{"_id":"public/tags/EditText/index.html","hash":"2221d2fd7f85f6f0b629180e592643fab534f363","modified":1555936075655},{"_id":"public/tags/idea/index.html","hash":"bd6f5cab7770f9d862336c0b5c0d32c00d3e2c8c","modified":1555936075655},{"_id":"public/tags/git/index.html","hash":"66f0d6bfdd9695047d98aa24c9d8e911a808e420","modified":1555936075655},{"_id":"public/tags/openoffice/index.html","hash":"87ed84c3d1ae3dfcd27008ca6d8fe647bf455bd7","modified":1555936075655},{"_id":"public/tags/java-random/index.html","hash":"fce09b9159115847519aa28c01990b632146fd2d","modified":1555936075655},{"_id":"public/tags/kafka/index.html","hash":"08ca5ae4067fef9a9c27690ebb0584023036be7e","modified":1555936075655},{"_id":"public/tags/多线程/index.html","hash":"ce5467c4025560a8a231897c4bca3f0bd31681b4","modified":1555936075655},{"_id":"public/tags/netty/index.html","hash":"12e25d4e494501c2481b7e45b6cd52f5e059be85","modified":1555936075655},{"_id":"public/tags/mysql/index.html","hash":"65671040766bb33f088a62bfa735322a637cb135","modified":1555936075655},{"_id":"public/tags/java-springboot/index.html","hash":"129ba2518f7ae51601c3c132617411bd21898ba9","modified":1555936075656},{"_id":"public/tags/java-schedule/index.html","hash":"6366e22cd4cfd433863a4badc90f94408b827f54","modified":1555936075656},{"_id":"public/tags/vim/index.html","hash":"27dc3dd7463e0d0b23337fda610c1e4706e1233b","modified":1555936075656},{"_id":"public/tags/vue/index.html","hash":"1c598daeac8d089517bf3e43e9f883f46cc983a0","modified":1555936075656},{"_id":"public/tags/springboot/index.html","hash":"98ee24cd48f32adc3e8d815f4ea18343d6ec2a63","modified":1555936075656},{"_id":"public/tags/Hexo/index.html","hash":"ba29bc545d657cafee779422d735e7d7fa484c20","modified":1555936075656},{"_id":"public/tags/nginx/index.html","hash":"7cdbaf890c29d89c48fc44a679cbf4ab8a1880bc","modified":1555936075656},{"_id":"public/tags/winsw/index.html","hash":"b28e08bd02059718d9107fb13d7d19ff0d140feb","modified":1555936075656},{"_id":"public/tags/java-poi-tl/index.html","hash":"04d18035f3643a877a5e1e2f75d54579c1090877","modified":1555936075656},{"_id":"public/tags/other/index.html","hash":"70e4220c605d3909c08f7296dd9c4221ed8a5541","modified":1555936075656},{"_id":"public/tags/tool/index.html","hash":"4434eb27b5af26ca7a084b7e0e42af3387888a0c","modified":1555936075656},{"_id":"public/CNAME","hash":"0bb25678b1fdb66277367cb9156542dc5099e0e6","modified":1555936075676},{"_id":"public/favicon.ico","hash":"31980716be933f099d580db04db1569cf981af90","modified":1555936075676},{"_id":"public/img/icon_wechat.png","hash":"737b7edf2b0999bece726bb7a34773befceb9f4f","modified":1555936075676},{"_id":"public/imgbak/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1555936075676},{"_id":"public/img/header_img/about.jpg","hash":"3dbd8f96cdae93fb2d425495ec2dde68c97880d5","modified":1555936075676},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"760d85dcfe29255b29184929a10bd44d0c9fbb3b","modified":1555936075676},{"_id":"public/imgbak/avatar/ironman.png","hash":"7315cc0a3d3fa261b0df2e18282f58ee436caa18","modified":1555936075676},{"_id":"public/imgbak/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1555936075676},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1555936075676},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1555936075677},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1555936075677},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1555936075677},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1555936075677},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1555936075677},{"_id":"public/img/avatar/ironman.png.bak","hash":"c13337cf46ce9aeab86f31d3aa336488c8f54c5c","modified":1555936075677},{"_id":"public/img/avatar/ironman1.png","hash":"c13337cf46ce9aeab86f31d3aa336488c8f54c5c","modified":1555936075677},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"6e05204d914524cdf0dfce70d1e4e2c45ddcc2d0","modified":1555936075921},{"_id":"public/imgbak/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1555936075922},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1555936075924},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1555936075937},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1555936075937},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1555936075937},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1555936075937},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1555936075937},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1555936075937},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1555936075937},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1555936075937},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1555936075938},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1555936075938},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1555936075938},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1555936075938},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1555936075938},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1555936075938},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1555936075938},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1555936075942},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1555936075943},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1555936075943},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1555936075943},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555936075943},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1555936075943},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1555936075943},{"_id":"public/img/header_img/archive.jpg","hash":"4ef24aaf2edd05ebbbcdc024e61d6b52e1f80e0f","modified":1555936075943},{"_id":"public/imgbak/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1555936075943},{"_id":"public/imgbak/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1555936075943},{"_id":"public/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1555936075944},{"_id":"public/imgbak/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1555936075944},{"_id":"public/img/article_header/article_bg.jpg","hash":"a51db494ff5b672793985001dafb581598c9c2de","modified":1555936075958},{"_id":"public/imgbak/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1555936075958},{"_id":"public/imgbak/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1555936075962},{"_id":"public/img/blog.jpg","hash":"cb30c7bf2f43ed10f3a30f290d5ebd3292383172","modified":1555936075967},{"_id":"public/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1555936075967},{"_id":"public/img/header_img/home.jpg","hash":"d1f39791cb2a331d8bd3cedc5d7a0f940e0b4f68","modified":1555936075977},{"_id":"public/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1555936075977},{"_id":"public/imgbak/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1555936075983},{"_id":"public/img/header_img/404.png","hash":"1b98b8219ecee2e263c8c81c58a53e32a62c3526","modified":1555936075989},{"_id":"public/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1555936075991},{"_id":"public/img/header_img/home2.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1555936075995},{"_id":"public/imgbak/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1555936075997},{"_id":"public/imgbak/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1555936076000},{"_id":"public/imgbak/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1555936076011},{"_id":"public/imgbak/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555936076019},{"_id":"public/article/hexo-theme-huweihuang/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555936076019},{"_id":"public/imgbak/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1555936076026},{"_id":"public/imgbak/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1555936076033},{"_id":"public/imgbak/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1555936076040}],"Category":[{"name":"Linux","_id":"cjusc5xs50005vq6b1etvr75d"},{"name":"Java","_id":"cjusc5xsb000avq6bt26y3zid"},{"name":"Android","_id":"cjusc5xsg000gvq6be172khv3"},{"name":"Idea","_id":"cjusc5xsw0016vq6bwksu9vle"},{"name":"Git","_id":"cjusc5xsz001fvq6b2dlpskfs"},{"name":"Kafka学习","_id":"cjusc5xt7001xvq6b45dswu4d"},{"name":"Kafka","_id":"cjusc5xtb0025vq6bwt6ofya8"},{"name":"Java多线程编程核心技术","_id":"cjusc5xtd002dvq6bwsy5bwmg"},{"name":"Netty","_id":"cjusc5xtg002mvq6b88excb78"},{"name":"MySQL","_id":"cjusc5xtm002wvq6bg6ajfbfk"},{"name":"Vim","_id":"cjusc5xtw003bvq6bcp2yfzdk"},{"name":"Vue","_id":"cjusc5xu0003jvq6b33ot8ejd"},{"name":"SpringBoot","_id":"cjusc5xu3003qvq6b5new160t"},{"name":"winsw","_id":"cjusc5xu7003zvq6b6jsxbaav"},{"name":"Nginx","_id":"cjusc5xub0048vq6b1i8nfxtl"},{"name":"EffctiveJava学习","_id":"cjusc5xuj004ovq6brhxjeyla"},{"name":"Other","_id":"cjusc5xur0053vq6bspcr3jgw"},{"name":"Tool","_id":"cjusc5xuv005cvq6bq06m6krk"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-04-20T12:20:10.462Z","updated":"2019-04-20T12:20:10.462Z","path":"404.html","title":"","comments":1,"_id":"cjusc5xqr0000vq6bmktr39qc","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"有梦为马，游历天涯","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 容器云（Docker、Kubernetes等）相关生态技术研究。\n\n### 参与社区\n\n > CSDN博客:https://blog.csdn.net/qq_35974759\n >\n > Github:https://github.com/qijianguo\n >\n\n### 联系我\n\n>Email: qijianguo1206@163.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"有梦为马，游历天涯\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 容器云（Docker、Kubernetes等）相关生态技术研究。\n\n### 参与社区\n\n > CSDN博客:https://blog.csdn.net/qq_35974759\n >\n > Github:https://github.com/qijianguo\n >\n\n### 联系我\n\n>Email: qijianguo1206@163.com\n\n","updated":"2019-04-20T12:20:10.494Z","path":"about/index.html","comments":1,"_id":"cjusc5xs10002vq6b7iwkiaqt","content":"<h3 id=\"一句话\">一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3 id=\"关于我\">关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3 id=\"兴趣方向\">兴趣方向</h3>\n<blockquote>\n<p>容器云（Docker、Kubernetes等）相关生态技术研究。</p>\n</blockquote>\n<h3 id=\"参与社区\">参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"https://blog.csdn.net/qq_35974759\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_35974759</a></p>\n<p>Github:<a href=\"https://github.com/qijianguo\" target=\"_blank\" rel=\"noopener\">https://github.com/qijianguo</a></p>\n</blockquote>\n<h3 id=\"联系我\">联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:qijianguo1206@163.com\" target=\"_blank\" rel=\"noopener\">qijianguo1206@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>容器云（Docker、Kubernetes等）相关生态技术研究。</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"https://blog.csdn.net/qq_35974759\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_35974759</a></p>\n<p>Github:<a href=\"https://github.com/qijianguo\" target=\"_blank\" rel=\"noopener\">https://github.com/qijianguo</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:qijianguo1206@163.com\" target=\"_blank\" rel=\"noopener\">qijianguo1206@163.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-04-20T12:20:10.494Z","path":"archive/index.html","_id":"cjusc5xs40004vq6bsaba4yza","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","date":"2019-04-20T12:20:10.625Z","updated":"2019-04-20T12:20:10.625Z","path":"tags/index.html","comments":1,"_id":"cjusc5xvp0060vq6bwk6l7698","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Another app is currently holding the yum lock; waiting for it to exit...","_content":"\n<!-- more -->\n\n* yum 安装时出现如下错误:\n\n```\n[root@localhost gitrepo]#  yum install gitlab-ce\nLoaded plugins: fastestmirror, langpacks\nExisting lock /var/run/yum.pid: another copy is running as pid 6807.\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:17 ago\n    State  : Sleeping, pid: 6807\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:19 ago\n    State  : Sleeping, pid: 6807\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:21 ago\n    State  : Sleeping, pid: 6807\n```\n\n* 原因: yum只能支持一个例程运行，所以如果有一个例程已经在运行，其他的必须等待该进程退出释放lock。出现这种情况时，可以用以下命令来恢复：\n\n```\nrm -f /var/run/yum.pid\n```\n\n","source":"_posts/Another app is currently holding the yum lock; waiting for it to exit....md","raw":"---\ntitle: Another app is currently holding the yum lock; waiting for it to exit...\ncategories: Linux\ntags: linux\n---\n\n<!-- more -->\n\n* yum 安装时出现如下错误:\n\n```\n[root@localhost gitrepo]#  yum install gitlab-ce\nLoaded plugins: fastestmirror, langpacks\nExisting lock /var/run/yum.pid: another copy is running as pid 6807.\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:17 ago\n    State  : Sleeping, pid: 6807\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:19 ago\n    State  : Sleeping, pid: 6807\nAnother app is currently holding the yum lock; waiting for it to exit...\n  The other application is: PackageKit\n    Memory : 120 M RSS (532 MB VSZ)\n    Started: Tue Oct  9 18:18:18 2018 - 18:21 ago\n    State  : Sleeping, pid: 6807\n```\n\n* 原因: yum只能支持一个例程运行，所以如果有一个例程已经在运行，其他的必须等待该进程退出释放lock。出现这种情况时，可以用以下命令来恢复：\n\n```\nrm -f /var/run/yum.pid\n```\n\n","slug":"Another app is currently holding the yum lock; waiting for it to exit...","published":1,"date":"2019-04-20T12:20:10.463Z","updated":"2019-04-20T12:20:10.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xry0001vq6b4kia3vv4","content":"<a id=\"more\"></a>\n<ul>\n<li>yum 安装时出现如下错误:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost gitrepo]#  yum install gitlab-ce</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Existing lock /var/run/yum.pid: another copy is running as pid 6807.</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:17 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:19 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:21 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因: yum只能支持一个例程运行，所以如果有一个例程已经在运行，其他的必须等待该进程退出释放lock。出现这种情况时，可以用以下命令来恢复：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -f /var/run/yum.pid</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>yum 安装时出现如下错误:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost gitrepo]#  yum install gitlab-ce</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Existing lock /var/run/yum.pid: another copy is running as pid 6807.</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:17 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:19 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br><span class=\"line\">Another app is currently holding the yum lock; waiting for it to exit...</span><br><span class=\"line\">  The other application is: PackageKit</span><br><span class=\"line\">    Memory : 120 M RSS (532 MB VSZ)</span><br><span class=\"line\">    Started: Tue Oct  9 18:18:18 2018 - 18:21 ago</span><br><span class=\"line\">    State  : Sleeping, pid: 6807</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因: yum只能支持一个例程运行，所以如果有一个例程已经在运行，其他的必须等待该进程退出释放lock。出现这种情况时，可以用以下命令来恢复：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -f /var/run/yum.pid</span><br></pre></td></tr></table></figure>"},{"title":"Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常","_content":"\n* Iterator和ListIterator可以对集合遍历同时可以做remove操作, 但在调用Arrays.asList()转化为ArrayList的过程中并不能调用remove()\n\n<!-- more -->\n\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        List<String> list = test();\n        Iterator<String> it = list.iterator();\n        while (it.hasNext()) {\n            String str = it.next();\n            System.out.println(str);\n            if (str.equals(\"a\")) {\n                it.remove();     // TODO: 在这出错了!!! java.lang.UnsupportedOperationException\n            }\n        }\n    }\n\n    private static List<String> test() {\n        // TODO: 返回的是java.util.Arrays$ArrayList\n        List<String> list = Arrays.asList(\"a\", \"b\", \"c\");  \n        list.sort( (e1, e2 ) -> e1.compareTo(e2) );\n        return list;\n    }\n\n}\n\n```\n异常:\n```\nException in thread \"main\" java.lang.UnsupportedOperationException\n\tat java.util.AbstractList.remove(AbstractList.java:161)\n\tat java.util.AbstractList$Itr.remove(AbstractList.java:374)\n\tat lambda.main(lambda.java:18)\n```\n\n解决方式:\n\n```\n  private static List<String> test() {\n        // TODO: 转化成java.util.ArrayList\n\tList<String> list = new ArrayList(Arrays.asList(\"a\", \"b\", \"c\"));\n        list.sort( (e1, e2 ) -> e1.compareTo(e2) );\n        return list;\n    }\n```\n\n\n\n\n什么原因呢? Arrays.asList()返回的是ArrayList没错, 但是返回的ArrayList是Array的一个内部类（java.util.Arrays$ArrayList）, 源码贴到下面了， 观察一下, 根本没有java.util.ArrayList类中的add()、remove()方法, 调用remove()方法当然出错啦！\n\n```[java.util.Arrays$ArrayList 源码]\n...\n    public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\n    private static class ArrayList<E> extends AbstractList<E>\n        implements RandomAccess, java.io.Serializable\n    {\n        private static final long serialVersionUID = -2764017481108945198L;\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            a = Objects.requireNonNull(array);\n        }\n\n        @Override\n        public int size() {\n            return a.length;\n        }\n\n        @Override\n        public Object[] toArray() {\n            return a.clone();\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T[] toArray(T[] a) {\n            int size = size();\n            if (a.length < size)\n                return Arrays.copyOf(this.a, size,\n                                     (Class<? extends T[]>) a.getClass());\n            System.arraycopy(this.a, 0, a, 0, size);\n            if (a.length > size)\n                a[size] = null;\n            return a;\n        }\n\n        @Override\n        public E get(int index) {\n            return a[index];\n        }\n\n        @Override\n        public E set(int index, E element) {\n            E oldValue = a[index];\n            a[index] = element;\n            return oldValue;\n        }\n\n        @Override\n        public int indexOf(Object o) {\n            E[] a = this.a;\n            if (o == null) {\n                for (int i = 0; i < a.length; i++)\n                    if (a[i] == null)\n                        return i;\n            } else {\n                for (int i = 0; i < a.length; i++)\n                    if (o.equals(a[i]))\n                        return i;\n            }\n            return -1;\n        }\n\n        @Override\n        public boolean contains(Object o) {\n            return indexOf(o) != -1;\n        }\n\n        @Override\n        public Spliterator<E> spliterator() {\n            return Spliterators.spliterator(a, Spliterator.ORDERED);\n        }\n\n        @Override\n        public void forEach(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            for (E e : a) {\n                action.accept(e);\n            }\n        }\n\n        @Override\n        public void replaceAll(UnaryOperator<E> operator) {\n            Objects.requireNonNull(operator);\n            E[] a = this.a;\n            for (int i = 0; i < a.length; i++) {\n                a[i] = operator.apply(a[i]);\n            }\n        }\n\n        @Override\n        public void sort(Comparator<? super E> c) {\n            Arrays.sort(a, c);\n        }\n    }\n    ...\n```\n","source":"_posts/Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常.md","raw":"---\ntitle: Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常\ncategories: Java\ntags: java\n---\n\n* Iterator和ListIterator可以对集合遍历同时可以做remove操作, 但在调用Arrays.asList()转化为ArrayList的过程中并不能调用remove()\n\n<!-- more -->\n\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        List<String> list = test();\n        Iterator<String> it = list.iterator();\n        while (it.hasNext()) {\n            String str = it.next();\n            System.out.println(str);\n            if (str.equals(\"a\")) {\n                it.remove();     // TODO: 在这出错了!!! java.lang.UnsupportedOperationException\n            }\n        }\n    }\n\n    private static List<String> test() {\n        // TODO: 返回的是java.util.Arrays$ArrayList\n        List<String> list = Arrays.asList(\"a\", \"b\", \"c\");  \n        list.sort( (e1, e2 ) -> e1.compareTo(e2) );\n        return list;\n    }\n\n}\n\n```\n异常:\n```\nException in thread \"main\" java.lang.UnsupportedOperationException\n\tat java.util.AbstractList.remove(AbstractList.java:161)\n\tat java.util.AbstractList$Itr.remove(AbstractList.java:374)\n\tat lambda.main(lambda.java:18)\n```\n\n解决方式:\n\n```\n  private static List<String> test() {\n        // TODO: 转化成java.util.ArrayList\n\tList<String> list = new ArrayList(Arrays.asList(\"a\", \"b\", \"c\"));\n        list.sort( (e1, e2 ) -> e1.compareTo(e2) );\n        return list;\n    }\n```\n\n\n\n\n什么原因呢? Arrays.asList()返回的是ArrayList没错, 但是返回的ArrayList是Array的一个内部类（java.util.Arrays$ArrayList）, 源码贴到下面了， 观察一下, 根本没有java.util.ArrayList类中的add()、remove()方法, 调用remove()方法当然出错啦！\n\n```[java.util.Arrays$ArrayList 源码]\n...\n    public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\n    private static class ArrayList<E> extends AbstractList<E>\n        implements RandomAccess, java.io.Serializable\n    {\n        private static final long serialVersionUID = -2764017481108945198L;\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            a = Objects.requireNonNull(array);\n        }\n\n        @Override\n        public int size() {\n            return a.length;\n        }\n\n        @Override\n        public Object[] toArray() {\n            return a.clone();\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T[] toArray(T[] a) {\n            int size = size();\n            if (a.length < size)\n                return Arrays.copyOf(this.a, size,\n                                     (Class<? extends T[]>) a.getClass());\n            System.arraycopy(this.a, 0, a, 0, size);\n            if (a.length > size)\n                a[size] = null;\n            return a;\n        }\n\n        @Override\n        public E get(int index) {\n            return a[index];\n        }\n\n        @Override\n        public E set(int index, E element) {\n            E oldValue = a[index];\n            a[index] = element;\n            return oldValue;\n        }\n\n        @Override\n        public int indexOf(Object o) {\n            E[] a = this.a;\n            if (o == null) {\n                for (int i = 0; i < a.length; i++)\n                    if (a[i] == null)\n                        return i;\n            } else {\n                for (int i = 0; i < a.length; i++)\n                    if (o.equals(a[i]))\n                        return i;\n            }\n            return -1;\n        }\n\n        @Override\n        public boolean contains(Object o) {\n            return indexOf(o) != -1;\n        }\n\n        @Override\n        public Spliterator<E> spliterator() {\n            return Spliterators.spliterator(a, Spliterator.ORDERED);\n        }\n\n        @Override\n        public void forEach(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            for (E e : a) {\n                action.accept(e);\n            }\n        }\n\n        @Override\n        public void replaceAll(UnaryOperator<E> operator) {\n            Objects.requireNonNull(operator);\n            E[] a = this.a;\n            for (int i = 0; i < a.length; i++) {\n                a[i] = operator.apply(a[i]);\n            }\n        }\n\n        @Override\n        public void sort(Comparator<? super E> c) {\n            Arrays.sort(a, c);\n        }\n    }\n    ...\n```\n","slug":"Arrays.asList()返回ArrayList调用remove()或add()出现 java.lang.UnsupportedOperationException异常","published":1,"date":"2019-04-20T12:20:10.464Z","updated":"2019-04-20T12:20:10.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xs20003vq6b0qb8hnw9","content":"<ul>\n<li>Iterator和ListIterator可以对集合遍历同时可以做remove操作, 但在调用Arrays.asList()转化为ArrayList的过程中并不能调用remove()</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = test();</span><br><span class=\"line\">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class=\"line\">        while (it.hasNext()) &#123;</span><br><span class=\"line\">            String str = it.next();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">            if (str.equals(&quot;a&quot;)) &#123;</span><br><span class=\"line\">                it.remove();     // TODO: 在这出错了!!! java.lang.UnsupportedOperationException</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static List&lt;String&gt; test() &#123;</span><br><span class=\"line\">        // TODO: 返回的是java.util.Arrays$ArrayList</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);  </span><br><span class=\"line\">        list.sort( (e1, e2 ) -&gt; e1.compareTo(e2) );</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异常:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class=\"line\">\tat java.util.AbstractList.remove(AbstractList.java:161)</span><br><span class=\"line\">\tat java.util.AbstractList$Itr.remove(AbstractList.java:374)</span><br><span class=\"line\">\tat lambda.main(lambda.java:18)</span><br></pre></td></tr></table></figure>\n<p>解决方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> private static List&lt;String&gt; test() &#123;</span><br><span class=\"line\">       // TODO: 转化成java.util.ArrayList</span><br><span class=\"line\">List&lt;String&gt; list = new ArrayList(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;));</span><br><span class=\"line\">       list.sort( (e1, e2 ) -&gt; e1.compareTo(e2) );</span><br><span class=\"line\">       return list;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>什么原因呢? Arrays.asList()返回的是ArrayList没错, 但是返回的ArrayList是Array的一个内部类（java.util.Arrays$ArrayList）, 源码贴到下面了， 观察一下, 根本没有java.util.ArrayList类中的add()、remove()方法, 调用remove()方法当然出错啦！</p>\n<figure class=\"highlight plain\"><figcaption><span>源码]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    public static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements RandomAccess, java.io.Serializable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private static final long serialVersionUID = -2764017481108945198L;</span><br><span class=\"line\">        private final E[] a;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList(E[] array) &#123;</span><br><span class=\"line\">            a = Objects.requireNonNull(array);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int size() &#123;</span><br><span class=\"line\">            return a.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Object[] toArray() &#123;</span><br><span class=\"line\">            return a.clone();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">            int size = size();</span><br><span class=\"line\">            if (a.length &lt; size)</span><br><span class=\"line\">                return Arrays.copyOf(this.a, size,</span><br><span class=\"line\">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class=\"line\">            System.arraycopy(this.a, 0, a, 0, size);</span><br><span class=\"line\">            if (a.length &gt; size)</span><br><span class=\"line\">                a[size] = null;</span><br><span class=\"line\">            return a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public E get(int index) &#123;</span><br><span class=\"line\">            return a[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public E set(int index, E element) &#123;</span><br><span class=\"line\">            E oldValue = a[index];</span><br><span class=\"line\">            a[index] = element;</span><br><span class=\"line\">            return oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int indexOf(Object o) &#123;</span><br><span class=\"line\">            E[] a = this.a;</span><br><span class=\"line\">            if (o == null) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">                    if (a[i] == null)</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">                    if (o.equals(a[i]))</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean contains(Object o) &#123;</span><br><span class=\"line\">            return indexOf(o) != -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class=\"line\">            return Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class=\"line\">            Objects.requireNonNull(action);</span><br><span class=\"line\">            for (E e : a) &#123;</span><br><span class=\"line\">                action.accept(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;</span><br><span class=\"line\">            Objects.requireNonNull(operator);</span><br><span class=\"line\">            E[] a = this.a;</span><br><span class=\"line\">            for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">                a[i] = operator.apply(a[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class=\"line\">            Arrays.sort(a, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>Iterator和ListIterator可以对集合遍历同时可以做remove操作, 但在调用Arrays.asList()转化为ArrayList的过程中并不能调用remove()</li>\n</ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = test();</span><br><span class=\"line\">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class=\"line\">        while (it.hasNext()) &#123;</span><br><span class=\"line\">            String str = it.next();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">            if (str.equals(&quot;a&quot;)) &#123;</span><br><span class=\"line\">                it.remove();     // TODO: 在这出错了!!! java.lang.UnsupportedOperationException</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static List&lt;String&gt; test() &#123;</span><br><span class=\"line\">        // TODO: 返回的是java.util.Arrays$ArrayList</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);  </span><br><span class=\"line\">        list.sort( (e1, e2 ) -&gt; e1.compareTo(e2) );</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异常:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class=\"line\">\tat java.util.AbstractList.remove(AbstractList.java:161)</span><br><span class=\"line\">\tat java.util.AbstractList$Itr.remove(AbstractList.java:374)</span><br><span class=\"line\">\tat lambda.main(lambda.java:18)</span><br></pre></td></tr></table></figure>\n<p>解决方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> private static List&lt;String&gt; test() &#123;</span><br><span class=\"line\">       // TODO: 转化成java.util.ArrayList</span><br><span class=\"line\">List&lt;String&gt; list = new ArrayList(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;));</span><br><span class=\"line\">       list.sort( (e1, e2 ) -&gt; e1.compareTo(e2) );</span><br><span class=\"line\">       return list;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>什么原因呢? Arrays.asList()返回的是ArrayList没错, 但是返回的ArrayList是Array的一个内部类（java.util.Arrays$ArrayList）, 源码贴到下面了， 观察一下, 根本没有java.util.ArrayList类中的add()、remove()方法, 调用remove()方法当然出错啦！</p>\n<figure class=\"highlight plain\"><figcaption><span>源码]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    public static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements RandomAccess, java.io.Serializable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private static final long serialVersionUID = -2764017481108945198L;</span><br><span class=\"line\">        private final E[] a;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList(E[] array) &#123;</span><br><span class=\"line\">            a = Objects.requireNonNull(array);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int size() &#123;</span><br><span class=\"line\">            return a.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Object[] toArray() &#123;</span><br><span class=\"line\">            return a.clone();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">            int size = size();</span><br><span class=\"line\">            if (a.length &lt; size)</span><br><span class=\"line\">                return Arrays.copyOf(this.a, size,</span><br><span class=\"line\">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class=\"line\">            System.arraycopy(this.a, 0, a, 0, size);</span><br><span class=\"line\">            if (a.length &gt; size)</span><br><span class=\"line\">                a[size] = null;</span><br><span class=\"line\">            return a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public E get(int index) &#123;</span><br><span class=\"line\">            return a[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public E set(int index, E element) &#123;</span><br><span class=\"line\">            E oldValue = a[index];</span><br><span class=\"line\">            a[index] = element;</span><br><span class=\"line\">            return oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int indexOf(Object o) &#123;</span><br><span class=\"line\">            E[] a = this.a;</span><br><span class=\"line\">            if (o == null) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">                    if (a[i] == null)</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; a.length; i++)</span><br><span class=\"line\">                    if (o.equals(a[i]))</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean contains(Object o) &#123;</span><br><span class=\"line\">            return indexOf(o) != -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class=\"line\">            return Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class=\"line\">            Objects.requireNonNull(action);</span><br><span class=\"line\">            for (E e : a) &#123;</span><br><span class=\"line\">                action.accept(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;</span><br><span class=\"line\">            Objects.requireNonNull(operator);</span><br><span class=\"line\">            E[] a = this.a;</span><br><span class=\"line\">            for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">                a[i] = operator.apply(a[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class=\"line\">            Arrays.sort(a, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>"},{"title":"Android中ViewPager","date":"2018-12-29T16:01:14.000Z","_content":"\n参考：ViewPager 详解（一）---基本入门[传送门](https://blog.csdn.net/suyimin2010/article/details/80659993)\n参考：ViewPager 全面剖析及使用详解[传送门](https://www.jianshu.com/p/e5abbda4a71c)\n","source":"_posts/Android中ViewPager.md","raw":"---\ntitle: Android中ViewPager\ncategories: Android\ntags: android\ndate: 2018-12-30 00:01:14\n---\n\n参考：ViewPager 详解（一）---基本入门[传送门](https://blog.csdn.net/suyimin2010/article/details/80659993)\n参考：ViewPager 全面剖析及使用详解[传送门](https://www.jianshu.com/p/e5abbda4a71c)\n","slug":"Android中ViewPager","published":1,"updated":"2019-04-20T12:28:41.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xs70007vq6bt890407a","content":"<p>参考：ViewPager 详解（一）—基本入门<a href=\"https://blog.csdn.net/suyimin2010/article/details/80659993\" target=\"_blank\" rel=\"noopener\">传送门</a><br>\n参考：ViewPager 全面剖析及使用详解<a href=\"https://www.jianshu.com/p/e5abbda4a71c\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：ViewPager 详解（一）—基本入门<a href=\"https://blog.csdn.net/suyimin2010/article/details/80659993\" target=\"_blank\" rel=\"noopener\">传送门</a><br>\n参考：ViewPager 全面剖析及使用详解<a href=\"https://www.jianshu.com/p/e5abbda4a71c\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n"},{"title":"Android技术分享","date":"2019-02-26T13:34:14.000Z","_content":"\n## Android入门实践\n#### 什么是Android\n> Android是基于Linux内核开发、主要以Java为开发语言的一个开源的操作系统，主要用于移动设备，如智能手机和平板电脑、可穿戴设备等，当然还有更多的领域使用到了Android系统，例如电视、机顶盒等\n[为什么选用Linux内核](https://www.cnblogs.com/hejing-swust/articles/7821968.html)\n\n<!-- more -->\n\n#### Android的历史\n（这儿把红框内容做成一个图片，例如乔布斯图、Linux图、Java图）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108173528186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)** [Steve Jobs – “No One Is Going To Buy A Big Phone”](https://www.talkandroid.com/6793-steve-jobs-no-one-is-going-to-buy-a-big-phone/)\n** [Linux团队从Linux内核主线中除名](http://www.cnblogs.com/hoys/archive/2012/02/17/2356446.html)\n** Oracle起诉Google，称未取得授权。\n\n> 你可能看到今日辉煌的Android，移动操作系统市场90%的占有率，他的历史可谓是相当曲折、一言难尽的\n> 关键字： 2003年、Andy Rubin、Linux内核、Java、 google、2007开源、2008发布第一个版本\n\n#### Android的架构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019010817373248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n#### Android版本\nhttp://developer.android.com/abort/dashboards/\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108174634497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)[统计](https://developer.android.com/about/dashboards/?hl=zh-cn)\n#### Android系统提供了哪些东西给developer？\n###### 四大组件\n* Activity 活动\n> \n* Service服务\n> 塞班挂QQ，IOS和Windows Phone期初是不支持后台运行的，后来慢慢的认识到其重要性所以后台慢慢加入了，而安卓从一开始就支持后台功能，既使应用程序在关闭的情况下也会在后台运行。\n* Broadcast Receiver广播接收器\n> \n* 内容提供器\n> 用于在不同的程序之间共享数据，即将一些数据共享给他应用，这些数据是一些可以进行二次开发的基础数据，例如：电话簿、短信、多媒体等的数据，他们都实现了跨程序数据共享的功能\n##### 丰富的系统组件\n> Android为开发者提供了丰富的系统组件，可以帮助开发者设计出漂亮的界面，当然，随着也可以定制属于自己的控件。\n#### SQLite 数据库\n> Andrid 自带的数据库，支持SQL语法，也有封装好的API，存储和读取非常方便。（在这加代码，记住用户名和密码）\n\n#### 强大的多媒体\n> 音乐、视频、录音、拍照等，可以用代码进行控制。\n> 连接真机。\n> 通知\n\n#### 地理位置定位 \n> 移动设备相对于PC，地理定位功能应该可以算是一个很大的亮点，结合强大的地图功能，[LBS](https://baike.baidu.com/item/LBS/1742?fr=aladdin) 这一领域潜力非常大。例如外卖、打车、团购、社交、侦查等。\n\n#### 环境搭建 \n1.  挑选一个顺手的开发工具。开发工具有Eclipse和Android Studio，Android项目早期是用Eclipse开发的，需要安装很多插件，开发Android需要安装ADT。而Android Studio是基于Intellij IDEA开发的，插件安装非常简单，还集成了很多工具。比较推荐[Android Studio](https://developer.android.google.cn/studio/)\n2. [JDK](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)：Java开发工具包\n3. [Android SDK](https://blog.csdn.net/zzy1078689276/article/details/80380118#sdk%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80)：谷歌提供的Android开发工具包。在开发时我们需要引入该工具包来使用相关API\n\n## Hello World\n```\n#include <stdio.h>\nint main()\n{\n\tprintf(\"Hello,World!\\n\");\n\treturn 0;\n}\n```\n开始Hello World之路\n\n* 分析Hello World案例\n* 项目结构分析\n* Android Studio使用\n\n## 详细介绍\n#### UI开发\n1. 如何编写程序界面\n2. 常用控件的使用\n2.1 TextView\n2.2 Button\n2.3 EditView\n2.4 ImageView\n2.5 ListView\n2.6 ...\n3. 4种基本布局\n3.1 线性\n3.2 相对\n3.3 帧布局\n3.4 百分比布局\n\n####0【‘\n Activity\n1. TextView 、Button、EditText、Spinner、LinearLayout、自定义View等\n2. 活动的生命周期\n3. 活动间的信息传递\n\n#### Boardcast\n1. 静态活动\n2. 动态活动\n3. 自定义活动\n\n#### Content Provider\n\n\n#### Service\n\n#### 网络\n* 子线程\n> 将耗时的操作放到子线程中去，这里就需要用到java的多线程操作\n* 更新UI\n> 不允许在子线程中更新UI，因为UI是线程不安全的，必须在主线程中更新，否则会异常。\n* 异步消息处理机制\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190109151332630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n* AsyncTask\n\n#### \n\n\n#### 权限\nhttp://developer.android.com/reference/android/Manifest.permission.html\n\n\n## 应用上线\nAndroid系统要求所有的应用软件必须有一个签名文件，直接通过AS运行程序会使用一个默认的签名文件(仅仅适用于开发阶段)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019011814113460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)AS生成签名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190118141413206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)Gradle生成签名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190118141739246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n\n\n## 分享\n\n\n## 总结\n### 提问\n* [安卓为什么会越来越卡](https://www.cnblogs.com/zhuwenlubin/p/5483046.html)\n超出了硬件的范畴，\n\n一方面：\nIOS 是基于Unix的，而Unix不是开源的操作系统，iOS同样也没有开源。 iPhone之所以不会出现“越用越卡”的情况，是因为苹果公司对它的手机从硬件到软件拥有最高的管理权限，在封闭式的环境中，来自第三方的应用程序无法调用超过iPhone承受限度的指令，自然也不可能造成持续性的系统损伤。\n\n而安卓是基于LInux，由于Linux核心设定应用在调取系统功能时一定要取得ROOT权限，这也导致大量应用因为单一功能的实现需求而获得整个ROOT层面的支配，可以在Android手机的任意储存位置进行读写，这种高自由度无异于开启了潘多拉魔盒，让Android手机无法对恶意App事先设防\n\n另一方面：\n一个是宏内核，一个是微内核，宏内核会把每个应用程序当成是系统自身的一部分，而微内核会将CPU分为几部分，当分配的CPU足够支撑应用时其他空闲CPU不会参与。房子的模型。。\n\n\n如何解决：\n1. android在4.4后将应用程序的运行模式由Dalvik换成了ART，简单理解就是预编译。在安装的时候就编译成本地的机器码，减少了启动和运行中的时间\n2. 定制系统，例如小米的MIUI、华为的。。都是在Linux内核上打补丁。\n\n\n\n\n","source":"_posts/Android技术分享.md","raw":"---\ntitle: Android技术分享\ncategories: Android\ntags: android\ndate: 2019-02-26 21:34:14\n---\n\n## Android入门实践\n#### 什么是Android\n> Android是基于Linux内核开发、主要以Java为开发语言的一个开源的操作系统，主要用于移动设备，如智能手机和平板电脑、可穿戴设备等，当然还有更多的领域使用到了Android系统，例如电视、机顶盒等\n[为什么选用Linux内核](https://www.cnblogs.com/hejing-swust/articles/7821968.html)\n\n<!-- more -->\n\n#### Android的历史\n（这儿把红框内容做成一个图片，例如乔布斯图、Linux图、Java图）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108173528186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)** [Steve Jobs – “No One Is Going To Buy A Big Phone”](https://www.talkandroid.com/6793-steve-jobs-no-one-is-going-to-buy-a-big-phone/)\n** [Linux团队从Linux内核主线中除名](http://www.cnblogs.com/hoys/archive/2012/02/17/2356446.html)\n** Oracle起诉Google，称未取得授权。\n\n> 你可能看到今日辉煌的Android，移动操作系统市场90%的占有率，他的历史可谓是相当曲折、一言难尽的\n> 关键字： 2003年、Andy Rubin、Linux内核、Java、 google、2007开源、2008发布第一个版本\n\n#### Android的架构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019010817373248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n#### Android版本\nhttp://developer.android.com/abort/dashboards/\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108174634497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)[统计](https://developer.android.com/about/dashboards/?hl=zh-cn)\n#### Android系统提供了哪些东西给developer？\n###### 四大组件\n* Activity 活动\n> \n* Service服务\n> 塞班挂QQ，IOS和Windows Phone期初是不支持后台运行的，后来慢慢的认识到其重要性所以后台慢慢加入了，而安卓从一开始就支持后台功能，既使应用程序在关闭的情况下也会在后台运行。\n* Broadcast Receiver广播接收器\n> \n* 内容提供器\n> 用于在不同的程序之间共享数据，即将一些数据共享给他应用，这些数据是一些可以进行二次开发的基础数据，例如：电话簿、短信、多媒体等的数据，他们都实现了跨程序数据共享的功能\n##### 丰富的系统组件\n> Android为开发者提供了丰富的系统组件，可以帮助开发者设计出漂亮的界面，当然，随着也可以定制属于自己的控件。\n#### SQLite 数据库\n> Andrid 自带的数据库，支持SQL语法，也有封装好的API，存储和读取非常方便。（在这加代码，记住用户名和密码）\n\n#### 强大的多媒体\n> 音乐、视频、录音、拍照等，可以用代码进行控制。\n> 连接真机。\n> 通知\n\n#### 地理位置定位 \n> 移动设备相对于PC，地理定位功能应该可以算是一个很大的亮点，结合强大的地图功能，[LBS](https://baike.baidu.com/item/LBS/1742?fr=aladdin) 这一领域潜力非常大。例如外卖、打车、团购、社交、侦查等。\n\n#### 环境搭建 \n1.  挑选一个顺手的开发工具。开发工具有Eclipse和Android Studio，Android项目早期是用Eclipse开发的，需要安装很多插件，开发Android需要安装ADT。而Android Studio是基于Intellij IDEA开发的，插件安装非常简单，还集成了很多工具。比较推荐[Android Studio](https://developer.android.google.cn/studio/)\n2. [JDK](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)：Java开发工具包\n3. [Android SDK](https://blog.csdn.net/zzy1078689276/article/details/80380118#sdk%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80)：谷歌提供的Android开发工具包。在开发时我们需要引入该工具包来使用相关API\n\n## Hello World\n```\n#include <stdio.h>\nint main()\n{\n\tprintf(\"Hello,World!\\n\");\n\treturn 0;\n}\n```\n开始Hello World之路\n\n* 分析Hello World案例\n* 项目结构分析\n* Android Studio使用\n\n## 详细介绍\n#### UI开发\n1. 如何编写程序界面\n2. 常用控件的使用\n2.1 TextView\n2.2 Button\n2.3 EditView\n2.4 ImageView\n2.5 ListView\n2.6 ...\n3. 4种基本布局\n3.1 线性\n3.2 相对\n3.3 帧布局\n3.4 百分比布局\n\n####0【‘\n Activity\n1. TextView 、Button、EditText、Spinner、LinearLayout、自定义View等\n2. 活动的生命周期\n3. 活动间的信息传递\n\n#### Boardcast\n1. 静态活动\n2. 动态活动\n3. 自定义活动\n\n#### Content Provider\n\n\n#### Service\n\n#### 网络\n* 子线程\n> 将耗时的操作放到子线程中去，这里就需要用到java的多线程操作\n* 更新UI\n> 不允许在子线程中更新UI，因为UI是线程不安全的，必须在主线程中更新，否则会异常。\n* 异步消息处理机制\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190109151332630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n* AsyncTask\n\n#### \n\n\n#### 权限\nhttp://developer.android.com/reference/android/Manifest.permission.html\n\n\n## 应用上线\nAndroid系统要求所有的应用软件必须有一个签名文件，直接通过AS运行程序会使用一个默认的签名文件(仅仅适用于开发阶段)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019011814113460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)AS生成签名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190118141413206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)Gradle生成签名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190118141739246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n\n\n## 分享\n\n\n## 总结\n### 提问\n* [安卓为什么会越来越卡](https://www.cnblogs.com/zhuwenlubin/p/5483046.html)\n超出了硬件的范畴，\n\n一方面：\nIOS 是基于Unix的，而Unix不是开源的操作系统，iOS同样也没有开源。 iPhone之所以不会出现“越用越卡”的情况，是因为苹果公司对它的手机从硬件到软件拥有最高的管理权限，在封闭式的环境中，来自第三方的应用程序无法调用超过iPhone承受限度的指令，自然也不可能造成持续性的系统损伤。\n\n而安卓是基于LInux，由于Linux核心设定应用在调取系统功能时一定要取得ROOT权限，这也导致大量应用因为单一功能的实现需求而获得整个ROOT层面的支配，可以在Android手机的任意储存位置进行读写，这种高自由度无异于开启了潘多拉魔盒，让Android手机无法对恶意App事先设防\n\n另一方面：\n一个是宏内核，一个是微内核，宏内核会把每个应用程序当成是系统自身的一部分，而微内核会将CPU分为几部分，当分配的CPU足够支撑应用时其他空闲CPU不会参与。房子的模型。。\n\n\n如何解决：\n1. android在4.4后将应用程序的运行模式由Dalvik换成了ART，简单理解就是预编译。在安装的时候就编译成本地的机器码，减少了启动和运行中的时间\n2. 定制系统，例如小米的MIUI、华为的。。都是在Linux内核上打补丁。\n\n\n\n\n","slug":"Android技术分享","published":1,"updated":"2019-04-20T12:28:14.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xs90008vq6b588kr67b","content":"<h2 id=\"android入门实践\">Android入门实践</h2>\n<h4 id=\"什么是android\">什么是Android</h4>\n<blockquote>\n<p>Android是基于Linux内核开发、主要以Java为开发语言的一个开源的操作系统，主要用于移动设备，如智能手机和平板电脑、可穿戴设备等，当然还有更多的领域使用到了Android系统，例如电视、机顶盒等<br>\n<a href=\"https://www.cnblogs.com/hejing-swust/articles/7821968.html\" target=\"_blank\" rel=\"noopener\">为什么选用Linux内核</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"android的历史\">Android的历史</h4>\n<p>（这儿把红框内容做成一个图片，例如乔布斯图、Linux图、Java图）<br>\n<img src=\"https://img-blog.csdnimg.cn/20190108173528186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">** <a href=\"https://www.talkandroid.com/6793-steve-jobs-no-one-is-going-to-buy-a-big-phone/\" target=\"_blank\" rel=\"noopener\">Steve Jobs – “No One Is Going To Buy A Big Phone”</a><br>\n** <a href=\"http://www.cnblogs.com/hoys/archive/2012/02/17/2356446.html\" target=\"_blank\" rel=\"noopener\">Linux团队从Linux内核主线中除名</a><br>\n** Oracle起诉Google，称未取得授权。</p>\n<blockquote>\n<p>你可能看到今日辉煌的Android，移动操作系统市场90%的占有率，他的历史可谓是相当曲折、一言难尽的<br>\n关键字： 2003年、Andy Rubin、Linux内核、Java、 google、2007开源、2008发布第一个版本</p>\n</blockquote>\n<h4 id=\"android的架构\">Android的架构</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/2019010817373248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"android版本\">Android版本</h4>\n<p><a href=\"http://developer.android.com/abort/dashboards/\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/abort/dashboards/</a><br>\n<img src=\"https://img-blog.csdnimg.cn/20190108174634497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><a href=\"https://developer.android.com/about/dashboards/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">统计</a></p>\n<h4 id=\"android系统提供了哪些东西给developer\">Android系统提供了哪些东西给developer？</h4>\n<h6 id=\"四大组件\">四大组件</h6>\n<ul>\n<li>Activity 活动</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>Service服务</li>\n</ul>\n<blockquote>\n<p>塞班挂QQ，IOS和Windows Phone期初是不支持后台运行的，后来慢慢的认识到其重要性所以后台慢慢加入了，而安卓从一开始就支持后台功能，既使应用程序在关闭的情况下也会在后台运行。</p>\n</blockquote>\n<ul>\n<li>Broadcast Receiver广播接收器</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>内容提供器</li>\n</ul>\n<blockquote>\n<p>用于在不同的程序之间共享数据，即将一些数据共享给他应用，这些数据是一些可以进行二次开发的基础数据，例如：电话簿、短信、多媒体等的数据，他们都实现了跨程序数据共享的功能</p>\n</blockquote>\n<h5 id=\"丰富的系统组件\">丰富的系统组件</h5>\n<blockquote>\n<p>Android为开发者提供了丰富的系统组件，可以帮助开发者设计出漂亮的界面，当然，随着也可以定制属于自己的控件。</p>\n</blockquote>\n<h4 id=\"sqlite-数据库\">SQLite 数据库</h4>\n<blockquote>\n<p>Andrid 自带的数据库，支持SQL语法，也有封装好的API，存储和读取非常方便。（在这加代码，记住用户名和密码）</p>\n</blockquote>\n<h4 id=\"强大的多媒体\">强大的多媒体</h4>\n<blockquote>\n<p>音乐、视频、录音、拍照等，可以用代码进行控制。<br>\n连接真机。<br>\n通知</p>\n</blockquote>\n<h4 id=\"地理位置定位\">地理位置定位</h4>\n<blockquote>\n<p>移动设备相对于PC，地理定位功能应该可以算是一个很大的亮点，结合强大的地图功能，<a href=\"https://baike.baidu.com/item/LBS/1742?fr=aladdin\" target=\"_blank\" rel=\"noopener\">LBS</a> 这一领域潜力非常大。例如外卖、打车、团购、社交、侦查等。</p>\n</blockquote>\n<h4 id=\"环境搭建\">环境搭建</h4>\n<ol>\n<li>挑选一个顺手的开发工具。开发工具有Eclipse和Android Studio，Android项目早期是用Eclipse开发的，需要安装很多插件，开发Android需要安装ADT。而Android Studio是基于Intellij IDEA开发的，插件安装非常简单，还集成了很多工具。比较推荐<a href=\"https://developer.android.google.cn/studio/\" target=\"_blank\" rel=\"noopener\">Android Studio</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">JDK</a>：Java开发工具包</li>\n<li><a href=\"https://blog.csdn.net/zzy1078689276/article/details/80380118#sdk%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener\">Android SDK</a>：谷歌提供的Android开发工具包。在开发时我们需要引入该工具包来使用相关API</li>\n</ol>\n<h2 id=\"hello-world\">Hello World</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Hello,World!\\n&quot;);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始Hello World之路</p>\n<ul>\n<li>分析Hello World案例</li>\n<li>项目结构分析</li>\n<li>Android Studio使用</li>\n</ul>\n<h2 id=\"详细介绍\">详细介绍</h2>\n<h4 id=\"ui开发\">UI开发</h4>\n<ol>\n<li>如何编写程序界面</li>\n<li>常用控件的使用<br>\n2.1 TextView<br>\n2.2 Button<br>\n2.3 EditView<br>\n2.4 ImageView<br>\n2.5 ListView<br>\n2.6 …</li>\n<li>4种基本布局<br>\n3.1 线性<br>\n3.2 相对<br>\n3.3 帧布局<br>\n3.4 百分比布局</li>\n</ol>\n<p>####0【‘<br>\nActivity</p>\n<ol>\n<li>TextView 、Button、EditText、Spinner、LinearLayout、自定义View等</li>\n<li>活动的生命周期</li>\n<li>活动间的信息传递</li>\n</ol>\n<h4 id=\"boardcast\">Boardcast</h4>\n<ol>\n<li>静态活动</li>\n<li>动态活动</li>\n<li>自定义活动</li>\n</ol>\n<h4 id=\"content-provider\">Content Provider</h4>\n<h4 id=\"service\">Service</h4>\n<h4 id=\"网络\">网络</h4>\n<ul>\n<li>子线程</li>\n</ul>\n<blockquote>\n<p>将耗时的操作放到子线程中去，这里就需要用到java的多线程操作</p>\n</blockquote>\n<ul>\n<li>更新UI</li>\n</ul>\n<blockquote>\n<p>不允许在子线程中更新UI，因为UI是线程不安全的，必须在主线程中更新，否则会异常。</p>\n</blockquote>\n<ul>\n<li>异步消息处理机制<br>\n<img src=\"https://img-blog.csdnimg.cn/20190109151332630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>AsyncTask</li>\n</ul>\n<h4 id=\"\"></h4>\n<h4 id=\"权限\">权限</h4>\n<p><a href=\"http://developer.android.com/reference/android/Manifest.permission.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/reference/android/Manifest.permission.html</a></p>\n<h2 id=\"应用上线\">应用上线</h2>\n<p>Android系统要求所有的应用软件必须有一个签名文件，直接通过AS运行程序会使用一个默认的签名文件(仅仅适用于开发阶段)<br>\n<img src=\"https://img-blog.csdnimg.cn/2019011814113460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">AS生成签名<br>\n<img src=\"https://img-blog.csdnimg.cn/20190118141413206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">Gradle生成签名<br>\n<img src=\"https://img-blog.csdnimg.cn/20190118141739246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"分享\">分享</h2>\n<h2 id=\"总结\">总结</h2>\n<h3 id=\"提问\">提问</h3>\n<ul>\n<li><a href=\"https://www.cnblogs.com/zhuwenlubin/p/5483046.html\" target=\"_blank\" rel=\"noopener\">安卓为什么会越来越卡</a><br>\n超出了硬件的范畴，</li>\n</ul>\n<p>一方面：<br>\nIOS 是基于Unix的，而Unix不是开源的操作系统，iOS同样也没有开源。 iPhone之所以不会出现“越用越卡”的情况，是因为苹果公司对它的手机从硬件到软件拥有最高的管理权限，在封闭式的环境中，来自第三方的应用程序无法调用超过iPhone承受限度的指令，自然也不可能造成持续性的系统损伤。</p>\n<p>而安卓是基于LInux，由于Linux核心设定应用在调取系统功能时一定要取得ROOT权限，这也导致大量应用因为单一功能的实现需求而获得整个ROOT层面的支配，可以在Android手机的任意储存位置进行读写，这种高自由度无异于开启了潘多拉魔盒，让Android手机无法对恶意App事先设防</p>\n<p>另一方面：<br>\n一个是宏内核，一个是微内核，宏内核会把每个应用程序当成是系统自身的一部分，而微内核会将CPU分为几部分，当分配的CPU足够支撑应用时其他空闲CPU不会参与。房子的模型。。</p>\n<p>如何解决：</p>\n<ol>\n<li>android在4.4后将应用程序的运行模式由Dalvik换成了ART，简单理解就是预编译。在安装的时候就编译成本地的机器码，减少了启动和运行中的时间</li>\n<li>定制系统，例如小米的MIUI、华为的。。都是在Linux内核上打补丁。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2>Android入门实践</h2>\n<h4>什么是Android</h4>\n<blockquote>\n<p>Android是基于Linux内核开发、主要以Java为开发语言的一个开源的操作系统，主要用于移动设备，如智能手机和平板电脑、可穿戴设备等，当然还有更多的领域使用到了Android系统，例如电视、机顶盒等<br>\n<a href=\"https://www.cnblogs.com/hejing-swust/articles/7821968.html\" target=\"_blank\" rel=\"noopener\">为什么选用Linux内核</a></p>\n</blockquote>","more":"<h4>Android的历史</h4>\n<p>（这儿把红框内容做成一个图片，例如乔布斯图、Linux图、Java图）<br>\n<img src=\"https://img-blog.csdnimg.cn/20190108173528186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">** <a href=\"https://www.talkandroid.com/6793-steve-jobs-no-one-is-going-to-buy-a-big-phone/\" target=\"_blank\" rel=\"noopener\">Steve Jobs – “No One Is Going To Buy A Big Phone”</a><br>\n** <a href=\"http://www.cnblogs.com/hoys/archive/2012/02/17/2356446.html\" target=\"_blank\" rel=\"noopener\">Linux团队从Linux内核主线中除名</a><br>\n** Oracle起诉Google，称未取得授权。</p>\n<blockquote>\n<p>你可能看到今日辉煌的Android，移动操作系统市场90%的占有率，他的历史可谓是相当曲折、一言难尽的<br>\n关键字： 2003年、Andy Rubin、Linux内核、Java、 google、2007开源、2008发布第一个版本</p>\n</blockquote>\n<h4>Android的架构</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/2019010817373248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4>Android版本</h4>\n<p><a href=\"http://developer.android.com/abort/dashboards/\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/abort/dashboards/</a><br>\n<img src=\"https://img-blog.csdnimg.cn/20190108174634497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><a href=\"https://developer.android.com/about/dashboards/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">统计</a></p>\n<h4>Android系统提供了哪些东西给developer？</h4>\n<h6>四大组件</h6>\n<ul>\n<li>Activity 活动</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>Service服务</li>\n</ul>\n<blockquote>\n<p>塞班挂QQ，IOS和Windows Phone期初是不支持后台运行的，后来慢慢的认识到其重要性所以后台慢慢加入了，而安卓从一开始就支持后台功能，既使应用程序在关闭的情况下也会在后台运行。</p>\n</blockquote>\n<ul>\n<li>Broadcast Receiver广播接收器</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>内容提供器</li>\n</ul>\n<blockquote>\n<p>用于在不同的程序之间共享数据，即将一些数据共享给他应用，这些数据是一些可以进行二次开发的基础数据，例如：电话簿、短信、多媒体等的数据，他们都实现了跨程序数据共享的功能</p>\n</blockquote>\n<h5>丰富的系统组件</h5>\n<blockquote>\n<p>Android为开发者提供了丰富的系统组件，可以帮助开发者设计出漂亮的界面，当然，随着也可以定制属于自己的控件。</p>\n</blockquote>\n<h4>SQLite 数据库</h4>\n<blockquote>\n<p>Andrid 自带的数据库，支持SQL语法，也有封装好的API，存储和读取非常方便。（在这加代码，记住用户名和密码）</p>\n</blockquote>\n<h4>强大的多媒体</h4>\n<blockquote>\n<p>音乐、视频、录音、拍照等，可以用代码进行控制。<br>\n连接真机。<br>\n通知</p>\n</blockquote>\n<h4>地理位置定位</h4>\n<blockquote>\n<p>移动设备相对于PC，地理定位功能应该可以算是一个很大的亮点，结合强大的地图功能，<a href=\"https://baike.baidu.com/item/LBS/1742?fr=aladdin\" target=\"_blank\" rel=\"noopener\">LBS</a> 这一领域潜力非常大。例如外卖、打车、团购、社交、侦查等。</p>\n</blockquote>\n<h4>环境搭建</h4>\n<ol>\n<li>挑选一个顺手的开发工具。开发工具有Eclipse和Android Studio，Android项目早期是用Eclipse开发的，需要安装很多插件，开发Android需要安装ADT。而Android Studio是基于Intellij IDEA开发的，插件安装非常简单，还集成了很多工具。比较推荐<a href=\"https://developer.android.google.cn/studio/\" target=\"_blank\" rel=\"noopener\">Android Studio</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">JDK</a>：Java开发工具包</li>\n<li><a href=\"https://blog.csdn.net/zzy1078689276/article/details/80380118#sdk%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener\">Android SDK</a>：谷歌提供的Android开发工具包。在开发时我们需要引入该工具包来使用相关API</li>\n</ol>\n<h2>Hello World</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Hello,World!\\n&quot;);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始Hello World之路</p>\n<ul>\n<li>分析Hello World案例</li>\n<li>项目结构分析</li>\n<li>Android Studio使用</li>\n</ul>\n<h2>详细介绍</h2>\n<h4>UI开发</h4>\n<ol>\n<li>如何编写程序界面</li>\n<li>常用控件的使用<br>\n2.1 TextView<br>\n2.2 Button<br>\n2.3 EditView<br>\n2.4 ImageView<br>\n2.5 ListView<br>\n2.6 …</li>\n<li>4种基本布局<br>\n3.1 线性<br>\n3.2 相对<br>\n3.3 帧布局<br>\n3.4 百分比布局</li>\n</ol>\n<p>####0【‘<br>\nActivity</p>\n<ol>\n<li>TextView 、Button、EditText、Spinner、LinearLayout、自定义View等</li>\n<li>活动的生命周期</li>\n<li>活动间的信息传递</li>\n</ol>\n<h4>Boardcast</h4>\n<ol>\n<li>静态活动</li>\n<li>动态活动</li>\n<li>自定义活动</li>\n</ol>\n<h4>Content Provider</h4>\n<h4>Service</h4>\n<h4>网络</h4>\n<ul>\n<li>子线程</li>\n</ul>\n<blockquote>\n<p>将耗时的操作放到子线程中去，这里就需要用到java的多线程操作</p>\n</blockquote>\n<ul>\n<li>更新UI</li>\n</ul>\n<blockquote>\n<p>不允许在子线程中更新UI，因为UI是线程不安全的，必须在主线程中更新，否则会异常。</p>\n</blockquote>\n<ul>\n<li>异步消息处理机制<br>\n<img src=\"https://img-blog.csdnimg.cn/20190109151332630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>AsyncTask</li>\n</ul>\n<h4></h4>\n<h4>权限</h4>\n<p><a href=\"http://developer.android.com/reference/android/Manifest.permission.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/reference/android/Manifest.permission.html</a></p>\n<h2>应用上线</h2>\n<p>Android系统要求所有的应用软件必须有一个签名文件，直接通过AS运行程序会使用一个默认的签名文件(仅仅适用于开发阶段)<br>\n<img src=\"https://img-blog.csdnimg.cn/2019011814113460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">AS生成签名<br>\n<img src=\"https://img-blog.csdnimg.cn/20190118141413206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">Gradle生成签名<br>\n<img src=\"https://img-blog.csdnimg.cn/20190118141739246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2>分享</h2>\n<h2>总结</h2>\n<h3>提问</h3>\n<ul>\n<li><a href=\"https://www.cnblogs.com/zhuwenlubin/p/5483046.html\" target=\"_blank\" rel=\"noopener\">安卓为什么会越来越卡</a><br>\n超出了硬件的范畴，</li>\n</ul>\n<p>一方面：<br>\nIOS 是基于Unix的，而Unix不是开源的操作系统，iOS同样也没有开源。 iPhone之所以不会出现“越用越卡”的情况，是因为苹果公司对它的手机从硬件到软件拥有最高的管理权限，在封闭式的环境中，来自第三方的应用程序无法调用超过iPhone承受限度的指令，自然也不可能造成持续性的系统损伤。</p>\n<p>而安卓是基于LInux，由于Linux核心设定应用在调取系统功能时一定要取得ROOT权限，这也导致大量应用因为单一功能的实现需求而获得整个ROOT层面的支配，可以在Android手机的任意储存位置进行读写，这种高自由度无异于开启了潘多拉魔盒，让Android手机无法对恶意App事先设防</p>\n<p>另一方面：<br>\n一个是宏内核，一个是微内核，宏内核会把每个应用程序当成是系统自身的一部分，而微内核会将CPU分为几部分，当分配的CPU足够支撑应用时其他空闲CPU不会参与。房子的模型。。</p>\n<p>如何解决：</p>\n<ol>\n<li>android在4.4后将应用程序的运行模式由Dalvik换成了ART，简单理解就是预编译。在安装的时候就编译成本地的机器码，减少了启动和运行中的时间</li>\n<li>定制系统，例如小米的MIUI、华为的。。都是在Linux内核上打补丁。</li>\n</ol>"},{"title":"EditText监听事件","date":"2015-01-18T16:34:14.000Z","_content":"\n<!-- more -->\n\n* 源码\n```[源码]\n   /**\n     * Adds a TextWatcher to the list of those whose methods are called\n     * whenever this TextView's text changes.\n     * <p>\n     * In 1.0, the {@link TextWatcher#afterTextChanged} method was erroneously\n     * not called after {@link #setText} calls.  Now, doing {@link #setText}\n     * if there are any text changed listeners forces the buffer type to\n     * Editable if it would not otherwise be and does call this method.\n     */\n public void addTextChangedListener(TextWatcher watcher) {\n      if (mListeners == null) {\n           mListeners = new ArrayList<TextWatcher>();\n      }\n\n      mListeners.add(watcher);\n  }\n```\n\n* 示例: \n\n```\nprivate EditText editText;\n\nprivate void initView(){\n\teditText = (editText)findViewById(R.id.edit_text);\n}\n\nprivate void initEvents() {\n\teditText.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n                Log.i(TAG, \"beforeTextChanged: 输入过程中执行该方法\");\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                Log.i(TAG, \"onTextChanged: 输入前确认执行该方法\");\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\t\tLog.i(TAG, \"afterTextChanged: 输入结束执行该方法\");\n            }\n        });\n\n}\n```\n","source":"_posts/EditText监听事件.md","raw":"---\ntitle: EditText监听事件\ncategories: Android\ntags: EditText\ndate: 2015-01-19 00:34:14\n---\n\n<!-- more -->\n\n* 源码\n```[源码]\n   /**\n     * Adds a TextWatcher to the list of those whose methods are called\n     * whenever this TextView's text changes.\n     * <p>\n     * In 1.0, the {@link TextWatcher#afterTextChanged} method was erroneously\n     * not called after {@link #setText} calls.  Now, doing {@link #setText}\n     * if there are any text changed listeners forces the buffer type to\n     * Editable if it would not otherwise be and does call this method.\n     */\n public void addTextChangedListener(TextWatcher watcher) {\n      if (mListeners == null) {\n           mListeners = new ArrayList<TextWatcher>();\n      }\n\n      mListeners.add(watcher);\n  }\n```\n\n* 示例: \n\n```\nprivate EditText editText;\n\nprivate void initView(){\n\teditText = (editText)findViewById(R.id.edit_text);\n}\n\nprivate void initEvents() {\n\teditText.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n                Log.i(TAG, \"beforeTextChanged: 输入过程中执行该方法\");\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                Log.i(TAG, \"onTextChanged: 输入前确认执行该方法\");\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\t\tLog.i(TAG, \"afterTextChanged: 输入结束执行该方法\");\n            }\n        });\n\n}\n```\n","slug":"EditText监听事件","published":1,"updated":"2019-04-20T12:20:10.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsa0009vq6b9i7ecg45","content":"<a id=\"more\"></a>\n<ul>\n<li>源码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /**</span><br><span class=\"line\">    * Adds a TextWatcher to the list of those whose methods are called</span><br><span class=\"line\">    * whenever this TextView&apos;s text changes.</span><br><span class=\"line\">    * &lt;p&gt;</span><br><span class=\"line\">    * In 1.0, the &#123;@link TextWatcher#afterTextChanged&#125; method was erroneously</span><br><span class=\"line\">    * not called after &#123;@link #setText&#125; calls.  Now, doing &#123;@link #setText&#125;</span><br><span class=\"line\">    * if there are any text changed listeners forces the buffer type to</span><br><span class=\"line\">    * Editable if it would not otherwise be and does call this method.</span><br><span class=\"line\">    */</span><br><span class=\"line\">public void addTextChangedListener(TextWatcher watcher) &#123;</span><br><span class=\"line\">     if (mListeners == null) &#123;</span><br><span class=\"line\">          mListeners = new ArrayList&lt;TextWatcher&gt;();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     mListeners.add(watcher);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private EditText editText;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initView()&#123;</span><br><span class=\"line\">\teditText = (editText)findViewById(R.id.edit_text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initEvents() &#123;</span><br><span class=\"line\">\teditText.addTextChangedListener(new TextWatcher() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</span><br><span class=\"line\">                Log.i(TAG, &quot;beforeTextChanged: 输入过程中执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class=\"line\">                Log.i(TAG, &quot;onTextChanged: 输入前确认执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void afterTextChanged(Editable s) &#123;</span><br><span class=\"line\">\t\tLog.i(TAG, &quot;afterTextChanged: 输入结束执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>源码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /**</span><br><span class=\"line\">    * Adds a TextWatcher to the list of those whose methods are called</span><br><span class=\"line\">    * whenever this TextView&apos;s text changes.</span><br><span class=\"line\">    * &lt;p&gt;</span><br><span class=\"line\">    * In 1.0, the &#123;@link TextWatcher#afterTextChanged&#125; method was erroneously</span><br><span class=\"line\">    * not called after &#123;@link #setText&#125; calls.  Now, doing &#123;@link #setText&#125;</span><br><span class=\"line\">    * if there are any text changed listeners forces the buffer type to</span><br><span class=\"line\">    * Editable if it would not otherwise be and does call this method.</span><br><span class=\"line\">    */</span><br><span class=\"line\">public void addTextChangedListener(TextWatcher watcher) &#123;</span><br><span class=\"line\">     if (mListeners == null) &#123;</span><br><span class=\"line\">          mListeners = new ArrayList&lt;TextWatcher&gt;();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     mListeners.add(watcher);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private EditText editText;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initView()&#123;</span><br><span class=\"line\">\teditText = (editText)findViewById(R.id.edit_text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initEvents() &#123;</span><br><span class=\"line\">\teditText.addTextChangedListener(new TextWatcher() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</span><br><span class=\"line\">                Log.i(TAG, &quot;beforeTextChanged: 输入过程中执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class=\"line\">                Log.i(TAG, &quot;onTextChanged: 输入前确认执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void afterTextChanged(Editable s) &#123;</span><br><span class=\"line\">\t\tLog.i(TAG, &quot;afterTextChanged: 输入结束执行该方法&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Cordova生成安卓源码无法运行","date":"2018-12-28T08:21:01.000Z","_content":"\n## 说明: cordova编译生成的android源码在Android Studio中运行, 无法找到\n```\nGradle 'android' project refresh failed\nError:No installed build tools found. Install the Android build tools version 19.1.0 or higher.\n```\n<!-- more -->\n## 解决方式一:\n\n1. 全局搜索  availableBuildToolsVersions = getAvailableBuildTools()\n![修改前的照片](https://img-blog.csdn.net/20180921102547408?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n修改为\n```\navailableBuildToolsVersions  = ['21.0.0','20.0.0','19.1.0','19.0.3'] as String[]\n```\n\n![修改后的源码截图](https://img-blog.csdn.net/20180921102905659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n## 分析:\n\n```\nString doFindLatestInstalledBuildTools(String minBuildToolsVersion) {\n    def availableBuildToolsVersions\n    try {\n    \t// TODO: 获得可用的 build-tools\n        availableBuildToolsVersions  = getAvailableBuildTools()\n    } catch (e) {\n        println \"An exception occurred while trying to find the Android build tools.\"\n        throw e\n    }\n    if (availableBuildToolsVersions.length > 0) {\n        def highestBuildToolsVersion = availableBuildToolsVersions[0]\n        if (compareVersions(highestBuildToolsVersion, minBuildToolsVersion) < 0) {\n            throw new RuntimeException(\n                \"No usable Android build tools found. Highest installed version is \" +\n                highestBuildToolsVersion + \"; minimum version required is \" +\n                minBuildToolsVersion + \".\")\n        }\n        highestBuildToolsVersion\n    } else {\n    \t// TODO 上面报错正是这抛出的异常, 为什么会走这呢, 因为没找到build-tools的版本\n        throw new RuntimeException(\n            \"No installed build tools found. Install the Android build tools version \" +\n            minBuildToolsVersion + \" or higher.\")\n    }\n}\n\n/**\n * 获取可用的build-tool\n * @return\n */\nString[] getAvailableBuildTools() {\n    def buildToolsDir = new File(getAndroidSdkDir(), \"build-tools\")\n    buildToolsDir.list()\n        .findAll { it ==~ /[0-9.]+/ } \n        .sort { a, b -> compareVersions(b, a) }\n}\n\n/**\n * 获取SDK位置\n * @return\n */\nString getAndroidSdkDir() {\n    def rootDir = project.rootDir\n    def androidSdkDir = null\n    String envVar = System.getenv(\"ANDROID_HOME\")\n    def localProperties = new File(rootDir, 'local.properties')\n    String systemProperty = System.getProperty(\"android.home\")\n    if (envVar != null) {\n        androidSdkDir = envVar\n    } else if (localProperties.exists()) {\n        Properties properties = new Properties()\n        localProperties.withInputStream { instr ->\n            properties.load(instr)\n        }\n        def sdkDirProp = properties.getProperty('sdk.dir')\n        if (sdkDirProp != null) {\n            androidSdkDir = sdkDirProp\n        } else {\n            sdkDirProp = properties.getProperty('android.dir')\n            if (sdkDirProp != null) {\n                androidSdkDir = (new File(rootDir, sdkDirProp)).getAbsolutePath()\n            }\n        }\n    }\n    if (androidSdkDir == null && systemProperty != null) {\n        androidSdkDir = systemProperty\n    }\n    if (androidSdkDir == null) {\n        throw new RuntimeException(\n            \"Unable to determine Android SDK directory.\")\n    }\n    androidSdkDir\n}\n```\n\n\n\n","source":"_posts/Cordova生成安卓源码无法运行.md","raw":"---\ntitle: Cordova生成安卓源码无法运行\ncategories: Android\ntags: android\ndate: 2018-12-28 16:21:01\n---\n\n## 说明: cordova编译生成的android源码在Android Studio中运行, 无法找到\n```\nGradle 'android' project refresh failed\nError:No installed build tools found. Install the Android build tools version 19.1.0 or higher.\n```\n<!-- more -->\n## 解决方式一:\n\n1. 全局搜索  availableBuildToolsVersions = getAvailableBuildTools()\n![修改前的照片](https://img-blog.csdn.net/20180921102547408?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n修改为\n```\navailableBuildToolsVersions  = ['21.0.0','20.0.0','19.1.0','19.0.3'] as String[]\n```\n\n![修改后的源码截图](https://img-blog.csdn.net/20180921102905659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n## 分析:\n\n```\nString doFindLatestInstalledBuildTools(String minBuildToolsVersion) {\n    def availableBuildToolsVersions\n    try {\n    \t// TODO: 获得可用的 build-tools\n        availableBuildToolsVersions  = getAvailableBuildTools()\n    } catch (e) {\n        println \"An exception occurred while trying to find the Android build tools.\"\n        throw e\n    }\n    if (availableBuildToolsVersions.length > 0) {\n        def highestBuildToolsVersion = availableBuildToolsVersions[0]\n        if (compareVersions(highestBuildToolsVersion, minBuildToolsVersion) < 0) {\n            throw new RuntimeException(\n                \"No usable Android build tools found. Highest installed version is \" +\n                highestBuildToolsVersion + \"; minimum version required is \" +\n                minBuildToolsVersion + \".\")\n        }\n        highestBuildToolsVersion\n    } else {\n    \t// TODO 上面报错正是这抛出的异常, 为什么会走这呢, 因为没找到build-tools的版本\n        throw new RuntimeException(\n            \"No installed build tools found. Install the Android build tools version \" +\n            minBuildToolsVersion + \" or higher.\")\n    }\n}\n\n/**\n * 获取可用的build-tool\n * @return\n */\nString[] getAvailableBuildTools() {\n    def buildToolsDir = new File(getAndroidSdkDir(), \"build-tools\")\n    buildToolsDir.list()\n        .findAll { it ==~ /[0-9.]+/ } \n        .sort { a, b -> compareVersions(b, a) }\n}\n\n/**\n * 获取SDK位置\n * @return\n */\nString getAndroidSdkDir() {\n    def rootDir = project.rootDir\n    def androidSdkDir = null\n    String envVar = System.getenv(\"ANDROID_HOME\")\n    def localProperties = new File(rootDir, 'local.properties')\n    String systemProperty = System.getProperty(\"android.home\")\n    if (envVar != null) {\n        androidSdkDir = envVar\n    } else if (localProperties.exists()) {\n        Properties properties = new Properties()\n        localProperties.withInputStream { instr ->\n            properties.load(instr)\n        }\n        def sdkDirProp = properties.getProperty('sdk.dir')\n        if (sdkDirProp != null) {\n            androidSdkDir = sdkDirProp\n        } else {\n            sdkDirProp = properties.getProperty('android.dir')\n            if (sdkDirProp != null) {\n                androidSdkDir = (new File(rootDir, sdkDirProp)).getAbsolutePath()\n            }\n        }\n    }\n    if (androidSdkDir == null && systemProperty != null) {\n        androidSdkDir = systemProperty\n    }\n    if (androidSdkDir == null) {\n        throw new RuntimeException(\n            \"Unable to determine Android SDK directory.\")\n    }\n    androidSdkDir\n}\n```\n\n\n\n","slug":"Cordova生成安卓源码无法运行","published":1,"updated":"2019-04-20T12:39:30.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsc000dvq6bbcdzmdtw","content":"<h2 id=\"说明-cordova编译生成的android源码在android-studio中运行-无法找到\">说明: cordova编译生成的android源码在Android Studio中运行, 无法找到</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gradle &apos;android&apos; project refresh failed</span><br><span class=\"line\">Error:No installed build tools found. Install the Android build tools version 19.1.0 or higher.</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"解决方式一\">解决方式一:</h2>\n<ol>\n<li>全局搜索  availableBuildToolsVersions = getAvailableBuildTools()<br>\n<img src=\"https://img-blog.csdn.net/20180921102547408?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"修改前的照片\"></li>\n</ol>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">availableBuildToolsVersions  = [&apos;21.0.0&apos;,&apos;20.0.0&apos;,&apos;19.1.0&apos;,&apos;19.0.3&apos;] as String[]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdn.net/20180921102905659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"修改后的源码截图\"></p>\n<h2 id=\"分析\">分析:</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String doFindLatestInstalledBuildTools(String minBuildToolsVersion) &#123;</span><br><span class=\"line\">    def availableBuildToolsVersions</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    \t// TODO: 获得可用的 build-tools</span><br><span class=\"line\">        availableBuildToolsVersions  = getAvailableBuildTools()</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">        println &quot;An exception occurred while trying to find the Android build tools.&quot;</span><br><span class=\"line\">        throw e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (availableBuildToolsVersions.length &gt; 0) &#123;</span><br><span class=\"line\">        def highestBuildToolsVersion = availableBuildToolsVersions[0]</span><br><span class=\"line\">        if (compareVersions(highestBuildToolsVersion, minBuildToolsVersion) &lt; 0) &#123;</span><br><span class=\"line\">            throw new RuntimeException(</span><br><span class=\"line\">                &quot;No usable Android build tools found. Highest installed version is &quot; +</span><br><span class=\"line\">                highestBuildToolsVersion + &quot;; minimum version required is &quot; +</span><br><span class=\"line\">                minBuildToolsVersion + &quot;.&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        highestBuildToolsVersion</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    \t// TODO 上面报错正是这抛出的异常, 为什么会走这呢, 因为没找到build-tools的版本</span><br><span class=\"line\">        throw new RuntimeException(</span><br><span class=\"line\">            &quot;No installed build tools found. Install the Android build tools version &quot; +</span><br><span class=\"line\">            minBuildToolsVersion + &quot; or higher.&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取可用的build-tool</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">String[] getAvailableBuildTools() &#123;</span><br><span class=\"line\">    def buildToolsDir = new File(getAndroidSdkDir(), &quot;build-tools&quot;)</span><br><span class=\"line\">    buildToolsDir.list()</span><br><span class=\"line\">        .findAll &#123; it ==~ /[0-9.]+/ &#125; </span><br><span class=\"line\">        .sort &#123; a, b -&gt; compareVersions(b, a) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取SDK位置</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">String getAndroidSdkDir() &#123;</span><br><span class=\"line\">    def rootDir = project.rootDir</span><br><span class=\"line\">    def androidSdkDir = null</span><br><span class=\"line\">    String envVar = System.getenv(&quot;ANDROID_HOME&quot;)</span><br><span class=\"line\">    def localProperties = new File(rootDir, &apos;local.properties&apos;)</span><br><span class=\"line\">    String systemProperty = System.getProperty(&quot;android.home&quot;)</span><br><span class=\"line\">    if (envVar != null) &#123;</span><br><span class=\"line\">        androidSdkDir = envVar</span><br><span class=\"line\">    &#125; else if (localProperties.exists()) &#123;</span><br><span class=\"line\">        Properties properties = new Properties()</span><br><span class=\"line\">        localProperties.withInputStream &#123; instr -&gt;</span><br><span class=\"line\">            properties.load(instr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        def sdkDirProp = properties.getProperty(&apos;sdk.dir&apos;)</span><br><span class=\"line\">        if (sdkDirProp != null) &#123;</span><br><span class=\"line\">            androidSdkDir = sdkDirProp</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            sdkDirProp = properties.getProperty(&apos;android.dir&apos;)</span><br><span class=\"line\">            if (sdkDirProp != null) &#123;</span><br><span class=\"line\">                androidSdkDir = (new File(rootDir, sdkDirProp)).getAbsolutePath()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (androidSdkDir == null &amp;&amp; systemProperty != null) &#123;</span><br><span class=\"line\">        androidSdkDir = systemProperty</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (androidSdkDir == null) &#123;</span><br><span class=\"line\">        throw new RuntimeException(</span><br><span class=\"line\">            &quot;Unable to determine Android SDK directory.&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    androidSdkDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2>说明: cordova编译生成的android源码在Android Studio中运行, 无法找到</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gradle &apos;android&apos; project refresh failed</span><br><span class=\"line\">Error:No installed build tools found. Install the Android build tools version 19.1.0 or higher.</span><br></pre></td></tr></table></figure>","more":"<h2>解决方式一:</h2>\n<ol>\n<li>全局搜索  availableBuildToolsVersions = getAvailableBuildTools()<br>\n<img src=\"https://img-blog.csdn.net/20180921102547408?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"修改前的照片\"></li>\n</ol>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">availableBuildToolsVersions  = [&apos;21.0.0&apos;,&apos;20.0.0&apos;,&apos;19.1.0&apos;,&apos;19.0.3&apos;] as String[]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdn.net/20180921102905659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"修改后的源码截图\"></p>\n<h2>分析:</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String doFindLatestInstalledBuildTools(String minBuildToolsVersion) &#123;</span><br><span class=\"line\">    def availableBuildToolsVersions</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    \t// TODO: 获得可用的 build-tools</span><br><span class=\"line\">        availableBuildToolsVersions  = getAvailableBuildTools()</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">        println &quot;An exception occurred while trying to find the Android build tools.&quot;</span><br><span class=\"line\">        throw e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (availableBuildToolsVersions.length &gt; 0) &#123;</span><br><span class=\"line\">        def highestBuildToolsVersion = availableBuildToolsVersions[0]</span><br><span class=\"line\">        if (compareVersions(highestBuildToolsVersion, minBuildToolsVersion) &lt; 0) &#123;</span><br><span class=\"line\">            throw new RuntimeException(</span><br><span class=\"line\">                &quot;No usable Android build tools found. Highest installed version is &quot; +</span><br><span class=\"line\">                highestBuildToolsVersion + &quot;; minimum version required is &quot; +</span><br><span class=\"line\">                minBuildToolsVersion + &quot;.&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        highestBuildToolsVersion</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    \t// TODO 上面报错正是这抛出的异常, 为什么会走这呢, 因为没找到build-tools的版本</span><br><span class=\"line\">        throw new RuntimeException(</span><br><span class=\"line\">            &quot;No installed build tools found. Install the Android build tools version &quot; +</span><br><span class=\"line\">            minBuildToolsVersion + &quot; or higher.&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取可用的build-tool</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">String[] getAvailableBuildTools() &#123;</span><br><span class=\"line\">    def buildToolsDir = new File(getAndroidSdkDir(), &quot;build-tools&quot;)</span><br><span class=\"line\">    buildToolsDir.list()</span><br><span class=\"line\">        .findAll &#123; it ==~ /[0-9.]+/ &#125; </span><br><span class=\"line\">        .sort &#123; a, b -&gt; compareVersions(b, a) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取SDK位置</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">String getAndroidSdkDir() &#123;</span><br><span class=\"line\">    def rootDir = project.rootDir</span><br><span class=\"line\">    def androidSdkDir = null</span><br><span class=\"line\">    String envVar = System.getenv(&quot;ANDROID_HOME&quot;)</span><br><span class=\"line\">    def localProperties = new File(rootDir, &apos;local.properties&apos;)</span><br><span class=\"line\">    String systemProperty = System.getProperty(&quot;android.home&quot;)</span><br><span class=\"line\">    if (envVar != null) &#123;</span><br><span class=\"line\">        androidSdkDir = envVar</span><br><span class=\"line\">    &#125; else if (localProperties.exists()) &#123;</span><br><span class=\"line\">        Properties properties = new Properties()</span><br><span class=\"line\">        localProperties.withInputStream &#123; instr -&gt;</span><br><span class=\"line\">            properties.load(instr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        def sdkDirProp = properties.getProperty(&apos;sdk.dir&apos;)</span><br><span class=\"line\">        if (sdkDirProp != null) &#123;</span><br><span class=\"line\">            androidSdkDir = sdkDirProp</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            sdkDirProp = properties.getProperty(&apos;android.dir&apos;)</span><br><span class=\"line\">            if (sdkDirProp != null) &#123;</span><br><span class=\"line\">                androidSdkDir = (new File(rootDir, sdkDirProp)).getAbsolutePath()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (androidSdkDir == null &amp;&amp; systemProperty != null) &#123;</span><br><span class=\"line\">        androidSdkDir = systemProperty</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (androidSdkDir == null) &#123;</span><br><span class=\"line\">        throw new RuntimeException(</span><br><span class=\"line\">            &quot;Unable to determine Android SDK directory.&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    androidSdkDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IntelliJ IDEA插件（Java）","_content":"\n#### Maven Helper\n使用参考博文：https://blog.csdn.net/fly910905/article/details/79416878\n#### FindBugs-IDEA\n使用参考博文：https://www.cnblogs.com/adeng/p/7154636.html\n#### CheckStyle-IDEA\n使用参考博文：http://www.cnblogs.com/zhaopengcheng/p/7016147.html\n#### Ali-CodeAnalysis\n使用参考博文：http://www.cnblogs.com/cnndevelop/p/7698032.html\n#### GsonFormat\n使用参考博文：https://www.cnblogs.com/1024zy/p/6370305.html\n#### Jrebel\n激活参考博文：https://blog.csdn.net/xingbaozhen1210/article/details/81093041\n#### AceJump\n使用参考博文：https://blog.csdn.net/sunny243788557/article/details/52325444（比较全面）\n","source":"_posts/IntelliJ IDEA插件（Java）.md","raw":"---\ntitle: IntelliJ IDEA插件（Java）\ncategories: Idea\ntags: idea\n---\n\n#### Maven Helper\n使用参考博文：https://blog.csdn.net/fly910905/article/details/79416878\n#### FindBugs-IDEA\n使用参考博文：https://www.cnblogs.com/adeng/p/7154636.html\n#### CheckStyle-IDEA\n使用参考博文：http://www.cnblogs.com/zhaopengcheng/p/7016147.html\n#### Ali-CodeAnalysis\n使用参考博文：http://www.cnblogs.com/cnndevelop/p/7698032.html\n#### GsonFormat\n使用参考博文：https://www.cnblogs.com/1024zy/p/6370305.html\n#### Jrebel\n激活参考博文：https://blog.csdn.net/xingbaozhen1210/article/details/81093041\n#### AceJump\n使用参考博文：https://blog.csdn.net/sunny243788557/article/details/52325444（比较全面）\n","slug":"IntelliJ IDEA插件（Java）","published":1,"date":"2019-04-20T12:20:10.465Z","updated":"2019-04-20T12:20:10.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsf000evq6b2lsgrhso","content":"<h4 id=\"maven-helper\">Maven Helper</h4>\n<p>使用参考博文：<a href=\"https://blog.csdn.net/fly910905/article/details/79416878\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fly910905/article/details/79416878</a></p>\n<h4 id=\"findbugs-idea\">FindBugs-IDEA</h4>\n<p>使用参考博文：<a href=\"https://www.cnblogs.com/adeng/p/7154636.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adeng/p/7154636.html</a></p>\n<h4 id=\"checkstyle-idea\">CheckStyle-IDEA</h4>\n<p>使用参考博文：<a href=\"http://www.cnblogs.com/zhaopengcheng/p/7016147.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaopengcheng/p/7016147.html</a></p>\n<h4 id=\"ali-codeanalysis\">Ali-CodeAnalysis</h4>\n<p>使用参考博文：<a href=\"http://www.cnblogs.com/cnndevelop/p/7698032.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/cnndevelop/p/7698032.html</a></p>\n<h4 id=\"gsonformat\">GsonFormat</h4>\n<p>使用参考博文：<a href=\"https://www.cnblogs.com/1024zy/p/6370305.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/1024zy/p/6370305.html</a></p>\n<h4 id=\"jrebel\">Jrebel</h4>\n<p>激活参考博文：<a href=\"https://blog.csdn.net/xingbaozhen1210/article/details/81093041\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xingbaozhen1210/article/details/81093041</a></p>\n<h4 id=\"acejump\">AceJump</h4>\n<p>使用参考博文：<a href=\"https://blog.csdn.net/sunny243788557/article/details/52325444%EF%BC%88%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%89\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sunny243788557/article/details/52325444（比较全面）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4>Maven Helper</h4>\n<p>使用参考博文：<a href=\"https://blog.csdn.net/fly910905/article/details/79416878\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fly910905/article/details/79416878</a></p>\n<h4>FindBugs-IDEA</h4>\n<p>使用参考博文：<a href=\"https://www.cnblogs.com/adeng/p/7154636.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/adeng/p/7154636.html</a></p>\n<h4>CheckStyle-IDEA</h4>\n<p>使用参考博文：<a href=\"http://www.cnblogs.com/zhaopengcheng/p/7016147.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaopengcheng/p/7016147.html</a></p>\n<h4>Ali-CodeAnalysis</h4>\n<p>使用参考博文：<a href=\"http://www.cnblogs.com/cnndevelop/p/7698032.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/cnndevelop/p/7698032.html</a></p>\n<h4>GsonFormat</h4>\n<p>使用参考博文：<a href=\"https://www.cnblogs.com/1024zy/p/6370305.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/1024zy/p/6370305.html</a></p>\n<h4>Jrebel</h4>\n<p>激活参考博文：<a href=\"https://blog.csdn.net/xingbaozhen1210/article/details/81093041\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xingbaozhen1210/article/details/81093041</a></p>\n<h4>AceJump</h4>\n<p>使用参考博文：<a href=\"https://blog.csdn.net/sunny243788557/article/details/52325444%EF%BC%88%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%89\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sunny243788557/article/details/52325444（比较全面）</a></p>\n"},{"title":"Git基础","_content":"\n# 1.1 获取项目的git仓库\n有两种取得git仓库的方法。\n## 1.1.1 从当前目录初始化\n```\n# 创建项目文件夹\n> mkdir  git_practice\n\n<!-- more -->\n\n# 进入文件夹下\n> cd git_practice\n\n# 初始化\n> git init\n```\n\n## 1.1.2 从现有仓库克隆\n语法\n\n```\ngit clone [url]\n```\n\n自定义项目名称：只需要再 url 后自定义项目名\n```\n$ git clone [url]  mygrit\n```\n\n# 1.2 记录更新到仓库\n工作区下的文件状态分为：未跟踪 / 已跟踪。 文件的状态变化周期如下：\n![文件的状态变化周期](https://img-blog.csdnimg.cn/20190308154121432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## 1.2.1 查看文件的状态\n\n```\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n\n```\n注：没有查找到跟踪着的文件。\n\n用vim新建一个README\n\n```\n$ vi README\n\n# 查看状态\n$ git status\n# On branch master\n# Untracked files:\n# (use \"git add <file>...\" to include in what will be committed)\n#\n# README\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n注：untracked files表示未跟踪， 即不会被git跟踪。\n\n## 1.2.2 跟踪新文件\n\n```\n$ git add README\n\n$ git status\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n# new file: README\n#\n```\n注：README 文件已被跟踪，并处于暂存状态。\n\n“Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此\n时此刻的版本将被留存在历史记录中\n\n## 1.2.3 忽略文件\n\n```\n# 添加git忽略文件\n$ vi .gitignore\n\n# 忽略所有以 .o 或 .a 结尾的文件\n*.[oa]\n\n 忽略所有以波浪符（~）结尾的文件\n*~\n```\n文件 .gitignore 的格式规范如下：\n\t\n\t• 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n\t• 可以使用标准的 glob 模式匹配。\t\n\t• 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\t\n\t• 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反\n```\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配\n任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）\n只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配\n（比如 [0-9] 表示匹配所有 0 到 9 的数字）。\n```\n再看一个 .gitignore 文件的例子：\n\n```\n# 此为注释 – 将被 Git 忽略\n*.a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n```\n\n## 1.2.4 查看已暂存和未暂存的更新\n\n## 1.2.5 提交更新\n在每次commit之前先用 git status 文件是否都 git add 了（即暂存过了），否则不会被记录。\n\n```\n$ git commit -m \" update message \"\n```\n\n## 1.2.6 跳过使用暂存\n\n```\n$ git commit -a -m \" update message \"\n或\n$ git commit -am \" update message \"\n```\n\n## 1.2.7 移除文件\n删除未暂存的文件\n\n```\n$ rm 1.txt\n$ git rm 1.txt\n```\n\n强制删除\n```\n$ git rm 1.txt  -f \n```\n\n## 1.2.8 移动文件\n\n```\n$ git move file_from file_to\n```\n相当于\n\n```\n$ mv README.txt README\n$ git rm README.txt\n$ git add READ\n```\n\n## 1.3 查看提交历史\n\n```\n$ git log\n```\n**-p** 显示提交的差异， **-2** 显示最近的两次提交\n```\n$ git log -p -2\n```\n**--stat** 仅显示简要的增改行数统计\n\n```\n$ git log --stat\n```\n\n还有个常用的 **--pretty** 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 **oneline** 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 **short**，**full** 和 **fuller** 可以用，展示的信息或多或少有些不同\n\n```\n# 每条记录显示一行\ngit log --pretty=oneline\n```\n自定义输出格式\n```\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\na8876b9 - angus, 18 minutes ago : 添加README\nf191557 - angus, 24 minutes ago : 删除README.md\n```\n常用格式占位符\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190308165706103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 1.4 撤消操作\n## 1.4.1 修改最后一次提交\n\n```\ngit commit --amend\n```\n如果**commit**后发现还有未 **add** 的文件，则\n\n```\n$ git commit -m \"修改文件\"\n$ git add 1.txt\n$ git commit --amend\n```\n上面的三条命令最终得到一个提交，第二个提交命令修正了第一个的提交内容。\n\n## 1.4.2 取消暂存的文件\n暂存的文件即已执行 **git add** \n\n```\n$ git add *\n$ git status\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n# modified: README.txt\n```\n输出告诉我们应该用 **git reset HEAD \\<file> ** \n\n例如撤销README.txt\n\n```\n$ git reset HEAD README.txt\n```\n\n## 1.4.3 取消对文件的修改\n撤销单个文件的修改\n```\n$ git checkout --<file>\n```\n\n撤销所有文件的修改\n```\n$ git checkout .\n```\n\n# 1.5 远程仓库的使用\n\n```\n$ git clone <url>\n```\n## 1.5.1 查看当前的远程库\n\n```\n$ git remote \norigin\n```\n也可以加上 -v 选项（译注：此为—verbose 的简写，取首字母），显示对应的克隆地址：\n\n```\n$ git remote --verbose\norigin  https://github.com/qijianguo/git_practice.git (fetch)\norigin  https://github.com/qijianguo/git_practice.git (push)\n```\n\n## 1.5.2 添加远程仓库\n\n```\ngit remote add [shortname] [url]\n```\n要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用\n```\n$ git remote\norigin\n$ git remote add pb git://github.com/paulboone/ticgit.git\n$ git remote -v\norigin git://github.com/schacon/ticgit.git\npb git://github.com/paulboone/ticgit.git\n\n```\n现在可以用字串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：\n\n```\n$ git fetch pb\nremote: Counting objects: 58, done.\nremote: Compressing objects: 100% (41/41), done.\nremote: Total 44 (delta 24), reused 1 (delta 0)\nUnpacking objects: 100% (44/44), done.\nFrom git://github.com/paulboone/ticgit\n* [new branch] master -> pb/master\n* [new branch] ticgit -> pb/ticgit\n```\n现在，Paul 的主干分支（master）已经完全可以在本地访问了，对应的名字是 pb/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n## 1.5.3 从远程抓取\n\n```\n$ git fetch [remote-nam]\n```\n\n## 1.5.4 推送数据到远程仓库\n\n```\n$ git push [remote-name] [branch-name]\n\n```\n\n## 1.5.5 查看远程仓库信息\n\n```\n$ git remote\norigin\n$ git remote show origin\n```\n\n## 1.5.6 远程仓库的删除和重命名\n在新版 Git 中可以用 git remote rename 命令修改某个远程仓库的简短名称，比如想把 pb 改成 paul，可以这么运行：\n\n```\n$ git remote rename pb paul\n$ git remote\norigin\npaul\n```\n注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 \npaul/master。\n\t碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令\n\n```\n$ git remote rm paul\n$ git remote\norigin\n```\n\n","source":"_posts/Git基础.md","raw":"---\ntitle: Git基础\ncategories: Git\ntags: git\n---\n\n# 1.1 获取项目的git仓库\n有两种取得git仓库的方法。\n## 1.1.1 从当前目录初始化\n```\n# 创建项目文件夹\n> mkdir  git_practice\n\n<!-- more -->\n\n# 进入文件夹下\n> cd git_practice\n\n# 初始化\n> git init\n```\n\n## 1.1.2 从现有仓库克隆\n语法\n\n```\ngit clone [url]\n```\n\n自定义项目名称：只需要再 url 后自定义项目名\n```\n$ git clone [url]  mygrit\n```\n\n# 1.2 记录更新到仓库\n工作区下的文件状态分为：未跟踪 / 已跟踪。 文件的状态变化周期如下：\n![文件的状态变化周期](https://img-blog.csdnimg.cn/20190308154121432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## 1.2.1 查看文件的状态\n\n```\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n\n```\n注：没有查找到跟踪着的文件。\n\n用vim新建一个README\n\n```\n$ vi README\n\n# 查看状态\n$ git status\n# On branch master\n# Untracked files:\n# (use \"git add <file>...\" to include in what will be committed)\n#\n# README\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n注：untracked files表示未跟踪， 即不会被git跟踪。\n\n## 1.2.2 跟踪新文件\n\n```\n$ git add README\n\n$ git status\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n# new file: README\n#\n```\n注：README 文件已被跟踪，并处于暂存状态。\n\n“Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此\n时此刻的版本将被留存在历史记录中\n\n## 1.2.3 忽略文件\n\n```\n# 添加git忽略文件\n$ vi .gitignore\n\n# 忽略所有以 .o 或 .a 结尾的文件\n*.[oa]\n\n 忽略所有以波浪符（~）结尾的文件\n*~\n```\n文件 .gitignore 的格式规范如下：\n\t\n\t• 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n\t• 可以使用标准的 glob 模式匹配。\t\n\t• 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\t\n\t• 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反\n```\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配\n任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）\n只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配\n（比如 [0-9] 表示匹配所有 0 到 9 的数字）。\n```\n再看一个 .gitignore 文件的例子：\n\n```\n# 此为注释 – 将被 Git 忽略\n*.a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n```\n\n## 1.2.4 查看已暂存和未暂存的更新\n\n## 1.2.5 提交更新\n在每次commit之前先用 git status 文件是否都 git add 了（即暂存过了），否则不会被记录。\n\n```\n$ git commit -m \" update message \"\n```\n\n## 1.2.6 跳过使用暂存\n\n```\n$ git commit -a -m \" update message \"\n或\n$ git commit -am \" update message \"\n```\n\n## 1.2.7 移除文件\n删除未暂存的文件\n\n```\n$ rm 1.txt\n$ git rm 1.txt\n```\n\n强制删除\n```\n$ git rm 1.txt  -f \n```\n\n## 1.2.8 移动文件\n\n```\n$ git move file_from file_to\n```\n相当于\n\n```\n$ mv README.txt README\n$ git rm README.txt\n$ git add READ\n```\n\n## 1.3 查看提交历史\n\n```\n$ git log\n```\n**-p** 显示提交的差异， **-2** 显示最近的两次提交\n```\n$ git log -p -2\n```\n**--stat** 仅显示简要的增改行数统计\n\n```\n$ git log --stat\n```\n\n还有个常用的 **--pretty** 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 **oneline** 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 **short**，**full** 和 **fuller** 可以用，展示的信息或多或少有些不同\n\n```\n# 每条记录显示一行\ngit log --pretty=oneline\n```\n自定义输出格式\n```\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\na8876b9 - angus, 18 minutes ago : 添加README\nf191557 - angus, 24 minutes ago : 删除README.md\n```\n常用格式占位符\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190308165706103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 1.4 撤消操作\n## 1.4.1 修改最后一次提交\n\n```\ngit commit --amend\n```\n如果**commit**后发现还有未 **add** 的文件，则\n\n```\n$ git commit -m \"修改文件\"\n$ git add 1.txt\n$ git commit --amend\n```\n上面的三条命令最终得到一个提交，第二个提交命令修正了第一个的提交内容。\n\n## 1.4.2 取消暂存的文件\n暂存的文件即已执行 **git add** \n\n```\n$ git add *\n$ git status\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n# modified: README.txt\n```\n输出告诉我们应该用 **git reset HEAD \\<file> ** \n\n例如撤销README.txt\n\n```\n$ git reset HEAD README.txt\n```\n\n## 1.4.3 取消对文件的修改\n撤销单个文件的修改\n```\n$ git checkout --<file>\n```\n\n撤销所有文件的修改\n```\n$ git checkout .\n```\n\n# 1.5 远程仓库的使用\n\n```\n$ git clone <url>\n```\n## 1.5.1 查看当前的远程库\n\n```\n$ git remote \norigin\n```\n也可以加上 -v 选项（译注：此为—verbose 的简写，取首字母），显示对应的克隆地址：\n\n```\n$ git remote --verbose\norigin  https://github.com/qijianguo/git_practice.git (fetch)\norigin  https://github.com/qijianguo/git_practice.git (push)\n```\n\n## 1.5.2 添加远程仓库\n\n```\ngit remote add [shortname] [url]\n```\n要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用\n```\n$ git remote\norigin\n$ git remote add pb git://github.com/paulboone/ticgit.git\n$ git remote -v\norigin git://github.com/schacon/ticgit.git\npb git://github.com/paulboone/ticgit.git\n\n```\n现在可以用字串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：\n\n```\n$ git fetch pb\nremote: Counting objects: 58, done.\nremote: Compressing objects: 100% (41/41), done.\nremote: Total 44 (delta 24), reused 1 (delta 0)\nUnpacking objects: 100% (44/44), done.\nFrom git://github.com/paulboone/ticgit\n* [new branch] master -> pb/master\n* [new branch] ticgit -> pb/ticgit\n```\n现在，Paul 的主干分支（master）已经完全可以在本地访问了，对应的名字是 pb/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n## 1.5.3 从远程抓取\n\n```\n$ git fetch [remote-nam]\n```\n\n## 1.5.4 推送数据到远程仓库\n\n```\n$ git push [remote-name] [branch-name]\n\n```\n\n## 1.5.5 查看远程仓库信息\n\n```\n$ git remote\norigin\n$ git remote show origin\n```\n\n## 1.5.6 远程仓库的删除和重命名\n在新版 Git 中可以用 git remote rename 命令修改某个远程仓库的简短名称，比如想把 pb 改成 paul，可以这么运行：\n\n```\n$ git remote rename pb paul\n$ git remote\norigin\npaul\n```\n注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 \npaul/master。\n\t碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令\n\n```\n$ git remote rm paul\n$ git remote\norigin\n```\n\n","slug":"Git基础","published":1,"date":"2019-04-20T12:20:10.465Z","updated":"2019-04-20T12:20:10.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsh000ivq6b2m55mfn9","content":"<h1 id=\"11-获取项目的git仓库\">1.1 获取项目的git仓库</h1>\n<p>有两种取得git仓库的方法。</p>\n<h2 id=\"111-从当前目录初始化\">1.1.1 从当前目录初始化</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建项目文件夹</span><br><span class=\"line\">&gt; mkdir  git_practice</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入文件夹下</span><br><span class=\"line\">&gt; cd git_practice</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">&gt; git init</span><br></pre></td></tr></table></figure>\n<h2 id=\"112-从现有仓库克隆\">1.1.2 从现有仓库克隆</h2>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br></pre></td></tr></table></figure>\n<p>自定义项目名称：只需要再 url 后自定义项目名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone [url]  mygrit</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-记录更新到仓库\">1.2 记录更新到仓库</h1>\n<p>工作区下的文件状态分为：未跟踪 / 已跟踪。 文件的状态变化周期如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190308154121432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"文件的状态变化周期\"></p>\n<h2 id=\"121-查看文件的状态\">1.2.1 查看文件的状态</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>注：没有查找到跟踪着的文件。</p>\n<p>用vim新建一个README</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi README</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看状态</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Untracked files:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\">#</span><br><span class=\"line\"># README</span><br><span class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>\n<p>注：untracked files表示未跟踪， 即不会被git跟踪。</p>\n<h2 id=\"122-跟踪新文件\">1.2.2 跟踪新文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\"># new file: README</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n<p>注：README 文件已被跟踪，并处于暂存状态。</p>\n<p>“Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此<br>\n时此刻的版本将被留存在历史记录中</p>\n<h2 id=\"123-忽略文件\">1.2.3 忽略文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加git忽略文件</span><br><span class=\"line\">$ vi .gitignore</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略所有以 .o 或 .a 结尾的文件</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\"></span><br><span class=\"line\"> 忽略所有以波浪符（~）结尾的文件</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n<p>文件 .gitignore 的格式规范如下：</p>\n<pre><code>• 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n• 可以使用标准的 glob 模式匹配。\t\n• 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\t\n• 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配</span><br><span class=\"line\">任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）</span><br><span class=\"line\">只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配</span><br><span class=\"line\">（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</span><br></pre></td></tr></table></figure>\n<p>再看一个 .gitignore 文件的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 此为注释 – 将被 Git 忽略</span><br><span class=\"line\">*.a # 忽略所有 .a 结尾的文件</span><br><span class=\"line\">!lib.a # 但 lib.a 除外</span><br><span class=\"line\">/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class=\"line\">build/ # 忽略 build/ 目录下的所有文件</span><br><span class=\"line\">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"124-查看已暂存和未暂存的更新\">1.2.4 查看已暂存和未暂存的更新</h2>\n<h2 id=\"125-提交更新\">1.2.5 提交更新</h2>\n<p>在每次commit之前先用 git status 文件是否都 git add 了（即暂存过了），否则不会被记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot; update message &quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"126-跳过使用暂存\">1.2.6 跳过使用暂存</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -a -m &quot; update message &quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">$ git commit -am &quot; update message &quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"127-移除文件\">1.2.7 移除文件</h2>\n<p>删除未暂存的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm 1.txt</span><br><span class=\"line\">$ git rm 1.txt</span><br></pre></td></tr></table></figure>\n<p>强制删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm 1.txt  -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"128-移动文件\">1.2.8 移动文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git move file_from file_to</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv README.txt README</span><br><span class=\"line\">$ git rm README.txt</span><br><span class=\"line\">$ git add READ</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-查看提交历史\">1.3 查看提交历史</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br></pre></td></tr></table></figure>\n<p><strong>-p</strong> 显示提交的差异， <strong>-2</strong> 显示最近的两次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -p -2</span><br></pre></td></tr></table></figure>\n<p><strong>–stat</strong> 仅显示简要的增改行数统计</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --stat</span><br></pre></td></tr></table></figure>\n<p>还有个常用的 <strong>–pretty</strong> 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 <strong>oneline</strong> 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 <strong>short</strong>，<strong>full</strong> 和 <strong>fuller</strong> 可以用，展示的信息或多或少有些不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每条记录显示一行</span><br><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>自定义输出格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span><br><span class=\"line\">a8876b9 - angus, 18 minutes ago : 添加README</span><br><span class=\"line\">f191557 - angus, 24 minutes ago : 删除README.md</span><br></pre></td></tr></table></figure>\n<p>常用格式占位符<br>\n<img src=\"https://img-blog.csdnimg.cn/20190308165706103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"14-撤消操作\">1.4 撤消操作</h1>\n<h2 id=\"141-修改最后一次提交\">1.4.1 修改最后一次提交</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>如果<strong>commit</strong>后发现还有未 <strong>add</strong> 的文件，则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;修改文件&quot;</span><br><span class=\"line\">$ git add 1.txt</span><br><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n<p>上面的三条命令最终得到一个提交，第二个提交命令修正了第一个的提交内容。</p>\n<h2 id=\"142-取消暂存的文件\">1.4.2 取消暂存的文件</h2>\n<p>暂存的文件即已执行 <strong>git add</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\"># modified: README.txt</span><br></pre></td></tr></table></figure>\n<p>输出告诉我们应该用 **git reset HEAD &lt;file&gt; **</p>\n<p>例如撤销README.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD README.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"143-取消对文件的修改\">1.4.3 取消对文件的修改</h2>\n<p>撤销单个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --&lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>撤销所有文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-远程仓库的使用\">1.5 远程仓库的使用</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"151-查看当前的远程库\">1.5.1 查看当前的远程库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote </span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<p>也可以加上 -v 选项（译注：此为—verbose 的简写，取首字母），显示对应的克隆地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote --verbose</span><br><span class=\"line\">origin  https://github.com/qijianguo/git_practice.git (fetch)</span><br><span class=\"line\">origin  https://github.com/qijianguo/git_practice.git (push)</span><br></pre></td></tr></table></figure>\n<h2 id=\"152-添加远程仓库\">1.5.2 添加远程仓库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git://github.com/schacon/ticgit.git</span><br><span class=\"line\">pb git://github.com/paulboone/ticgit.git</span><br></pre></td></tr></table></figure>\n<p>现在可以用字串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch pb</span><br><span class=\"line\">remote: Counting objects: 58, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (41/41), done.</span><br><span class=\"line\">remote: Total 44 (delta 24), reused 1 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (44/44), done.</span><br><span class=\"line\">From git://github.com/paulboone/ticgit</span><br><span class=\"line\">* [new branch] master -&gt; pb/master</span><br><span class=\"line\">* [new branch] ticgit -&gt; pb/ticgit</span><br></pre></td></tr></table></figure>\n<p>现在，Paul 的主干分支（master）已经完全可以在本地访问了，对应的名字是 pb/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。</p>\n<h2 id=\"153-从远程抓取\">1.5.3 从远程抓取</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote-nam]</span><br></pre></td></tr></table></figure>\n<h2 id=\"154-推送数据到远程仓库\">1.5.4 推送数据到远程仓库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>\n<h2 id=\"155-查看远程仓库信息\">1.5.5 查看远程仓库信息</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"156-远程仓库的删除和重命名\">1.5.6 远程仓库的删除和重命名</h2>\n<p>在新版 Git 中可以用 git remote rename 命令修改某个远程仓库的简短名称，比如想把 pb 改成 paul，可以这么运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename pb paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">paul</span><br></pre></td></tr></table></figure>\n<p>注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了<br>\npaul/master。<br>\n\t碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>1.1 获取项目的git仓库</h1>\n<p>有两种取得git仓库的方法。</p>\n<h2>1.1.1 从当前目录初始化</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建项目文件夹</span><br><span class=\"line\">&gt; mkdir  git_practice</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入文件夹下</span><br><span class=\"line\">&gt; cd git_practice</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">&gt; git init</span><br></pre></td></tr></table></figure>\n<h2>1.1.2 从现有仓库克隆</h2>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br></pre></td></tr></table></figure>\n<p>自定义项目名称：只需要再 url 后自定义项目名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone [url]  mygrit</span><br></pre></td></tr></table></figure>\n<h1>1.2 记录更新到仓库</h1>\n<p>工作区下的文件状态分为：未跟踪 / 已跟踪。 文件的状态变化周期如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190308154121432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"文件的状态变化周期\"></p>\n<h2>1.2.1 查看文件的状态</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>注：没有查找到跟踪着的文件。</p>\n<p>用vim新建一个README</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi README</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看状态</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Untracked files:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\">#</span><br><span class=\"line\"># README</span><br><span class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>\n<p>注：untracked files表示未跟踪， 即不会被git跟踪。</p>\n<h2>1.2.2 跟踪新文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\"># new file: README</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n<p>注：README 文件已被跟踪，并处于暂存状态。</p>\n<p>“Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此<br>\n时此刻的版本将被留存在历史记录中</p>\n<h2>1.2.3 忽略文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加git忽略文件</span><br><span class=\"line\">$ vi .gitignore</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略所有以 .o 或 .a 结尾的文件</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\"></span><br><span class=\"line\"> 忽略所有以波浪符（~）结尾的文件</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n<p>文件 .gitignore 的格式规范如下：</p>\n<pre><code>• 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n• 可以使用标准的 glob 模式匹配。\t\n• 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\t\n• 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配</span><br><span class=\"line\">任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）</span><br><span class=\"line\">只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配</span><br><span class=\"line\">（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</span><br></pre></td></tr></table></figure>\n<p>再看一个 .gitignore 文件的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 此为注释 – 将被 Git 忽略</span><br><span class=\"line\">*.a # 忽略所有 .a 结尾的文件</span><br><span class=\"line\">!lib.a # 但 lib.a 除外</span><br><span class=\"line\">/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class=\"line\">build/ # 忽略 build/ 目录下的所有文件</span><br><span class=\"line\">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>\n<h2>1.2.4 查看已暂存和未暂存的更新</h2>\n<h2>1.2.5 提交更新</h2>\n<p>在每次commit之前先用 git status 文件是否都 git add 了（即暂存过了），否则不会被记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot; update message &quot;</span><br></pre></td></tr></table></figure>\n<h2>1.2.6 跳过使用暂存</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -a -m &quot; update message &quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">$ git commit -am &quot; update message &quot;</span><br></pre></td></tr></table></figure>\n<h2>1.2.7 移除文件</h2>\n<p>删除未暂存的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm 1.txt</span><br><span class=\"line\">$ git rm 1.txt</span><br></pre></td></tr></table></figure>\n<p>强制删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm 1.txt  -f</span><br></pre></td></tr></table></figure>\n<h2>1.2.8 移动文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git move file_from file_to</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv README.txt README</span><br><span class=\"line\">$ git rm README.txt</span><br><span class=\"line\">$ git add READ</span><br></pre></td></tr></table></figure>\n<h2>1.3 查看提交历史</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br></pre></td></tr></table></figure>\n<p><strong>-p</strong> 显示提交的差异， <strong>-2</strong> 显示最近的两次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -p -2</span><br></pre></td></tr></table></figure>\n<p><strong>–stat</strong> 仅显示简要的增改行数统计</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --stat</span><br></pre></td></tr></table></figure>\n<p>还有个常用的 <strong>–pretty</strong> 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 <strong>oneline</strong> 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 <strong>short</strong>，<strong>full</strong> 和 <strong>fuller</strong> 可以用，展示的信息或多或少有些不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每条记录显示一行</span><br><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>自定义输出格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span><br><span class=\"line\">a8876b9 - angus, 18 minutes ago : 添加README</span><br><span class=\"line\">f191557 - angus, 24 minutes ago : 删除README.md</span><br></pre></td></tr></table></figure>\n<p>常用格式占位符<br>\n<img src=\"https://img-blog.csdnimg.cn/20190308165706103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>1.4 撤消操作</h1>\n<h2>1.4.1 修改最后一次提交</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>如果<strong>commit</strong>后发现还有未 <strong>add</strong> 的文件，则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;修改文件&quot;</span><br><span class=\"line\">$ git add 1.txt</span><br><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n<p>上面的三条命令最终得到一个提交，第二个提交命令修正了第一个的提交内容。</p>\n<h2>1.4.2 取消暂存的文件</h2>\n<p>暂存的文件即已执行 <strong>git add</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\"># modified: README.txt</span><br></pre></td></tr></table></figure>\n<p>输出告诉我们应该用 **git reset HEAD &lt;file&gt; **</p>\n<p>例如撤销README.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD README.txt</span><br></pre></td></tr></table></figure>\n<h2>1.4.3 取消对文件的修改</h2>\n<p>撤销单个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --&lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>撤销所有文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure>\n<h1>1.5 远程仓库的使用</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>\n<h2>1.5.1 查看当前的远程库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote </span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<p>也可以加上 -v 选项（译注：此为—verbose 的简写，取首字母），显示对应的克隆地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote --verbose</span><br><span class=\"line\">origin  https://github.com/qijianguo/git_practice.git (fetch)</span><br><span class=\"line\">origin  https://github.com/qijianguo/git_practice.git (push)</span><br></pre></td></tr></table></figure>\n<h2>1.5.2 添加远程仓库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git://github.com/schacon/ticgit.git</span><br><span class=\"line\">pb git://github.com/paulboone/ticgit.git</span><br></pre></td></tr></table></figure>\n<p>现在可以用字串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch pb</span><br><span class=\"line\">remote: Counting objects: 58, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (41/41), done.</span><br><span class=\"line\">remote: Total 44 (delta 24), reused 1 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (44/44), done.</span><br><span class=\"line\">From git://github.com/paulboone/ticgit</span><br><span class=\"line\">* [new branch] master -&gt; pb/master</span><br><span class=\"line\">* [new branch] ticgit -&gt; pb/ticgit</span><br></pre></td></tr></table></figure>\n<p>现在，Paul 的主干分支（master）已经完全可以在本地访问了，对应的名字是 pb/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。</p>\n<h2>1.5.3 从远程抓取</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote-nam]</span><br></pre></td></tr></table></figure>\n<h2>1.5.4 推送数据到远程仓库</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>\n<h2>1.5.5 查看远程仓库信息</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n<h2>1.5.6 远程仓库的删除和重命名</h2>\n<p>在新版 Git 中可以用 git remote rename 命令修改某个远程仓库的简短名称，比如想把 pb 改成 paul，可以这么运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename pb paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">paul</span><br></pre></td></tr></table></figure>\n<p>注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了<br>\npaul/master。<br>\n\t碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n"},{"title":"Git修改已经提交的注释或日志","date":"2019-03-12T12:50:01.000Z","_content":"\n<!-- more -->\n\n转自：http://www.cnblogs.com/tocy/p/git_commit_log_modify.html\n\n> 对于已经修改提交过的注释，如果需要修改，可以借助 git commit --amend 来进行。（注意：修改日志的功能在svn中需要server支持，在git中可以独立修改）\n注意：必须是最近提交，还没有push的注释。\t\n\n例如，在base 里最新的提交就是 ***resolving the crash problem***，现在需要将其改为resolving the ***crash problem to fix bug xxx***\n在base目录下，输入 ***git commit --amend***，就会进入一个文本编辑界面（如下），在注释的地方修改 ，保存然后退出，这样注释就修改了，再重新 ***push.***\n\n```\nresolving the crash problem\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Sat Dec 12 08:44:59 2015 +0800\n#\n# On branch master\n# Your branch and 'origin/master' have diverged,\n# and have 1 and 1 different commit each, respectively.\n#   (use \"git pull\" to merge the remote branch into yours)\n#\n# Changes to be committed:\n#       modified:   c_c++/1-c-invoke-cpp-main.c\n#       modified:   c_c++/1-c-invoke-cpp.cpp\n#\n```\n注意以上界面使用vi操作习惯。\n","source":"_posts/Git修改已经提交的注释或日志.md","raw":"---\ntitle: Git修改已经提交的注释或日志\ncategories: Git\ntags: git\ndate: 2019-03-12 20:50:01\n---\n\n<!-- more -->\n\n转自：http://www.cnblogs.com/tocy/p/git_commit_log_modify.html\n\n> 对于已经修改提交过的注释，如果需要修改，可以借助 git commit --amend 来进行。（注意：修改日志的功能在svn中需要server支持，在git中可以独立修改）\n注意：必须是最近提交，还没有push的注释。\t\n\n例如，在base 里最新的提交就是 ***resolving the crash problem***，现在需要将其改为resolving the ***crash problem to fix bug xxx***\n在base目录下，输入 ***git commit --amend***，就会进入一个文本编辑界面（如下），在注释的地方修改 ，保存然后退出，这样注释就修改了，再重新 ***push.***\n\n```\nresolving the crash problem\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Sat Dec 12 08:44:59 2015 +0800\n#\n# On branch master\n# Your branch and 'origin/master' have diverged,\n# and have 1 and 1 different commit each, respectively.\n#   (use \"git pull\" to merge the remote branch into yours)\n#\n# Changes to be committed:\n#       modified:   c_c++/1-c-invoke-cpp-main.c\n#       modified:   c_c++/1-c-invoke-cpp.cpp\n#\n```\n注意以上界面使用vi操作习惯。\n","slug":"Git修改已经提交的注释或日志","published":1,"updated":"2019-04-20T12:38:26.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsj000kvq6btp3ylbg5","content":"<a id=\"more\"></a>\n<p>转自：<a href=\"http://www.cnblogs.com/tocy/p/git_commit_log_modify.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/tocy/p/git_commit_log_modify.html</a></p>\n<blockquote>\n<p>对于已经修改提交过的注释，如果需要修改，可以借助 git commit --amend 来进行。（注意：修改日志的功能在svn中需要server支持，在git中可以独立修改）<br>\n注意：必须是最近提交，还没有push的注释。</p>\n</blockquote>\n<p>例如，在base 里最新的提交就是 <strong><em>resolving the crash problem</em></strong>，现在需要将其改为resolving the <strong><em>crash problem to fix bug xxx</em></strong><br>\n在base目录下，输入 <strong><em>git commit --amend</em></strong>，就会进入一个文本编辑界面（如下），在注释的地方修改 ，保存然后退出，这样注释就修改了，再重新 <strong><em>push.</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolving the crash problem</span><br><span class=\"line\"></span><br><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Date:      Sat Dec 12 08:44:59 2015 +0800</span><br><span class=\"line\">#</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Your branch and &apos;origin/master&apos; have diverged,</span><br><span class=\"line\"># and have 1 and 1 different commit each, respectively.</span><br><span class=\"line\">#   (use &quot;git pull&quot; to merge the remote branch into yours)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#       modified:   c_c++/1-c-invoke-cpp-main.c</span><br><span class=\"line\">#       modified:   c_c++/1-c-invoke-cpp.cpp</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n<p>注意以上界面使用vi操作习惯。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转自：<a href=\"http://www.cnblogs.com/tocy/p/git_commit_log_modify.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/tocy/p/git_commit_log_modify.html</a></p>\n<blockquote>\n<p>对于已经修改提交过的注释，如果需要修改，可以借助 git commit --amend 来进行。（注意：修改日志的功能在svn中需要server支持，在git中可以独立修改）<br>\n注意：必须是最近提交，还没有push的注释。</p>\n</blockquote>\n<p>例如，在base 里最新的提交就是 <strong><em>resolving the crash problem</em></strong>，现在需要将其改为resolving the <strong><em>crash problem to fix bug xxx</em></strong><br>\n在base目录下，输入 <strong><em>git commit --amend</em></strong>，就会进入一个文本编辑界面（如下），在注释的地方修改 ，保存然后退出，这样注释就修改了，再重新 <strong><em>push.</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolving the crash problem</span><br><span class=\"line\"></span><br><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Date:      Sat Dec 12 08:44:59 2015 +0800</span><br><span class=\"line\">#</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Your branch and &apos;origin/master&apos; have diverged,</span><br><span class=\"line\"># and have 1 and 1 different commit each, respectively.</span><br><span class=\"line\">#   (use &quot;git pull&quot; to merge the remote branch into yours)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#       modified:   c_c++/1-c-invoke-cpp-main.c</span><br><span class=\"line\">#       modified:   c_c++/1-c-invoke-cpp.cpp</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n<p>注意以上界面使用vi操作习惯。</p>"},{"title":"JPA中的could not initialize proxy - no Session异常分析与解决","date":"2018-09-22T08:20:19.000Z","_content":"\n转载自：https://blog.csdn.net/blueheart20/article/details/52912023\n\n引言： JPA是一种非常流行和常用的持久化框架标准，其下可以对接若干种不同的实现，在不同的父子表管理中，经常会碰到no Session的问题，该如何解决呢？\n<!-- more -->\n## 问题的引出\n\n  在进行基于JPA的单元测试中，我们使用JUnit来进行测试数据库的关联表信息读取，结果得到如下错误信息：\n  \n\n```\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.rain.wx.meal.model.DishCategory.dishes, could not initialize proxy - no Session\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:587)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:204)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:566)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:135)\n\tat org.hibernate.collection.internal.PersistentBag.get(PersistentBag.java:449)\n\tat com.rain.wx.meal.service.DishServiceTest.testDishes(DishServiceTest.java:86)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n```\n  经过分析，其中的关键词是： could not initialize proxy - no Session; 基于JPA的实现来分析，就是在进行数据库访问之时，当前针对数据库的访问与操作session已经关闭且释放了，故提示no Session可用。\n\n## 代码实现分析\n\n    让我们来看看具体的代码吧\n\n```\n@Entity\n@Table(name=\"dish_category\")\n@Data\n@EqualsAndHashCode(callSuper=false)\n@JsonRootName(value=\"category\") \npublic class DishCategory extends BaseEntity {\n\tprivate static final long serialVersionUID = -7189824224534351030L;\n \n\t@Column\n\tprivate String name;\n\t\n\t@Column\n\tprivate String description;\n\t\n\t\n\t@OneToMany\n\t@JoinColumn(name=\"category_id\",referencedColumnName=\"id\")\n\tprivate List<MealDish> dishes;\n}\n```\n 另外一个实体Bean为MealDish, 其代码为：\n \n\n```\n@Entity\n@Table(name = \"dish\")\n@JsonRootName(value=\"dish\") \n//@Lazy(value=false)\npublic class MealDish extends BaseEntity {\n\tprivate static final long serialVersionUID = -3982356728880195795L;\n \n\t@Column\n\tprivate String name;\n \n\t@Column\n\tprivate float price;\n \n\t@Column(name = \"img_url\")\n\tprivate String imgUrl;\n \n\t@Column(name=\"category_id\")\n\tprivate long categoryId;\n \n\t@Column\n\tprivate boolean active;\n \n\t// 销售数量\n\t@Column\n\tprivate int soldCount;\n        .......\n}\n```\n其中Repository/Service的代码分别如下：  \n\n```\n@Service\npublic class DishServiceImpl implements DishService { \n       @Transactional\n\t@Override\n\tpublic List<DishCategory> getDishCategory() {\n\t\treturn this.dishCategoryRepo.findAll();\n\t}\n   ........\n }\n```\nRepository相关的代码都是空代码，无实际的实现，这里再次忽略。\n\n单元测试的代码内容：\n\n```\n @Test\n    public void testDishes() throws JsonProcessingException {\n    \tObjectMapper mapper = new ObjectMapper();\n    \t\n    \tList<DishCategory> categories = this.dishService.getDishCategory();\n    \t\n    \tfor (DishCategory category  : categories) {\n    \t    // log.debug(String.valueOf(category.getDishes().get(0)));\t\n    \t}\n    \t\n    \tString jsonStr = mapper.writeValueAsString(categories);\n    \t\n    \tlog.info(jsonStr);\n    }\n```\n## 问题分析\n\n  基于对Hibernate和JPA的理解，在ORM中，其为了提升性能使用了Lazy加载，就是在使用的时候，才会加载额外的数据，故导致了在使用之时再加载数据之时， session失效的问题出现。所以问题的目标点实现提前加载数据。\n\n## 问题的解决\n\n    尝试1：  在Service方法中新增了@Transactional进行事务添加\n\n    结果1：  无效\n\n   尝试2： 在@OneToMany的方法上，使用@Lazy(false)\n\n    结果2：  无效\n\n    尝试3： 在@OneToMany的参数中使用fetch=FetchType=Eager\n\n    结果3:   问题解决\n\n    尝试4： 在application.properties的配置文件中新增spring.jpa.open-in-view=true\n\n    结果4： 问题解决\n\n   方法3的正确的代码内容：\n   \n\n```\n@Entity\n@Table(name=\"dish_category\")\n@Data\n@EqualsAndHashCode(callSuper=false)\n@JsonRootName(value=\"category\") \npublic class DishCategory extends BaseEntity {\n\tprivate static final long serialVersionUID = -7189824224534351030L;\n \n\t@Column\n\tprivate String name;\n\t\n\t@Column\n\tprivate String description;\n\t\n\t\n\t@OneToMany(fetch=FetchType.EAGER)\n\t@JoinColumn(name=\"category_id\",referencedColumnName=\"id\")\n\tprivate List<MealDish> dishes;\n}\n```\n方法4的解释与说明：\n\n   这个设置选项:\n\nspring.jpa.open-in-view=true\n\n  其实是之前的openEntityManagerInViewInterceptor，解决在Spring MVC与JPA之间Session的声明周期问题\n\n## 总结\n\n    核心问题在于解决延迟加载为及时加载，及时加载会消耗一定的资源，将其程序的性能，请注意这个问题。\n\n","source":"_posts/JPA中的could not initialize proxy - no Session异常分析与解决.md","raw":"---\ntitle: JPA中的could not initialize proxy - no Session异常分析与解决\ncategories: Java\ntags: java\ndate: 2018-09-22 16:20:19\n---\n\n转载自：https://blog.csdn.net/blueheart20/article/details/52912023\n\n引言： JPA是一种非常流行和常用的持久化框架标准，其下可以对接若干种不同的实现，在不同的父子表管理中，经常会碰到no Session的问题，该如何解决呢？\n<!-- more -->\n## 问题的引出\n\n  在进行基于JPA的单元测试中，我们使用JUnit来进行测试数据库的关联表信息读取，结果得到如下错误信息：\n  \n\n```\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.rain.wx.meal.model.DishCategory.dishes, could not initialize proxy - no Session\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:587)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:204)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:566)\n\tat org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:135)\n\tat org.hibernate.collection.internal.PersistentBag.get(PersistentBag.java:449)\n\tat com.rain.wx.meal.service.DishServiceTest.testDishes(DishServiceTest.java:86)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n```\n  经过分析，其中的关键词是： could not initialize proxy - no Session; 基于JPA的实现来分析，就是在进行数据库访问之时，当前针对数据库的访问与操作session已经关闭且释放了，故提示no Session可用。\n\n## 代码实现分析\n\n    让我们来看看具体的代码吧\n\n```\n@Entity\n@Table(name=\"dish_category\")\n@Data\n@EqualsAndHashCode(callSuper=false)\n@JsonRootName(value=\"category\") \npublic class DishCategory extends BaseEntity {\n\tprivate static final long serialVersionUID = -7189824224534351030L;\n \n\t@Column\n\tprivate String name;\n\t\n\t@Column\n\tprivate String description;\n\t\n\t\n\t@OneToMany\n\t@JoinColumn(name=\"category_id\",referencedColumnName=\"id\")\n\tprivate List<MealDish> dishes;\n}\n```\n 另外一个实体Bean为MealDish, 其代码为：\n \n\n```\n@Entity\n@Table(name = \"dish\")\n@JsonRootName(value=\"dish\") \n//@Lazy(value=false)\npublic class MealDish extends BaseEntity {\n\tprivate static final long serialVersionUID = -3982356728880195795L;\n \n\t@Column\n\tprivate String name;\n \n\t@Column\n\tprivate float price;\n \n\t@Column(name = \"img_url\")\n\tprivate String imgUrl;\n \n\t@Column(name=\"category_id\")\n\tprivate long categoryId;\n \n\t@Column\n\tprivate boolean active;\n \n\t// 销售数量\n\t@Column\n\tprivate int soldCount;\n        .......\n}\n```\n其中Repository/Service的代码分别如下：  \n\n```\n@Service\npublic class DishServiceImpl implements DishService { \n       @Transactional\n\t@Override\n\tpublic List<DishCategory> getDishCategory() {\n\t\treturn this.dishCategoryRepo.findAll();\n\t}\n   ........\n }\n```\nRepository相关的代码都是空代码，无实际的实现，这里再次忽略。\n\n单元测试的代码内容：\n\n```\n @Test\n    public void testDishes() throws JsonProcessingException {\n    \tObjectMapper mapper = new ObjectMapper();\n    \t\n    \tList<DishCategory> categories = this.dishService.getDishCategory();\n    \t\n    \tfor (DishCategory category  : categories) {\n    \t    // log.debug(String.valueOf(category.getDishes().get(0)));\t\n    \t}\n    \t\n    \tString jsonStr = mapper.writeValueAsString(categories);\n    \t\n    \tlog.info(jsonStr);\n    }\n```\n## 问题分析\n\n  基于对Hibernate和JPA的理解，在ORM中，其为了提升性能使用了Lazy加载，就是在使用的时候，才会加载额外的数据，故导致了在使用之时再加载数据之时， session失效的问题出现。所以问题的目标点实现提前加载数据。\n\n## 问题的解决\n\n    尝试1：  在Service方法中新增了@Transactional进行事务添加\n\n    结果1：  无效\n\n   尝试2： 在@OneToMany的方法上，使用@Lazy(false)\n\n    结果2：  无效\n\n    尝试3： 在@OneToMany的参数中使用fetch=FetchType=Eager\n\n    结果3:   问题解决\n\n    尝试4： 在application.properties的配置文件中新增spring.jpa.open-in-view=true\n\n    结果4： 问题解决\n\n   方法3的正确的代码内容：\n   \n\n```\n@Entity\n@Table(name=\"dish_category\")\n@Data\n@EqualsAndHashCode(callSuper=false)\n@JsonRootName(value=\"category\") \npublic class DishCategory extends BaseEntity {\n\tprivate static final long serialVersionUID = -7189824224534351030L;\n \n\t@Column\n\tprivate String name;\n\t\n\t@Column\n\tprivate String description;\n\t\n\t\n\t@OneToMany(fetch=FetchType.EAGER)\n\t@JoinColumn(name=\"category_id\",referencedColumnName=\"id\")\n\tprivate List<MealDish> dishes;\n}\n```\n方法4的解释与说明：\n\n   这个设置选项:\n\nspring.jpa.open-in-view=true\n\n  其实是之前的openEntityManagerInViewInterceptor，解决在Spring MVC与JPA之间Session的声明周期问题\n\n## 总结\n\n    核心问题在于解决延迟加载为及时加载，及时加载会消耗一定的资源，将其程序的性能，请注意这个问题。\n\n","slug":"JPA中的could not initialize proxy - no Session异常分析与解决","published":1,"updated":"2019-04-20T12:31:24.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsn000ovq6b53pivzgd","content":"<p>转载自：<a href=\"https://blog.csdn.net/blueheart20/article/details/52912023\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/blueheart20/article/details/52912023</a></p>\n<p>引言： JPA是一种非常流行和常用的持久化框架标准，其下可以对接若干种不同的实现，在不同的父子表管理中，经常会碰到no Session的问题，该如何解决呢？</p>\n<a id=\"more\"></a>\n<h2 id=\"问题的引出\">问题的引出</h2>\n<p>在进行基于JPA的单元测试中，我们使用JUnit来进行测试数据库的关联表信息读取，结果得到如下错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.rain.wx.meal.model.DishCategory.dishes, could not initialize proxy - no Session</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:587)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:204)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:566)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:135)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.PersistentBag.get(PersistentBag.java:449)</span><br><span class=\"line\">\tat com.rain.wx.meal.service.DishServiceTest.testDishes(DishServiceTest.java:86)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class=\"line\">\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class=\"line\">\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class=\"line\">\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class=\"line\">\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)</span><br></pre></td></tr></table></figure>\n<p>经过分析，其中的关键词是： could not initialize proxy - no Session; 基于JPA的实现来分析，就是在进行数据库访问之时，当前针对数据库的访问与操作session已经关闭且释放了，故提示no Session可用。</p>\n<h2 id=\"代码实现分析\">代码实现分析</h2>\n<pre><code>让我们来看看具体的代码吧\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name=&quot;dish_category&quot;)</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@EqualsAndHashCode(callSuper=false)</span><br><span class=\"line\">@JsonRootName(value=&quot;category&quot;) </span><br><span class=\"line\">public class DishCategory extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -7189824224534351030L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String description;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@OneToMany</span><br><span class=\"line\">\t@JoinColumn(name=&quot;category_id&quot;,referencedColumnName=&quot;id&quot;)</span><br><span class=\"line\">\tprivate List&lt;MealDish&gt; dishes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外一个实体Bean为MealDish, 其代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name = &quot;dish&quot;)</span><br><span class=\"line\">@JsonRootName(value=&quot;dish&quot;) </span><br><span class=\"line\">//@Lazy(value=false)</span><br><span class=\"line\">public class MealDish extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -3982356728880195795L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate float price;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column(name = &quot;img_url&quot;)</span><br><span class=\"line\">\tprivate String imgUrl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column(name=&quot;category_id&quot;)</span><br><span class=\"line\">\tprivate long categoryId;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate boolean active;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t// 销售数量</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate int soldCount;</span><br><span class=\"line\">        .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中Repository/Service的代码分别如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class DishServiceImpl implements DishService &#123; </span><br><span class=\"line\">       @Transactional</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;DishCategory&gt; getDishCategory() &#123;</span><br><span class=\"line\">\t\treturn this.dishCategoryRepo.findAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   ........</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Repository相关的代码都是空代码，无实际的实现，这里再次忽略。</p>\n<p>单元测试的代码内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   public void testDishes() throws JsonProcessingException &#123;</span><br><span class=\"line\">   \tObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tList&lt;DishCategory&gt; categories = this.dishService.getDishCategory();</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tfor (DishCategory category  : categories) &#123;</span><br><span class=\"line\">   \t    // log.debug(String.valueOf(category.getDishes().get(0)));\t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tString jsonStr = mapper.writeValueAsString(categories);</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tlog.info(jsonStr);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题分析\">问题分析</h2>\n<p>基于对Hibernate和JPA的理解，在ORM中，其为了提升性能使用了Lazy加载，就是在使用的时候，才会加载额外的数据，故导致了在使用之时再加载数据之时， session失效的问题出现。所以问题的目标点实现提前加载数据。</p>\n<h2 id=\"问题的解决\">问题的解决</h2>\n<pre><code>尝试1：  在Service方法中新增了@Transactional进行事务添加\n\n结果1：  无效\n</code></pre>\n<p>尝试2： 在@OneToMany的方法上，使用@Lazy(false)</p>\n<pre><code>结果2：  无效\n\n尝试3： 在@OneToMany的参数中使用fetch=FetchType=Eager\n\n结果3:   问题解决\n\n尝试4： 在application.properties的配置文件中新增spring.jpa.open-in-view=true\n\n结果4： 问题解决\n</code></pre>\n<p>方法3的正确的代码内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name=&quot;dish_category&quot;)</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@EqualsAndHashCode(callSuper=false)</span><br><span class=\"line\">@JsonRootName(value=&quot;category&quot;) </span><br><span class=\"line\">public class DishCategory extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -7189824224534351030L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String description;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@OneToMany(fetch=FetchType.EAGER)</span><br><span class=\"line\">\t@JoinColumn(name=&quot;category_id&quot;,referencedColumnName=&quot;id&quot;)</span><br><span class=\"line\">\tprivate List&lt;MealDish&gt; dishes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法4的解释与说明：</p>\n<p>这个设置选项:</p>\n<p>spring.jpa.open-in-view=true</p>\n<p>其实是之前的openEntityManagerInViewInterceptor，解决在Spring MVC与JPA之间Session的声明周期问题</p>\n<h2 id=\"总结\">总结</h2>\n<pre><code>核心问题在于解决延迟加载为及时加载，及时加载会消耗一定的资源，将其程序的性能，请注意这个问题。\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>转载自：<a href=\"https://blog.csdn.net/blueheart20/article/details/52912023\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/blueheart20/article/details/52912023</a></p>\n<p>引言： JPA是一种非常流行和常用的持久化框架标准，其下可以对接若干种不同的实现，在不同的父子表管理中，经常会碰到no Session的问题，该如何解决呢？</p>","more":"<h2>问题的引出</h2>\n<p>在进行基于JPA的单元测试中，我们使用JUnit来进行测试数据库的关联表信息读取，结果得到如下错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.rain.wx.meal.model.DishCategory.dishes, could not initialize proxy - no Session</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:587)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:204)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:566)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:135)</span><br><span class=\"line\">\tat org.hibernate.collection.internal.PersistentBag.get(PersistentBag.java:449)</span><br><span class=\"line\">\tat com.rain.wx.meal.service.DishServiceTest.testDishes(DishServiceTest.java:86)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class=\"line\">\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class=\"line\">\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class=\"line\">\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class=\"line\">\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)</span><br><span class=\"line\">\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span><br><span class=\"line\">\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)</span><br><span class=\"line\">\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)</span><br></pre></td></tr></table></figure>\n<p>经过分析，其中的关键词是： could not initialize proxy - no Session; 基于JPA的实现来分析，就是在进行数据库访问之时，当前针对数据库的访问与操作session已经关闭且释放了，故提示no Session可用。</p>\n<h2>代码实现分析</h2>\n<pre><code>让我们来看看具体的代码吧\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name=&quot;dish_category&quot;)</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@EqualsAndHashCode(callSuper=false)</span><br><span class=\"line\">@JsonRootName(value=&quot;category&quot;) </span><br><span class=\"line\">public class DishCategory extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -7189824224534351030L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String description;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@OneToMany</span><br><span class=\"line\">\t@JoinColumn(name=&quot;category_id&quot;,referencedColumnName=&quot;id&quot;)</span><br><span class=\"line\">\tprivate List&lt;MealDish&gt; dishes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外一个实体Bean为MealDish, 其代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name = &quot;dish&quot;)</span><br><span class=\"line\">@JsonRootName(value=&quot;dish&quot;) </span><br><span class=\"line\">//@Lazy(value=false)</span><br><span class=\"line\">public class MealDish extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -3982356728880195795L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate float price;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column(name = &quot;img_url&quot;)</span><br><span class=\"line\">\tprivate String imgUrl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column(name=&quot;category_id&quot;)</span><br><span class=\"line\">\tprivate long categoryId;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate boolean active;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t// 销售数量</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate int soldCount;</span><br><span class=\"line\">        .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中Repository/Service的代码分别如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class DishServiceImpl implements DishService &#123; </span><br><span class=\"line\">       @Transactional</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;DishCategory&gt; getDishCategory() &#123;</span><br><span class=\"line\">\t\treturn this.dishCategoryRepo.findAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   ........</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Repository相关的代码都是空代码，无实际的实现，这里再次忽略。</p>\n<p>单元测试的代码内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   public void testDishes() throws JsonProcessingException &#123;</span><br><span class=\"line\">   \tObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tList&lt;DishCategory&gt; categories = this.dishService.getDishCategory();</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tfor (DishCategory category  : categories) &#123;</span><br><span class=\"line\">   \t    // log.debug(String.valueOf(category.getDishes().get(0)));\t</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tString jsonStr = mapper.writeValueAsString(categories);</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \tlog.info(jsonStr);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2>问题分析</h2>\n<p>基于对Hibernate和JPA的理解，在ORM中，其为了提升性能使用了Lazy加载，就是在使用的时候，才会加载额外的数据，故导致了在使用之时再加载数据之时， session失效的问题出现。所以问题的目标点实现提前加载数据。</p>\n<h2>问题的解决</h2>\n<pre><code>尝试1：  在Service方法中新增了@Transactional进行事务添加\n\n结果1：  无效\n</code></pre>\n<p>尝试2： 在@OneToMany的方法上，使用@Lazy(false)</p>\n<pre><code>结果2：  无效\n\n尝试3： 在@OneToMany的参数中使用fetch=FetchType=Eager\n\n结果3:   问题解决\n\n尝试4： 在application.properties的配置文件中新增spring.jpa.open-in-view=true\n\n结果4： 问题解决\n</code></pre>\n<p>方法3的正确的代码内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">@Table(name=&quot;dish_category&quot;)</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@EqualsAndHashCode(callSuper=false)</span><br><span class=\"line\">@JsonRootName(value=&quot;category&quot;) </span><br><span class=\"line\">public class DishCategory extends BaseEntity &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = -7189824224534351030L;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Column</span><br><span class=\"line\">\tprivate String description;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@OneToMany(fetch=FetchType.EAGER)</span><br><span class=\"line\">\t@JoinColumn(name=&quot;category_id&quot;,referencedColumnName=&quot;id&quot;)</span><br><span class=\"line\">\tprivate List&lt;MealDish&gt; dishes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法4的解释与说明：</p>\n<p>这个设置选项:</p>\n<p>spring.jpa.open-in-view=true</p>\n<p>其实是之前的openEntityManagerInViewInterceptor，解决在Spring MVC与JPA之间Session的声明周期问题</p>\n<h2>总结</h2>\n<pre><code>核心问题在于解决延迟加载为及时加载，及时加载会消耗一定的资源，将其程序的性能，请注意这个问题。\n</code></pre>"},{"title":"JAVA中使用openoffice将Excel转PDF再转图片功能实现","date":"2018-05-18T09:28:09.000Z","_content":"\n* 需求\n\n> 公司一个小项目要结尾了, 有非常多的表格, 而且非常复杂, 例如\n<!-- more -->\n![在这里插入图片描述](https://img-blog.csdn.net/20181018170207617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n例如：（这表格, 有想死的心...）\n![在这里插入图片描述](https://img-blog.csdn.net/20181018171047385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n> 看到这样的表格，第一反应是n脸懵逼，这得做到啥时候啊，最后想到用一个方法，让客户自己玩！！\n平台提供Excel模版下载，客户下载填写完再提交Excel，平台再将Excel转PDF，顺便将PDF转成图片，给前端展示，想法简单，方案可行，开工！\n\n* 方案:\n\n1. windows server下用 jacob, windows上可完美运行, 但是！！！Linux上不支持jacob！！！（非常重要！！）\n2. poi + iText，貌似不错\n3. openoffice，跨平台\n\n>  本文选用openoffice，各位看官可自选用iText + poi，自己判别！当然也可以用jacob，前提是你不需要在Linux中运行项目。\n\n* 安装软件：[下载传送门](http://www.openoffice.org/download/index.html)\n4. win：\n\n![win版本](https://img-blog.csdn.net/2018101817373025?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n下载完成后，一路next，最好默认路径安装，免得折腾\n完成后 ***Win + R*** 填入 ***Dcomcnfg***  打开组件服务\n![在这里插入图片描述](https://img-blog.csdn.net/2018101817414451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n设置openoffice组件服务， 都设成SYSTEM\n![在这里插入图片描述](https://img-blog.csdn.net/20181018174311265?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n再设置标识为：交互式用户\n![在这里插入图片描述](https://img-blog.csdn.net/20181018174529594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n进入到安装目录，如果路径是默认的，则在 ***C:\\Program Files (x86)\\OpenOffice 4\\program*** 下面，\n进到这个路径下，按住 ***shift***  再点击鼠标右键，***在此处打开命令窗口***，输入 ***soffice -headless-accept=\"socket,host=127.0.0.1,port=8100;urp;\"-nofirststartwizard***， 查看是否启动成功， 黑窗口输入 ***netstat -ano*** \n![在这里插入图片描述](https://img-blog.csdn.net/20181018175507225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![在这里插入图片描述](https://img-blog.csdn.net/20181018175417121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\nwindows下安装完毕！\n\n参考： https://blog.csdn.net/qq_30987095/article/details/78789103\n\n2.Linux：[下载传送门](http://www.openoffice.org/download/index.html)\n\n![在这里插入图片描述](https://img-blog.csdn.net/20181018175750307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n根据自己的Linux系统选择RPM包或者DEB，如果是Ubuntu则选DEB，其他就选RPM包，查看当前操作系统是ubuntu还是centos\n\n```\n[root@iZ2zeg3etf08f6snef3lgrZ ~]#  lsb_release -a\nLSB Version:\t:(略)\nDistributor ID:\tCentOS\nDescription:\tCentOS Linux release (略)\nRelease:\t(略)\nCodename:\tCore\n```\n下载完毕后，利用ssh工具上传到服务器上！\n\n```\n>  tar -zxvf Apache_OpenOffice_4.1.3_Linux_x86-64_install-rpm_zh-CN.tar.gz\n(略)......\n\n> ls \nzh-CN\n> cd zh-CN/RPMS\n> ls\nopenoffice-core01-4.1.3-9783.x86_64.rpm             openoffice-impress-4.1.3-9783.x86_64.rpm        openoffice-zh-CN-4.1.3-9783.x86_64.rpm\nopenoffice-4.1.3-9783.x86_64.rpm                openoffice-core02-4.1.3-9783.x86_64.rpm             openoffice-javafilter-4.1.3-9783.x86_64.rpm     openoffice-zh-CN-base-4.1.3-9783.x86_64.rpm\nopenoffice-base-4.1.3-9783.x86_64.rpm           openoffice-core03-4.1.3-9783.x86_64.rpm             openoffice-math-4.1.3-9783.x86_64.rpm           openoffice-zh-CN-calc-4.1.3-9783.x86_64.rpm\nopenoffice-brand-base-4.1.3-9783.x86_64.rpm     openoffice-core04-4.1.3-9783.x86_64.rpm             openoffice-ogltrans-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-draw-4.1.3-9783.x86_64.rpm\nopenoffice-brand-calc-4.1.3-9783.x86_64.rpm     openoffice-core05-4.1.3-9783.x86_64.rpm             openoffice-onlineupdate-4.1.3-9783.x86_64.rpm   openoffice-zh-CN-help-4.1.3-9783.x86_64.rpm\nopenoffice-brand-draw-4.1.3-9783.x86_64.rpm     openoffice-core06-4.1.3-9783.x86_64.rpm             openoffice-ooofonts-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-impress-4.1.3-9783.x86_64.rpm\nopenoffice-brand-impress-4.1.3-9783.x86_64.rpm  openoffice-core07-4.1.3-9783.x86_64.rpm             openoffice-ooolinguistic-4.1.3-9783.x86_64.rpm  openoffice-zh-CN-math-4.1.3-9783.x86_64.rpm\nopenoffice-brand-math-4.1.3-9783.x86_64.rpm     openoffice-draw-4.1.3-9783.x86_64.rpm               openoffice-pyuno-4.1.3-9783.x86_64.rpm          openoffice-zh-CN-res-4.1.3-9783.x86_64.rpm\nopenoffice-brand-writer-4.1.3-9783.x86_64.rpm   openoffice-gnome-integration-4.1.3-9783.x86_64.rpm  openoffice-ure-4.1.3-9783.x86_64.rpm            openoffice-zh-CN-writer-4.1.3-9783.x86_64.rpm\nopenoffice-brand-zh-CN-4.1.3-9783.x86_64.rpm    openoffice-graphicfilter-4.1.3-9783.x86_64.rpm      openoffice-writer-4.1.3-9783.x86_64.rpm\nopenoffice-calc-4.1.3-9783.x86_64.rpm           openoffice-images-4.1.3-9783.x86_64.rpm             openoffice-xsltfilter-4.1.3-9783.x86_64.rpm\n\n[注释：运行下面命令， 生成  desktop-integration包]\n>  yum localinstall *.rpm\n> （略...）\n> cd desktop-integration/\n> ls\n>  openoffice4.1.3-freedesktop-menus-4.1.3-9783.noarch.rpm  \n   openoffice4.1.3-mandriva-menus-4.1.3-9783.noarch.rpm \n   openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  \n   openoffice4.1.3-suse-menus-4.1.3-9783.noarch.rpm\n\n>  yum localinstall  openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  \n\n```\nok， 安装完毕了！ 启动服务\n进入到默认安装目录下 \n```\n> cd /opt/openoffice4/program/\n[注释：临时启动]\n> /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard\n[注释：或后台启动]\n> /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard &\n\n[注释：永久启动]\n> nohup /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard &\n\n[注释：查看是否启动成功]\n> ps -ef|grep openoffice\nroot      7541  7527  0 10:19 pts/0    00:00:12 /opt/openoffice4/program/soffice.bin -headless -accept=socket,host=127.0.0.1,port=8100;urp; -nofirststartwizard\nroot      8964  7066  0 18:18 pts/3    00:00:00 grep --color=auto openoffice\n\n或者\n\n> netstat -tunlp |grep \ntcp        0      0 127.0.0.1:8100          0.0.0.0:*               LISTEN      7541/soffice.bin\n```\nLinux下安装成功！\n\n开始撸码：\n* pom.xml\n\n```\n\t\t<!-- openoffice 相关依赖 -->\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>1.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>juh</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>ridl</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>unoil</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n\n\t    <!-- pdf2img -->\n        <dependency>\n            <groupId>org.apache.pdfbox</groupId>\n            <artifactId>pdfbox</artifactId>\n            <version>2.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.pdfbox</groupId>\n            <artifactId>pdfbox-tools</artifactId>\n            <version>2.0.6</version>\n        </dependency>\n```\n\n* OpenOfficeUtils\n```\n\nimport java.awt.*;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ConnectException;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport com.artofsolving.jodconverter.DefaultDocumentFormatRegistry;\nimport com.artofsolving.jodconverter.DocumentConverter;\nimport com.artofsolving.jodconverter.DocumentFormatRegistry;\nimport com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.connection.SocketOpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;\nimport com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDPageTree;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\nimport org.apache.pdfbox.tools.imageio.ImageIOUtil;\n\nimport java.awt.image.BufferedImage;\nimport java.awt.image.RenderedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.imageio.ImageIO;\n\n/**\n * \n * @author josnow\n * @date 2017年5月9日 下午12:38:39\n * @version 1.0.0\n * @desc openoffice转换工具\n */\npublic class OpenOfficeUtils {\n\n    public static final String LOCAL_HOST = \"localhost\";\n    public static final int LOCAL_PORT = 8100;\n\n    // Format\n    public static DocumentFormatRegistry formatFactory = new DefaultDocumentFormatRegistry();\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:11:04\n     * @param inputFilePath\n     *            待转换的文件路径\n     * @param outputFilePath\n     *            输出文件路径\n     */\n    public static void convert(String inputFilePath, String outputFilePath) throws ConnectException {\n        convert(inputFilePath, outputFilePath, LOCAL_HOST, LOCAL_PORT);\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:12:29\n     * @param inputFilePath\n     *            待转换的文件路径\n     * @param outputFilePath\n     *            输出文件路径\n     * @param connectIp\n     *            远程调用ip\n     * @param connectPort\n     *            远程调用端口\n     */\n    public static void convert(String inputFilePath, String outputFilePath, String connectIp, int connectPort)\n            throws ConnectException {\n        if (StringUtils.isEmpty(inputFilePath) || StringUtils.isEmpty(outputFilePath)\n                || StringUtils.isEmpty(connectIp)) {\n            throw new IllegalArgumentException(\"参数异常！！\");\n        }\n        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);\n        connection.connect();\n \n// \t\t  TODO Excel转成PDF默认是A4纸\n//        DocumentConverter converter = getConverter(connectIp, connection);\n//        converter.convert(new File(inputFilePath), new File(outputFilePath));\n\n// \t\t  TODO Excel转成PDF默认是A4纸， 如果现实折行，则自定义ConverterDocument，改变纸张大小\n        ConverterDocument converterDocument = new ConverterDocument(connection);\n        converterDocument.convert(new File(inputFilePath), new File(outputFilePath));\n\n        connection.disconnect();\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:08:26\n     * @param inputStream\n     * @param inputFileExtension\n     *            待转换文件的扩展名，例如: xls，doc\n     * @param outputStream\n     * @param outputFileExtension\n     *            输出文件扩展名，例如：pdf\n     */\n    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,\n            String outputFileExtension) throws ConnectException {\n        convert(inputStream, inputFileExtension, outputStream, outputFileExtension, LOCAL_HOST, LOCAL_PORT);\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:10:21\n     * @param inputStream\n     * @param inputFileExtension\n     *            待转换文件的扩展名，例如: xls，doc\n     * @param outputStream\n     * @param outputFileExtension\n     *            输出文件扩展名，例如：pdf\n     * @param connectIp\n     *            远程调用ip\n     * @param connectPort\n     *            远程调用端口\n     */\n    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,\n            String outputFileExtension, String connectIp, int connectPort) throws ConnectException {\n\n        if (inputStream == null || StringUtils.isEmpty(inputFileExtension) || outputStream == null\n                || StringUtils.isEmpty(outputFileExtension) || StringUtils.isEmpty(connectIp)) {\n            throw new IllegalArgumentException(\"参数异常！！\");\n        }\n\n        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);\n        connection.connect();\n        DocumentConverter converter = getConverter(connectIp, connection);\n\n        converter.convert(inputStream, formatFactory.getFormatByFileExtension(inputFileExtension), outputStream,\n                formatFactory.getFormatByFileExtension(outputFileExtension));\n        connection.disconnect();\n    }\n\n    private static DocumentConverter getConverter(String connectIp, OpenOfficeConnection connection) {\n        DocumentConverter converter = \"localhost\".equals(connectIp) || \"127.0.0.1\".equals(connectIp)\n                || \"0:0:0:0:0:0:0:1\".equals(connectIp) ? new OpenOfficeDocumentConverter(connection)\n                        : new StreamOpenOfficeDocumentConverter(connection);\n        return converter;\n    }\n\n    public static void main(String[] args) throws Exception {\n        OpenOfficeUtils.convert(\"D:\\\\test.xls\", \"D:\\\\test.pdf\");\n        pdf2image(new File(\"D:\\\\test.pdf\"));\n    }\n\n    /**\n     * pdf to big image\n     * github: https://github.com/mmtou/pdf2img\n     * @param pdfFile pdf文件路径\n     * @return big image file\n     * @throws Exception\n     */\n    public static File pdf2image(File pdfFile) throws Exception {\n        // 拼成图片后的宽度和高度\n        int w = 0;\n        int h = 0;\n        List<BufferedImage> images = new ArrayList();\n        // 生成图片后的路径\n        String path = pdfFile.getParent() + File.separator;\n        String fileName = pdfFile.getName().replace(\".pdf\", \"\");\n\n        File destinationFile = new File(path);\n        if (!destinationFile.exists()) {\n            destinationFile.mkdir();\n        }\n        PDDocument document = PDDocument.load(pdfFile);\n        PDPageTree list = document.getDocumentCatalog().getPages();\n        int pageCounter = 0;\n        for (PDPage page : list) {\n            PDFRenderer pdfRenderer = new PDFRenderer(document);\n            BufferedImage image = pdfRenderer.renderImageWithDPI(pageCounter, 100, ImageType.RGB);\n            String target = path + fileName + \"-\" + (pageCounter++) + \".png\";\n            ImageIOUtil.writeImage(image, target, 100);\n\n            w = image.getWidth();\n            h += image.getHeight();\n            images.add(image);\n            new File(target).delete();\n        }\n        document.close();\n\n        BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n        Graphics g = combined.getGraphics();\n\n        int y = 0;\n        for (BufferedImage image : images) {\n            g.drawImage(image, 0, y, null);\n            y += image.getHeight();\n        }\n\n        // Save as new image\n        File image = new File(path, fileName + \".png\");\n        ImageIO.write(combined, \"PNG\", image);\n        return image;\n    }\n\n}\n```\n* 自定义 ConverterDocument\n\n```\n\nimport com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;\nimport com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;\nimport com.sun.star.awt.Size;\nimport com.sun.star.beans.PropertyValue;\nimport com.sun.star.lang.XComponent;\nimport com.sun.star.uno.UnoRuntime;\nimport com.sun.star.view.PaperFormat;\nimport com.sun.star.view.XPrintable;\n\npublic class ConverterDocument extends StreamOpenOfficeDocumentConverter {\n\n\n    public ConverterDocument(OpenOfficeConnection connection) {\n        super(connection);\n    }\n\n\n    public final static Size A5, A4, A3;\n    public final static Size B4, B5, B6;\n    public final static Size KaoqinReport;\n\n    static {\n        A5 = new Size(14800, 21000);\n        A4 = new Size(21000, 29700);\n        A3 = new Size(29700, 42000);\n\n        B4 = new Size(25000, 35300);\n        B5 = new Size(17600, 25000);\n        B6 = new Size(12500, 17600);\n\n//        KaoqinReport = new Size(29700, 27940);  //最大限度  宽 1600000\n        KaoqinReport = new Size(25000, 21000);;\n    }\n\n\n    @Override\n    protected void refreshDocument(XComponent document) {\n        super.refreshDocument(document);\n\n        // The default paper format and orientation is A4 and portrait. To\n        // change paper orientation\n        // re set page size\n        XPrintable xPrintable = (XPrintable) UnoRuntime.queryInterface(XPrintable.class, document);\n        PropertyValue[] printerDesc = new PropertyValue[2];\n\n        // Paper Orientation\n//  printerDesc[0] = new PropertyValue();\n//  printerDesc[0].Name = \"PaperOrientation\";\n//  printerDesc[0].Value = PaperOrientation.PORTRAIT;\n\n        // Paper Format\n        printerDesc[0] = new PropertyValue();\n        printerDesc[0].Name = \"PaperFormat\";\n        printerDesc[0].Value = PaperFormat.USER;\n\n        // Paper Size\n        printerDesc[1] = new PropertyValue();\n        printerDesc[1].Name = \"PaperSize\";\n        printerDesc[1].Value = KaoqinReport;\n\n        try {\n            xPrintable.setPrinter(printerDesc);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n* 使用：\n\n```\n\tpublic static void main(String[] args) throws Exception {\n        OpenOfficeUtils.convert(\"D:\\\\test.xls\", \"D:\\\\test.pdf\");\n        pdf2image(new File(\"D:\\\\test.pdf\"));\n\t}\n```\n\n\n参考： https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6\n\n","source":"_posts/JAVA中使用openoffice将Excel转PDF再转图片功能实现.md","raw":"---\ntitle: JAVA中使用openoffice将Excel转PDF再转图片功能实现\ncategories: Java\ntags: openoffice\ndate: 2018-05-18 17:28:09\n---\n\n* 需求\n\n> 公司一个小项目要结尾了, 有非常多的表格, 而且非常复杂, 例如\n<!-- more -->\n![在这里插入图片描述](https://img-blog.csdn.net/20181018170207617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n例如：（这表格, 有想死的心...）\n![在这里插入图片描述](https://img-blog.csdn.net/20181018171047385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n> 看到这样的表格，第一反应是n脸懵逼，这得做到啥时候啊，最后想到用一个方法，让客户自己玩！！\n平台提供Excel模版下载，客户下载填写完再提交Excel，平台再将Excel转PDF，顺便将PDF转成图片，给前端展示，想法简单，方案可行，开工！\n\n* 方案:\n\n1. windows server下用 jacob, windows上可完美运行, 但是！！！Linux上不支持jacob！！！（非常重要！！）\n2. poi + iText，貌似不错\n3. openoffice，跨平台\n\n>  本文选用openoffice，各位看官可自选用iText + poi，自己判别！当然也可以用jacob，前提是你不需要在Linux中运行项目。\n\n* 安装软件：[下载传送门](http://www.openoffice.org/download/index.html)\n4. win：\n\n![win版本](https://img-blog.csdn.net/2018101817373025?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n下载完成后，一路next，最好默认路径安装，免得折腾\n完成后 ***Win + R*** 填入 ***Dcomcnfg***  打开组件服务\n![在这里插入图片描述](https://img-blog.csdn.net/2018101817414451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n设置openoffice组件服务， 都设成SYSTEM\n![在这里插入图片描述](https://img-blog.csdn.net/20181018174311265?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n再设置标识为：交互式用户\n![在这里插入图片描述](https://img-blog.csdn.net/20181018174529594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n进入到安装目录，如果路径是默认的，则在 ***C:\\Program Files (x86)\\OpenOffice 4\\program*** 下面，\n进到这个路径下，按住 ***shift***  再点击鼠标右键，***在此处打开命令窗口***，输入 ***soffice -headless-accept=\"socket,host=127.0.0.1,port=8100;urp;\"-nofirststartwizard***， 查看是否启动成功， 黑窗口输入 ***netstat -ano*** \n![在这里插入图片描述](https://img-blog.csdn.net/20181018175507225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![在这里插入图片描述](https://img-blog.csdn.net/20181018175417121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\nwindows下安装完毕！\n\n参考： https://blog.csdn.net/qq_30987095/article/details/78789103\n\n2.Linux：[下载传送门](http://www.openoffice.org/download/index.html)\n\n![在这里插入图片描述](https://img-blog.csdn.net/20181018175750307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n根据自己的Linux系统选择RPM包或者DEB，如果是Ubuntu则选DEB，其他就选RPM包，查看当前操作系统是ubuntu还是centos\n\n```\n[root@iZ2zeg3etf08f6snef3lgrZ ~]#  lsb_release -a\nLSB Version:\t:(略)\nDistributor ID:\tCentOS\nDescription:\tCentOS Linux release (略)\nRelease:\t(略)\nCodename:\tCore\n```\n下载完毕后，利用ssh工具上传到服务器上！\n\n```\n>  tar -zxvf Apache_OpenOffice_4.1.3_Linux_x86-64_install-rpm_zh-CN.tar.gz\n(略)......\n\n> ls \nzh-CN\n> cd zh-CN/RPMS\n> ls\nopenoffice-core01-4.1.3-9783.x86_64.rpm             openoffice-impress-4.1.3-9783.x86_64.rpm        openoffice-zh-CN-4.1.3-9783.x86_64.rpm\nopenoffice-4.1.3-9783.x86_64.rpm                openoffice-core02-4.1.3-9783.x86_64.rpm             openoffice-javafilter-4.1.3-9783.x86_64.rpm     openoffice-zh-CN-base-4.1.3-9783.x86_64.rpm\nopenoffice-base-4.1.3-9783.x86_64.rpm           openoffice-core03-4.1.3-9783.x86_64.rpm             openoffice-math-4.1.3-9783.x86_64.rpm           openoffice-zh-CN-calc-4.1.3-9783.x86_64.rpm\nopenoffice-brand-base-4.1.3-9783.x86_64.rpm     openoffice-core04-4.1.3-9783.x86_64.rpm             openoffice-ogltrans-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-draw-4.1.3-9783.x86_64.rpm\nopenoffice-brand-calc-4.1.3-9783.x86_64.rpm     openoffice-core05-4.1.3-9783.x86_64.rpm             openoffice-onlineupdate-4.1.3-9783.x86_64.rpm   openoffice-zh-CN-help-4.1.3-9783.x86_64.rpm\nopenoffice-brand-draw-4.1.3-9783.x86_64.rpm     openoffice-core06-4.1.3-9783.x86_64.rpm             openoffice-ooofonts-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-impress-4.1.3-9783.x86_64.rpm\nopenoffice-brand-impress-4.1.3-9783.x86_64.rpm  openoffice-core07-4.1.3-9783.x86_64.rpm             openoffice-ooolinguistic-4.1.3-9783.x86_64.rpm  openoffice-zh-CN-math-4.1.3-9783.x86_64.rpm\nopenoffice-brand-math-4.1.3-9783.x86_64.rpm     openoffice-draw-4.1.3-9783.x86_64.rpm               openoffice-pyuno-4.1.3-9783.x86_64.rpm          openoffice-zh-CN-res-4.1.3-9783.x86_64.rpm\nopenoffice-brand-writer-4.1.3-9783.x86_64.rpm   openoffice-gnome-integration-4.1.3-9783.x86_64.rpm  openoffice-ure-4.1.3-9783.x86_64.rpm            openoffice-zh-CN-writer-4.1.3-9783.x86_64.rpm\nopenoffice-brand-zh-CN-4.1.3-9783.x86_64.rpm    openoffice-graphicfilter-4.1.3-9783.x86_64.rpm      openoffice-writer-4.1.3-9783.x86_64.rpm\nopenoffice-calc-4.1.3-9783.x86_64.rpm           openoffice-images-4.1.3-9783.x86_64.rpm             openoffice-xsltfilter-4.1.3-9783.x86_64.rpm\n\n[注释：运行下面命令， 生成  desktop-integration包]\n>  yum localinstall *.rpm\n> （略...）\n> cd desktop-integration/\n> ls\n>  openoffice4.1.3-freedesktop-menus-4.1.3-9783.noarch.rpm  \n   openoffice4.1.3-mandriva-menus-4.1.3-9783.noarch.rpm \n   openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  \n   openoffice4.1.3-suse-menus-4.1.3-9783.noarch.rpm\n\n>  yum localinstall  openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  \n\n```\nok， 安装完毕了！ 启动服务\n进入到默认安装目录下 \n```\n> cd /opt/openoffice4/program/\n[注释：临时启动]\n> /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard\n[注释：或后台启动]\n> /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard &\n\n[注释：永久启动]\n> nohup /opt/openoffice4/program/soffice -headless -accept=\"socket,host=127.0.0.1,port=8100;urp;\" -nofirststartwizard &\n\n[注释：查看是否启动成功]\n> ps -ef|grep openoffice\nroot      7541  7527  0 10:19 pts/0    00:00:12 /opt/openoffice4/program/soffice.bin -headless -accept=socket,host=127.0.0.1,port=8100;urp; -nofirststartwizard\nroot      8964  7066  0 18:18 pts/3    00:00:00 grep --color=auto openoffice\n\n或者\n\n> netstat -tunlp |grep \ntcp        0      0 127.0.0.1:8100          0.0.0.0:*               LISTEN      7541/soffice.bin\n```\nLinux下安装成功！\n\n开始撸码：\n* pom.xml\n\n```\n\t\t<!-- openoffice 相关依赖 -->\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>1.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>juh</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>ridl</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openoffice</groupId>\n            <artifactId>unoil</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n\n\t    <!-- pdf2img -->\n        <dependency>\n            <groupId>org.apache.pdfbox</groupId>\n            <artifactId>pdfbox</artifactId>\n            <version>2.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.pdfbox</groupId>\n            <artifactId>pdfbox-tools</artifactId>\n            <version>2.0.6</version>\n        </dependency>\n```\n\n* OpenOfficeUtils\n```\n\nimport java.awt.*;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ConnectException;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport com.artofsolving.jodconverter.DefaultDocumentFormatRegistry;\nimport com.artofsolving.jodconverter.DocumentConverter;\nimport com.artofsolving.jodconverter.DocumentFormatRegistry;\nimport com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.connection.SocketOpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;\nimport com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDPageTree;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\nimport org.apache.pdfbox.tools.imageio.ImageIOUtil;\n\nimport java.awt.image.BufferedImage;\nimport java.awt.image.RenderedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.imageio.ImageIO;\n\n/**\n * \n * @author josnow\n * @date 2017年5月9日 下午12:38:39\n * @version 1.0.0\n * @desc openoffice转换工具\n */\npublic class OpenOfficeUtils {\n\n    public static final String LOCAL_HOST = \"localhost\";\n    public static final int LOCAL_PORT = 8100;\n\n    // Format\n    public static DocumentFormatRegistry formatFactory = new DefaultDocumentFormatRegistry();\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:11:04\n     * @param inputFilePath\n     *            待转换的文件路径\n     * @param outputFilePath\n     *            输出文件路径\n     */\n    public static void convert(String inputFilePath, String outputFilePath) throws ConnectException {\n        convert(inputFilePath, outputFilePath, LOCAL_HOST, LOCAL_PORT);\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:12:29\n     * @param inputFilePath\n     *            待转换的文件路径\n     * @param outputFilePath\n     *            输出文件路径\n     * @param connectIp\n     *            远程调用ip\n     * @param connectPort\n     *            远程调用端口\n     */\n    public static void convert(String inputFilePath, String outputFilePath, String connectIp, int connectPort)\n            throws ConnectException {\n        if (StringUtils.isEmpty(inputFilePath) || StringUtils.isEmpty(outputFilePath)\n                || StringUtils.isEmpty(connectIp)) {\n            throw new IllegalArgumentException(\"参数异常！！\");\n        }\n        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);\n        connection.connect();\n \n// \t\t  TODO Excel转成PDF默认是A4纸\n//        DocumentConverter converter = getConverter(connectIp, connection);\n//        converter.convert(new File(inputFilePath), new File(outputFilePath));\n\n// \t\t  TODO Excel转成PDF默认是A4纸， 如果现实折行，则自定义ConverterDocument，改变纸张大小\n        ConverterDocument converterDocument = new ConverterDocument(connection);\n        converterDocument.convert(new File(inputFilePath), new File(outputFilePath));\n\n        connection.disconnect();\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:08:26\n     * @param inputStream\n     * @param inputFileExtension\n     *            待转换文件的扩展名，例如: xls，doc\n     * @param outputStream\n     * @param outputFileExtension\n     *            输出文件扩展名，例如：pdf\n     */\n    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,\n            String outputFileExtension) throws ConnectException {\n        convert(inputStream, inputFileExtension, outputStream, outputFileExtension, LOCAL_HOST, LOCAL_PORT);\n    }\n\n    /**\n     *\n     * @desc\n     * @auth josnow\n     * @date 2017年6月9日 下午4:10:21\n     * @param inputStream\n     * @param inputFileExtension\n     *            待转换文件的扩展名，例如: xls，doc\n     * @param outputStream\n     * @param outputFileExtension\n     *            输出文件扩展名，例如：pdf\n     * @param connectIp\n     *            远程调用ip\n     * @param connectPort\n     *            远程调用端口\n     */\n    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,\n            String outputFileExtension, String connectIp, int connectPort) throws ConnectException {\n\n        if (inputStream == null || StringUtils.isEmpty(inputFileExtension) || outputStream == null\n                || StringUtils.isEmpty(outputFileExtension) || StringUtils.isEmpty(connectIp)) {\n            throw new IllegalArgumentException(\"参数异常！！\");\n        }\n\n        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);\n        connection.connect();\n        DocumentConverter converter = getConverter(connectIp, connection);\n\n        converter.convert(inputStream, formatFactory.getFormatByFileExtension(inputFileExtension), outputStream,\n                formatFactory.getFormatByFileExtension(outputFileExtension));\n        connection.disconnect();\n    }\n\n    private static DocumentConverter getConverter(String connectIp, OpenOfficeConnection connection) {\n        DocumentConverter converter = \"localhost\".equals(connectIp) || \"127.0.0.1\".equals(connectIp)\n                || \"0:0:0:0:0:0:0:1\".equals(connectIp) ? new OpenOfficeDocumentConverter(connection)\n                        : new StreamOpenOfficeDocumentConverter(connection);\n        return converter;\n    }\n\n    public static void main(String[] args) throws Exception {\n        OpenOfficeUtils.convert(\"D:\\\\test.xls\", \"D:\\\\test.pdf\");\n        pdf2image(new File(\"D:\\\\test.pdf\"));\n    }\n\n    /**\n     * pdf to big image\n     * github: https://github.com/mmtou/pdf2img\n     * @param pdfFile pdf文件路径\n     * @return big image file\n     * @throws Exception\n     */\n    public static File pdf2image(File pdfFile) throws Exception {\n        // 拼成图片后的宽度和高度\n        int w = 0;\n        int h = 0;\n        List<BufferedImage> images = new ArrayList();\n        // 生成图片后的路径\n        String path = pdfFile.getParent() + File.separator;\n        String fileName = pdfFile.getName().replace(\".pdf\", \"\");\n\n        File destinationFile = new File(path);\n        if (!destinationFile.exists()) {\n            destinationFile.mkdir();\n        }\n        PDDocument document = PDDocument.load(pdfFile);\n        PDPageTree list = document.getDocumentCatalog().getPages();\n        int pageCounter = 0;\n        for (PDPage page : list) {\n            PDFRenderer pdfRenderer = new PDFRenderer(document);\n            BufferedImage image = pdfRenderer.renderImageWithDPI(pageCounter, 100, ImageType.RGB);\n            String target = path + fileName + \"-\" + (pageCounter++) + \".png\";\n            ImageIOUtil.writeImage(image, target, 100);\n\n            w = image.getWidth();\n            h += image.getHeight();\n            images.add(image);\n            new File(target).delete();\n        }\n        document.close();\n\n        BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n        Graphics g = combined.getGraphics();\n\n        int y = 0;\n        for (BufferedImage image : images) {\n            g.drawImage(image, 0, y, null);\n            y += image.getHeight();\n        }\n\n        // Save as new image\n        File image = new File(path, fileName + \".png\");\n        ImageIO.write(combined, \"PNG\", image);\n        return image;\n    }\n\n}\n```\n* 自定义 ConverterDocument\n\n```\n\nimport com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;\nimport com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;\nimport com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;\nimport com.sun.star.awt.Size;\nimport com.sun.star.beans.PropertyValue;\nimport com.sun.star.lang.XComponent;\nimport com.sun.star.uno.UnoRuntime;\nimport com.sun.star.view.PaperFormat;\nimport com.sun.star.view.XPrintable;\n\npublic class ConverterDocument extends StreamOpenOfficeDocumentConverter {\n\n\n    public ConverterDocument(OpenOfficeConnection connection) {\n        super(connection);\n    }\n\n\n    public final static Size A5, A4, A3;\n    public final static Size B4, B5, B6;\n    public final static Size KaoqinReport;\n\n    static {\n        A5 = new Size(14800, 21000);\n        A4 = new Size(21000, 29700);\n        A3 = new Size(29700, 42000);\n\n        B4 = new Size(25000, 35300);\n        B5 = new Size(17600, 25000);\n        B6 = new Size(12500, 17600);\n\n//        KaoqinReport = new Size(29700, 27940);  //最大限度  宽 1600000\n        KaoqinReport = new Size(25000, 21000);;\n    }\n\n\n    @Override\n    protected void refreshDocument(XComponent document) {\n        super.refreshDocument(document);\n\n        // The default paper format and orientation is A4 and portrait. To\n        // change paper orientation\n        // re set page size\n        XPrintable xPrintable = (XPrintable) UnoRuntime.queryInterface(XPrintable.class, document);\n        PropertyValue[] printerDesc = new PropertyValue[2];\n\n        // Paper Orientation\n//  printerDesc[0] = new PropertyValue();\n//  printerDesc[0].Name = \"PaperOrientation\";\n//  printerDesc[0].Value = PaperOrientation.PORTRAIT;\n\n        // Paper Format\n        printerDesc[0] = new PropertyValue();\n        printerDesc[0].Name = \"PaperFormat\";\n        printerDesc[0].Value = PaperFormat.USER;\n\n        // Paper Size\n        printerDesc[1] = new PropertyValue();\n        printerDesc[1].Name = \"PaperSize\";\n        printerDesc[1].Value = KaoqinReport;\n\n        try {\n            xPrintable.setPrinter(printerDesc);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n* 使用：\n\n```\n\tpublic static void main(String[] args) throws Exception {\n        OpenOfficeUtils.convert(\"D:\\\\test.xls\", \"D:\\\\test.pdf\");\n        pdf2image(new File(\"D:\\\\test.pdf\"));\n\t}\n```\n\n\n参考： https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6\n\n","slug":"JAVA中使用openoffice将Excel转PDF再转图片功能实现","published":1,"updated":"2019-04-20T12:30:58.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xso000qvq6bccdhfn4x","content":"<ul>\n<li>需求</li>\n</ul>\n<blockquote>\n<p>公司一个小项目要结尾了, 有非常多的表格, 而且非常复杂, 例如</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://img-blog.csdn.net/20181018170207617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n例如：（这表格, 有想死的心…）<br>\n<img src=\"https://img-blog.csdn.net/20181018171047385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>看到这样的表格，第一反应是n脸懵逼，这得做到啥时候啊，最后想到用一个方法，让客户自己玩！！<br>\n平台提供Excel模版下载，客户下载填写完再提交Excel，平台再将Excel转PDF，顺便将PDF转成图片，给前端展示，想法简单，方案可行，开工！</p>\n</blockquote>\n<ul>\n<li>方案:</li>\n</ul>\n<ol>\n<li>windows server下用 jacob, windows上可完美运行, 但是！！！Linux上不支持jacob！！！（非常重要！！）</li>\n<li>poi + iText，貌似不错</li>\n<li>openoffice，跨平台</li>\n</ol>\n<blockquote>\n<p>本文选用openoffice，各位看官可自选用iText + poi，自己判别！当然也可以用jacob，前提是你不需要在Linux中运行项目。</p>\n</blockquote>\n<ul>\n<li>安装软件：<a href=\"http://www.openoffice.org/download/index.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></li>\n</ul>\n<ol start=\"4\">\n<li>win：</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/2018101817373025?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"win版本\"><br>\n下载完成后，一路next，最好默认路径安装，免得折腾<br>\n完成后 <strong><em>Win + R</em></strong> 填入 <strong><em>Dcomcnfg</em></strong>  打开组件服务<br>\n<img src=\"https://img-blog.csdn.net/2018101817414451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n设置openoffice组件服务， 都设成SYSTEM<br>\n<img src=\"https://img-blog.csdn.net/20181018174311265?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n再设置标识为：交互式用户<br>\n<img src=\"https://img-blog.csdn.net/20181018174529594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n<p>进入到安装目录，如果路径是默认的，则在 <strong><em>C:\\Program Files (x86)\\OpenOffice 4\\program</em></strong> 下面，<br>\n进到这个路径下，按住 <strong><em>shift</em></strong>  再点击鼠标右键，<strong><em>在此处打开命令窗口</em></strong>，输入 <strong><em>soffice -headless-accept=“socket,host=127.0.0.1,port=8100;urp;”-nofirststartwizard</em></strong>， 查看是否启动成功， 黑窗口输入 <strong><em>netstat -ano</em></strong><br>\n<img src=\"https://img-blog.csdn.net/20181018175507225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n<img src=\"https://img-blog.csdn.net/20181018175417121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\nwindows下安装完毕！</p>\n<p>参考： <a href=\"https://blog.csdn.net/qq_30987095/article/details/78789103\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_30987095/article/details/78789103</a></p>\n<p>2.Linux：<a href=\"http://www.openoffice.org/download/index.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></p>\n<p><img src=\"https://img-blog.csdn.net/20181018175750307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n根据自己的Linux系统选择RPM包或者DEB，如果是Ubuntu则选DEB，其他就选RPM包，查看当前操作系统是ubuntu还是centos</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ2zeg3etf08f6snef3lgrZ ~]#  lsb_release -a</span><br><span class=\"line\">LSB Version:\t:(略)</span><br><span class=\"line\">Distributor ID:\tCentOS</span><br><span class=\"line\">Description:\tCentOS Linux release (略)</span><br><span class=\"line\">Release:\t(略)</span><br><span class=\"line\">Codename:\tCore</span><br></pre></td></tr></table></figure>\n<p>下载完毕后，利用ssh工具上传到服务器上！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  tar -zxvf Apache_OpenOffice_4.1.3_Linux_x86-64_install-rpm_zh-CN.tar.gz</span><br><span class=\"line\">(略)......</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ls </span><br><span class=\"line\">zh-CN</span><br><span class=\"line\">&gt; cd zh-CN/RPMS</span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">openoffice-core01-4.1.3-9783.x86_64.rpm             openoffice-impress-4.1.3-9783.x86_64.rpm        openoffice-zh-CN-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-4.1.3-9783.x86_64.rpm                openoffice-core02-4.1.3-9783.x86_64.rpm             openoffice-javafilter-4.1.3-9783.x86_64.rpm     openoffice-zh-CN-base-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-base-4.1.3-9783.x86_64.rpm           openoffice-core03-4.1.3-9783.x86_64.rpm             openoffice-math-4.1.3-9783.x86_64.rpm           openoffice-zh-CN-calc-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-base-4.1.3-9783.x86_64.rpm     openoffice-core04-4.1.3-9783.x86_64.rpm             openoffice-ogltrans-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-draw-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-calc-4.1.3-9783.x86_64.rpm     openoffice-core05-4.1.3-9783.x86_64.rpm             openoffice-onlineupdate-4.1.3-9783.x86_64.rpm   openoffice-zh-CN-help-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-draw-4.1.3-9783.x86_64.rpm     openoffice-core06-4.1.3-9783.x86_64.rpm             openoffice-ooofonts-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-impress-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-impress-4.1.3-9783.x86_64.rpm  openoffice-core07-4.1.3-9783.x86_64.rpm             openoffice-ooolinguistic-4.1.3-9783.x86_64.rpm  openoffice-zh-CN-math-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-math-4.1.3-9783.x86_64.rpm     openoffice-draw-4.1.3-9783.x86_64.rpm               openoffice-pyuno-4.1.3-9783.x86_64.rpm          openoffice-zh-CN-res-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-writer-4.1.3-9783.x86_64.rpm   openoffice-gnome-integration-4.1.3-9783.x86_64.rpm  openoffice-ure-4.1.3-9783.x86_64.rpm            openoffice-zh-CN-writer-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-zh-CN-4.1.3-9783.x86_64.rpm    openoffice-graphicfilter-4.1.3-9783.x86_64.rpm      openoffice-writer-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-calc-4.1.3-9783.x86_64.rpm           openoffice-images-4.1.3-9783.x86_64.rpm             openoffice-xsltfilter-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：运行下面命令， 生成  desktop-integration包]</span><br><span class=\"line\">&gt;  yum localinstall *.rpm</span><br><span class=\"line\">&gt; （略...）</span><br><span class=\"line\">&gt; cd desktop-integration/</span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">&gt;  openoffice4.1.3-freedesktop-menus-4.1.3-9783.noarch.rpm  </span><br><span class=\"line\">   openoffice4.1.3-mandriva-menus-4.1.3-9783.noarch.rpm </span><br><span class=\"line\">   openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  </span><br><span class=\"line\">   openoffice4.1.3-suse-menus-4.1.3-9783.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  yum localinstall  openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>ok， 安装完毕了！ 启动服务<br>\n进入到默认安装目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /opt/openoffice4/program/</span><br><span class=\"line\">[注释：临时启动]</span><br><span class=\"line\">&gt; /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard</span><br><span class=\"line\">[注释：或后台启动]</span><br><span class=\"line\">&gt; /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：永久启动]</span><br><span class=\"line\">&gt; nohup /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：查看是否启动成功]</span><br><span class=\"line\">&gt; ps -ef|grep openoffice</span><br><span class=\"line\">root      7541  7527  0 10:19 pts/0    00:00:12 /opt/openoffice4/program/soffice.bin -headless -accept=socket,host=127.0.0.1,port=8100;urp; -nofirststartwizard</span><br><span class=\"line\">root      8964  7066  0 18:18 pts/3    00:00:00 grep --color=auto openoffice</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; netstat -tunlp |grep </span><br><span class=\"line\">tcp        0      0 127.0.0.1:8100          0.0.0.0:*               LISTEN      7541/soffice.bin</span><br></pre></td></tr></table></figure>\n<p>Linux下安装成功！</p>\n<p>开始撸码：</p>\n<ul>\n<li>pom.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- openoffice 相关依赖 --&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;1.4&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;juh&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;ridl&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;unoil&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;!-- pdf2img --&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;2.0.6&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;pdfbox-tools&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;2.0.6&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>OpenOfficeUtils</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.awt.*;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.ConnectException;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.artofsolving.jodconverter.DefaultDocumentFormatRegistry;</span><br><span class=\"line\">import com.artofsolving.jodconverter.DocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.DocumentFormatRegistry;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.SocketOpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDPage;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDPageTree;</span><br><span class=\"line\">import org.apache.pdfbox.rendering.ImageType;</span><br><span class=\"line\">import org.apache.pdfbox.rendering.PDFRenderer;</span><br><span class=\"line\">import org.apache.pdfbox.tools.imageio.ImageIOUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.awt.image.BufferedImage;</span><br><span class=\"line\">import java.awt.image.RenderedImage;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import javax.imageio.ImageIO;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author josnow</span><br><span class=\"line\"> * @date 2017年5月9日 下午12:38:39</span><br><span class=\"line\"> * @version 1.0.0</span><br><span class=\"line\"> * @desc openoffice转换工具</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OpenOfficeUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String LOCAL_HOST = &quot;localhost&quot;;</span><br><span class=\"line\">    public static final int LOCAL_PORT = 8100;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Format</span><br><span class=\"line\">    public static DocumentFormatRegistry formatFactory = new DefaultDocumentFormatRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:11:04</span><br><span class=\"line\">     * @param inputFilePath</span><br><span class=\"line\">     *            待转换的文件路径</span><br><span class=\"line\">     * @param outputFilePath</span><br><span class=\"line\">     *            输出文件路径</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(String inputFilePath, String outputFilePath) throws ConnectException &#123;</span><br><span class=\"line\">        convert(inputFilePath, outputFilePath, LOCAL_HOST, LOCAL_PORT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:12:29</span><br><span class=\"line\">     * @param inputFilePath</span><br><span class=\"line\">     *            待转换的文件路径</span><br><span class=\"line\">     * @param outputFilePath</span><br><span class=\"line\">     *            输出文件路径</span><br><span class=\"line\">     * @param connectIp</span><br><span class=\"line\">     *            远程调用ip</span><br><span class=\"line\">     * @param connectPort</span><br><span class=\"line\">     *            远程调用端口</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(String inputFilePath, String outputFilePath, String connectIp, int connectPort)</span><br><span class=\"line\">            throws ConnectException &#123;</span><br><span class=\"line\">        if (StringUtils.isEmpty(inputFilePath) || StringUtils.isEmpty(outputFilePath)</span><br><span class=\"line\">                || StringUtils.isEmpty(connectIp)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;参数异常！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);</span><br><span class=\"line\">        connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\">// \t\t  TODO Excel转成PDF默认是A4纸</span><br><span class=\"line\">//        DocumentConverter converter = getConverter(connectIp, connection);</span><br><span class=\"line\">//        converter.convert(new File(inputFilePath), new File(outputFilePath));</span><br><span class=\"line\"></span><br><span class=\"line\">// \t\t  TODO Excel转成PDF默认是A4纸， 如果现实折行，则自定义ConverterDocument，改变纸张大小</span><br><span class=\"line\">        ConverterDocument converterDocument = new ConverterDocument(connection);</span><br><span class=\"line\">        converterDocument.convert(new File(inputFilePath), new File(outputFilePath));</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.disconnect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:08:26</span><br><span class=\"line\">     * @param inputStream</span><br><span class=\"line\">     * @param inputFileExtension</span><br><span class=\"line\">     *            待转换文件的扩展名，例如: xls，doc</span><br><span class=\"line\">     * @param outputStream</span><br><span class=\"line\">     * @param outputFileExtension</span><br><span class=\"line\">     *            输出文件扩展名，例如：pdf</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,</span><br><span class=\"line\">            String outputFileExtension) throws ConnectException &#123;</span><br><span class=\"line\">        convert(inputStream, inputFileExtension, outputStream, outputFileExtension, LOCAL_HOST, LOCAL_PORT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:10:21</span><br><span class=\"line\">     * @param inputStream</span><br><span class=\"line\">     * @param inputFileExtension</span><br><span class=\"line\">     *            待转换文件的扩展名，例如: xls，doc</span><br><span class=\"line\">     * @param outputStream</span><br><span class=\"line\">     * @param outputFileExtension</span><br><span class=\"line\">     *            输出文件扩展名，例如：pdf</span><br><span class=\"line\">     * @param connectIp</span><br><span class=\"line\">     *            远程调用ip</span><br><span class=\"line\">     * @param connectPort</span><br><span class=\"line\">     *            远程调用端口</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,</span><br><span class=\"line\">            String outputFileExtension, String connectIp, int connectPort) throws ConnectException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (inputStream == null || StringUtils.isEmpty(inputFileExtension) || outputStream == null</span><br><span class=\"line\">                || StringUtils.isEmpty(outputFileExtension) || StringUtils.isEmpty(connectIp)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;参数异常！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);</span><br><span class=\"line\">        connection.connect();</span><br><span class=\"line\">        DocumentConverter converter = getConverter(connectIp, connection);</span><br><span class=\"line\"></span><br><span class=\"line\">        converter.convert(inputStream, formatFactory.getFormatByFileExtension(inputFileExtension), outputStream,</span><br><span class=\"line\">                formatFactory.getFormatByFileExtension(outputFileExtension));</span><br><span class=\"line\">        connection.disconnect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static DocumentConverter getConverter(String connectIp, OpenOfficeConnection connection) &#123;</span><br><span class=\"line\">        DocumentConverter converter = &quot;localhost&quot;.equals(connectIp) || &quot;127.0.0.1&quot;.equals(connectIp)</span><br><span class=\"line\">                || &quot;0:0:0:0:0:0:0:1&quot;.equals(connectIp) ? new OpenOfficeDocumentConverter(connection)</span><br><span class=\"line\">                        : new StreamOpenOfficeDocumentConverter(connection);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        OpenOfficeUtils.convert(&quot;D:\\\\test.xls&quot;, &quot;D:\\\\test.pdf&quot;);</span><br><span class=\"line\">        pdf2image(new File(&quot;D:\\\\test.pdf&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * pdf to big image</span><br><span class=\"line\">     * github: https://github.com/mmtou/pdf2img</span><br><span class=\"line\">     * @param pdfFile pdf文件路径</span><br><span class=\"line\">     * @return big image file</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static File pdf2image(File pdfFile) throws Exception &#123;</span><br><span class=\"line\">        // 拼成图片后的宽度和高度</span><br><span class=\"line\">        int w = 0;</span><br><span class=\"line\">        int h = 0;</span><br><span class=\"line\">        List&lt;BufferedImage&gt; images = new ArrayList();</span><br><span class=\"line\">        // 生成图片后的路径</span><br><span class=\"line\">        String path = pdfFile.getParent() + File.separator;</span><br><span class=\"line\">        String fileName = pdfFile.getName().replace(&quot;.pdf&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        File destinationFile = new File(path);</span><br><span class=\"line\">        if (!destinationFile.exists()) &#123;</span><br><span class=\"line\">            destinationFile.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PDDocument document = PDDocument.load(pdfFile);</span><br><span class=\"line\">        PDPageTree list = document.getDocumentCatalog().getPages();</span><br><span class=\"line\">        int pageCounter = 0;</span><br><span class=\"line\">        for (PDPage page : list) &#123;</span><br><span class=\"line\">            PDFRenderer pdfRenderer = new PDFRenderer(document);</span><br><span class=\"line\">            BufferedImage image = pdfRenderer.renderImageWithDPI(pageCounter, 100, ImageType.RGB);</span><br><span class=\"line\">            String target = path + fileName + &quot;-&quot; + (pageCounter++) + &quot;.png&quot;;</span><br><span class=\"line\">            ImageIOUtil.writeImage(image, target, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">            w = image.getWidth();</span><br><span class=\"line\">            h += image.getHeight();</span><br><span class=\"line\">            images.add(image);</span><br><span class=\"line\">            new File(target).delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        Graphics g = combined.getGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\">        int y = 0;</span><br><span class=\"line\">        for (BufferedImage image : images) &#123;</span><br><span class=\"line\">            g.drawImage(image, 0, y, null);</span><br><span class=\"line\">            y += image.getHeight();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Save as new image</span><br><span class=\"line\">        File image = new File(path, fileName + &quot;.png&quot;);</span><br><span class=\"line\">        ImageIO.write(combined, &quot;PNG&quot;, image);</span><br><span class=\"line\">        return image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义 ConverterDocument</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.sun.star.awt.Size;</span><br><span class=\"line\">import com.sun.star.beans.PropertyValue;</span><br><span class=\"line\">import com.sun.star.lang.XComponent;</span><br><span class=\"line\">import com.sun.star.uno.UnoRuntime;</span><br><span class=\"line\">import com.sun.star.view.PaperFormat;</span><br><span class=\"line\">import com.sun.star.view.XPrintable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ConverterDocument extends StreamOpenOfficeDocumentConverter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public ConverterDocument(OpenOfficeConnection connection) &#123;</span><br><span class=\"line\">        super(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public final static Size A5, A4, A3;</span><br><span class=\"line\">    public final static Size B4, B5, B6;</span><br><span class=\"line\">    public final static Size KaoqinReport;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        A5 = new Size(14800, 21000);</span><br><span class=\"line\">        A4 = new Size(21000, 29700);</span><br><span class=\"line\">        A3 = new Size(29700, 42000);</span><br><span class=\"line\"></span><br><span class=\"line\">        B4 = new Size(25000, 35300);</span><br><span class=\"line\">        B5 = new Size(17600, 25000);</span><br><span class=\"line\">        B6 = new Size(12500, 17600);</span><br><span class=\"line\"></span><br><span class=\"line\">//        KaoqinReport = new Size(29700, 27940);  //最大限度  宽 1600000</span><br><span class=\"line\">        KaoqinReport = new Size(25000, 21000);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void refreshDocument(XComponent document) &#123;</span><br><span class=\"line\">        super.refreshDocument(document);</span><br><span class=\"line\"></span><br><span class=\"line\">        // The default paper format and orientation is A4 and portrait. To</span><br><span class=\"line\">        // change paper orientation</span><br><span class=\"line\">        // re set page size</span><br><span class=\"line\">        XPrintable xPrintable = (XPrintable) UnoRuntime.queryInterface(XPrintable.class, document);</span><br><span class=\"line\">        PropertyValue[] printerDesc = new PropertyValue[2];</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Orientation</span><br><span class=\"line\">//  printerDesc[0] = new PropertyValue();</span><br><span class=\"line\">//  printerDesc[0].Name = &quot;PaperOrientation&quot;;</span><br><span class=\"line\">//  printerDesc[0].Value = PaperOrientation.PORTRAIT;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Format</span><br><span class=\"line\">        printerDesc[0] = new PropertyValue();</span><br><span class=\"line\">        printerDesc[0].Name = &quot;PaperFormat&quot;;</span><br><span class=\"line\">        printerDesc[0].Value = PaperFormat.USER;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Size</span><br><span class=\"line\">        printerDesc[1] = new PropertyValue();</span><br><span class=\"line\">        printerDesc[1].Name = &quot;PaperSize&quot;;</span><br><span class=\"line\">        printerDesc[1].Value = KaoqinReport;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            xPrintable.setPrinter(printerDesc);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">       OpenOfficeUtils.convert(&quot;D:\\\\test.xls&quot;, &quot;D:\\\\test.pdf&quot;);</span><br><span class=\"line\">       pdf2image(new File(&quot;D:\\\\test.pdf&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考： <a href=\"https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>需求</li>\n</ul>\n<blockquote>\n<p>公司一个小项目要结尾了, 有非常多的表格, 而且非常复杂, 例如</p>\n</blockquote>","more":"<p><img src=\"https://img-blog.csdn.net/20181018170207617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n例如：（这表格, 有想死的心…）<br>\n<img src=\"https://img-blog.csdn.net/20181018171047385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>看到这样的表格，第一反应是n脸懵逼，这得做到啥时候啊，最后想到用一个方法，让客户自己玩！！<br>\n平台提供Excel模版下载，客户下载填写完再提交Excel，平台再将Excel转PDF，顺便将PDF转成图片，给前端展示，想法简单，方案可行，开工！</p>\n</blockquote>\n<ul>\n<li>方案:</li>\n</ul>\n<ol>\n<li>windows server下用 jacob, windows上可完美运行, 但是！！！Linux上不支持jacob！！！（非常重要！！）</li>\n<li>poi + iText，貌似不错</li>\n<li>openoffice，跨平台</li>\n</ol>\n<blockquote>\n<p>本文选用openoffice，各位看官可自选用iText + poi，自己判别！当然也可以用jacob，前提是你不需要在Linux中运行项目。</p>\n</blockquote>\n<ul>\n<li>安装软件：<a href=\"http://www.openoffice.org/download/index.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></li>\n</ul>\n<ol start=\"4\">\n<li>win：</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/2018101817373025?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"win版本\"><br>\n下载完成后，一路next，最好默认路径安装，免得折腾<br>\n完成后 <strong><em>Win + R</em></strong> 填入 <strong><em>Dcomcnfg</em></strong>  打开组件服务<br>\n<img src=\"https://img-blog.csdn.net/2018101817414451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n设置openoffice组件服务， 都设成SYSTEM<br>\n<img src=\"https://img-blog.csdn.net/20181018174311265?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n再设置标识为：交互式用户<br>\n<img src=\"https://img-blog.csdn.net/20181018174529594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n<p>进入到安装目录，如果路径是默认的，则在 <strong><em>C:\\Program Files (x86)\\OpenOffice 4\\program</em></strong> 下面，<br>\n进到这个路径下，按住 <strong><em>shift</em></strong>  再点击鼠标右键，<strong><em>在此处打开命令窗口</em></strong>，输入 <strong><em>soffice -headless-accept=“socket,host=127.0.0.1,port=8100;urp;”-nofirststartwizard</em></strong>， 查看是否启动成功， 黑窗口输入 <strong><em>netstat -ano</em></strong><br>\n<img src=\"https://img-blog.csdn.net/20181018175507225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n<img src=\"https://img-blog.csdn.net/20181018175417121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\nwindows下安装完毕！</p>\n<p>参考： <a href=\"https://blog.csdn.net/qq_30987095/article/details/78789103\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_30987095/article/details/78789103</a></p>\n<p>2.Linux：<a href=\"http://www.openoffice.org/download/index.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></p>\n<p><img src=\"https://img-blog.csdn.net/20181018175750307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>\n根据自己的Linux系统选择RPM包或者DEB，如果是Ubuntu则选DEB，其他就选RPM包，查看当前操作系统是ubuntu还是centos</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ2zeg3etf08f6snef3lgrZ ~]#  lsb_release -a</span><br><span class=\"line\">LSB Version:\t:(略)</span><br><span class=\"line\">Distributor ID:\tCentOS</span><br><span class=\"line\">Description:\tCentOS Linux release (略)</span><br><span class=\"line\">Release:\t(略)</span><br><span class=\"line\">Codename:\tCore</span><br></pre></td></tr></table></figure>\n<p>下载完毕后，利用ssh工具上传到服务器上！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  tar -zxvf Apache_OpenOffice_4.1.3_Linux_x86-64_install-rpm_zh-CN.tar.gz</span><br><span class=\"line\">(略)......</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ls </span><br><span class=\"line\">zh-CN</span><br><span class=\"line\">&gt; cd zh-CN/RPMS</span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">openoffice-core01-4.1.3-9783.x86_64.rpm             openoffice-impress-4.1.3-9783.x86_64.rpm        openoffice-zh-CN-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-4.1.3-9783.x86_64.rpm                openoffice-core02-4.1.3-9783.x86_64.rpm             openoffice-javafilter-4.1.3-9783.x86_64.rpm     openoffice-zh-CN-base-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-base-4.1.3-9783.x86_64.rpm           openoffice-core03-4.1.3-9783.x86_64.rpm             openoffice-math-4.1.3-9783.x86_64.rpm           openoffice-zh-CN-calc-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-base-4.1.3-9783.x86_64.rpm     openoffice-core04-4.1.3-9783.x86_64.rpm             openoffice-ogltrans-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-draw-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-calc-4.1.3-9783.x86_64.rpm     openoffice-core05-4.1.3-9783.x86_64.rpm             openoffice-onlineupdate-4.1.3-9783.x86_64.rpm   openoffice-zh-CN-help-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-draw-4.1.3-9783.x86_64.rpm     openoffice-core06-4.1.3-9783.x86_64.rpm             openoffice-ooofonts-4.1.3-9783.x86_64.rpm       openoffice-zh-CN-impress-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-impress-4.1.3-9783.x86_64.rpm  openoffice-core07-4.1.3-9783.x86_64.rpm             openoffice-ooolinguistic-4.1.3-9783.x86_64.rpm  openoffice-zh-CN-math-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-math-4.1.3-9783.x86_64.rpm     openoffice-draw-4.1.3-9783.x86_64.rpm               openoffice-pyuno-4.1.3-9783.x86_64.rpm          openoffice-zh-CN-res-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-writer-4.1.3-9783.x86_64.rpm   openoffice-gnome-integration-4.1.3-9783.x86_64.rpm  openoffice-ure-4.1.3-9783.x86_64.rpm            openoffice-zh-CN-writer-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-brand-zh-CN-4.1.3-9783.x86_64.rpm    openoffice-graphicfilter-4.1.3-9783.x86_64.rpm      openoffice-writer-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\">openoffice-calc-4.1.3-9783.x86_64.rpm           openoffice-images-4.1.3-9783.x86_64.rpm             openoffice-xsltfilter-4.1.3-9783.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：运行下面命令， 生成  desktop-integration包]</span><br><span class=\"line\">&gt;  yum localinstall *.rpm</span><br><span class=\"line\">&gt; （略...）</span><br><span class=\"line\">&gt; cd desktop-integration/</span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">&gt;  openoffice4.1.3-freedesktop-menus-4.1.3-9783.noarch.rpm  </span><br><span class=\"line\">   openoffice4.1.3-mandriva-menus-4.1.3-9783.noarch.rpm </span><br><span class=\"line\">   openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm  </span><br><span class=\"line\">   openoffice4.1.3-suse-menus-4.1.3-9783.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  yum localinstall  openoffice4.1.3-redhat-menus-4.1.3-9783.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>ok， 安装完毕了！ 启动服务<br>\n进入到默认安装目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /opt/openoffice4/program/</span><br><span class=\"line\">[注释：临时启动]</span><br><span class=\"line\">&gt; /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard</span><br><span class=\"line\">[注释：或后台启动]</span><br><span class=\"line\">&gt; /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：永久启动]</span><br><span class=\"line\">&gt; nohup /opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">[注释：查看是否启动成功]</span><br><span class=\"line\">&gt; ps -ef|grep openoffice</span><br><span class=\"line\">root      7541  7527  0 10:19 pts/0    00:00:12 /opt/openoffice4/program/soffice.bin -headless -accept=socket,host=127.0.0.1,port=8100;urp; -nofirststartwizard</span><br><span class=\"line\">root      8964  7066  0 18:18 pts/3    00:00:00 grep --color=auto openoffice</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; netstat -tunlp |grep </span><br><span class=\"line\">tcp        0      0 127.0.0.1:8100          0.0.0.0:*               LISTEN      7541/soffice.bin</span><br></pre></td></tr></table></figure>\n<p>Linux下安装成功！</p>\n<p>开始撸码：</p>\n<ul>\n<li>pom.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- openoffice 相关依赖 --&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;1.4&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;juh&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;ridl&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.openoffice&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;unoil&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;!-- pdf2img --&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;2.0.6&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;pdfbox-tools&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;2.0.6&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>OpenOfficeUtils</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.awt.*;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.ConnectException;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.artofsolving.jodconverter.DefaultDocumentFormatRegistry;</span><br><span class=\"line\">import com.artofsolving.jodconverter.DocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.DocumentFormatRegistry;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.SocketOpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDPage;</span><br><span class=\"line\">import org.apache.pdfbox.pdmodel.PDPageTree;</span><br><span class=\"line\">import org.apache.pdfbox.rendering.ImageType;</span><br><span class=\"line\">import org.apache.pdfbox.rendering.PDFRenderer;</span><br><span class=\"line\">import org.apache.pdfbox.tools.imageio.ImageIOUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.awt.image.BufferedImage;</span><br><span class=\"line\">import java.awt.image.RenderedImage;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import javax.imageio.ImageIO;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author josnow</span><br><span class=\"line\"> * @date 2017年5月9日 下午12:38:39</span><br><span class=\"line\"> * @version 1.0.0</span><br><span class=\"line\"> * @desc openoffice转换工具</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OpenOfficeUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String LOCAL_HOST = &quot;localhost&quot;;</span><br><span class=\"line\">    public static final int LOCAL_PORT = 8100;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Format</span><br><span class=\"line\">    public static DocumentFormatRegistry formatFactory = new DefaultDocumentFormatRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:11:04</span><br><span class=\"line\">     * @param inputFilePath</span><br><span class=\"line\">     *            待转换的文件路径</span><br><span class=\"line\">     * @param outputFilePath</span><br><span class=\"line\">     *            输出文件路径</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(String inputFilePath, String outputFilePath) throws ConnectException &#123;</span><br><span class=\"line\">        convert(inputFilePath, outputFilePath, LOCAL_HOST, LOCAL_PORT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:12:29</span><br><span class=\"line\">     * @param inputFilePath</span><br><span class=\"line\">     *            待转换的文件路径</span><br><span class=\"line\">     * @param outputFilePath</span><br><span class=\"line\">     *            输出文件路径</span><br><span class=\"line\">     * @param connectIp</span><br><span class=\"line\">     *            远程调用ip</span><br><span class=\"line\">     * @param connectPort</span><br><span class=\"line\">     *            远程调用端口</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(String inputFilePath, String outputFilePath, String connectIp, int connectPort)</span><br><span class=\"line\">            throws ConnectException &#123;</span><br><span class=\"line\">        if (StringUtils.isEmpty(inputFilePath) || StringUtils.isEmpty(outputFilePath)</span><br><span class=\"line\">                || StringUtils.isEmpty(connectIp)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;参数异常！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);</span><br><span class=\"line\">        connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\">// \t\t  TODO Excel转成PDF默认是A4纸</span><br><span class=\"line\">//        DocumentConverter converter = getConverter(connectIp, connection);</span><br><span class=\"line\">//        converter.convert(new File(inputFilePath), new File(outputFilePath));</span><br><span class=\"line\"></span><br><span class=\"line\">// \t\t  TODO Excel转成PDF默认是A4纸， 如果现实折行，则自定义ConverterDocument，改变纸张大小</span><br><span class=\"line\">        ConverterDocument converterDocument = new ConverterDocument(connection);</span><br><span class=\"line\">        converterDocument.convert(new File(inputFilePath), new File(outputFilePath));</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.disconnect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:08:26</span><br><span class=\"line\">     * @param inputStream</span><br><span class=\"line\">     * @param inputFileExtension</span><br><span class=\"line\">     *            待转换文件的扩展名，例如: xls，doc</span><br><span class=\"line\">     * @param outputStream</span><br><span class=\"line\">     * @param outputFileExtension</span><br><span class=\"line\">     *            输出文件扩展名，例如：pdf</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,</span><br><span class=\"line\">            String outputFileExtension) throws ConnectException &#123;</span><br><span class=\"line\">        convert(inputStream, inputFileExtension, outputStream, outputFileExtension, LOCAL_HOST, LOCAL_PORT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @desc</span><br><span class=\"line\">     * @auth josnow</span><br><span class=\"line\">     * @date 2017年6月9日 下午4:10:21</span><br><span class=\"line\">     * @param inputStream</span><br><span class=\"line\">     * @param inputFileExtension</span><br><span class=\"line\">     *            待转换文件的扩展名，例如: xls，doc</span><br><span class=\"line\">     * @param outputStream</span><br><span class=\"line\">     * @param outputFileExtension</span><br><span class=\"line\">     *            输出文件扩展名，例如：pdf</span><br><span class=\"line\">     * @param connectIp</span><br><span class=\"line\">     *            远程调用ip</span><br><span class=\"line\">     * @param connectPort</span><br><span class=\"line\">     *            远程调用端口</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void convert(InputStream inputStream, String inputFileExtension, OutputStream outputStream,</span><br><span class=\"line\">            String outputFileExtension, String connectIp, int connectPort) throws ConnectException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (inputStream == null || StringUtils.isEmpty(inputFileExtension) || outputStream == null</span><br><span class=\"line\">                || StringUtils.isEmpty(outputFileExtension) || StringUtils.isEmpty(connectIp)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;参数异常！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        OpenOfficeConnection connection = new SocketOpenOfficeConnection(connectIp, connectPort);</span><br><span class=\"line\">        connection.connect();</span><br><span class=\"line\">        DocumentConverter converter = getConverter(connectIp, connection);</span><br><span class=\"line\"></span><br><span class=\"line\">        converter.convert(inputStream, formatFactory.getFormatByFileExtension(inputFileExtension), outputStream,</span><br><span class=\"line\">                formatFactory.getFormatByFileExtension(outputFileExtension));</span><br><span class=\"line\">        connection.disconnect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static DocumentConverter getConverter(String connectIp, OpenOfficeConnection connection) &#123;</span><br><span class=\"line\">        DocumentConverter converter = &quot;localhost&quot;.equals(connectIp) || &quot;127.0.0.1&quot;.equals(connectIp)</span><br><span class=\"line\">                || &quot;0:0:0:0:0:0:0:1&quot;.equals(connectIp) ? new OpenOfficeDocumentConverter(connection)</span><br><span class=\"line\">                        : new StreamOpenOfficeDocumentConverter(connection);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        OpenOfficeUtils.convert(&quot;D:\\\\test.xls&quot;, &quot;D:\\\\test.pdf&quot;);</span><br><span class=\"line\">        pdf2image(new File(&quot;D:\\\\test.pdf&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * pdf to big image</span><br><span class=\"line\">     * github: https://github.com/mmtou/pdf2img</span><br><span class=\"line\">     * @param pdfFile pdf文件路径</span><br><span class=\"line\">     * @return big image file</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static File pdf2image(File pdfFile) throws Exception &#123;</span><br><span class=\"line\">        // 拼成图片后的宽度和高度</span><br><span class=\"line\">        int w = 0;</span><br><span class=\"line\">        int h = 0;</span><br><span class=\"line\">        List&lt;BufferedImage&gt; images = new ArrayList();</span><br><span class=\"line\">        // 生成图片后的路径</span><br><span class=\"line\">        String path = pdfFile.getParent() + File.separator;</span><br><span class=\"line\">        String fileName = pdfFile.getName().replace(&quot;.pdf&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        File destinationFile = new File(path);</span><br><span class=\"line\">        if (!destinationFile.exists()) &#123;</span><br><span class=\"line\">            destinationFile.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PDDocument document = PDDocument.load(pdfFile);</span><br><span class=\"line\">        PDPageTree list = document.getDocumentCatalog().getPages();</span><br><span class=\"line\">        int pageCounter = 0;</span><br><span class=\"line\">        for (PDPage page : list) &#123;</span><br><span class=\"line\">            PDFRenderer pdfRenderer = new PDFRenderer(document);</span><br><span class=\"line\">            BufferedImage image = pdfRenderer.renderImageWithDPI(pageCounter, 100, ImageType.RGB);</span><br><span class=\"line\">            String target = path + fileName + &quot;-&quot; + (pageCounter++) + &quot;.png&quot;;</span><br><span class=\"line\">            ImageIOUtil.writeImage(image, target, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">            w = image.getWidth();</span><br><span class=\"line\">            h += image.getHeight();</span><br><span class=\"line\">            images.add(image);</span><br><span class=\"line\">            new File(target).delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        Graphics g = combined.getGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\">        int y = 0;</span><br><span class=\"line\">        for (BufferedImage image : images) &#123;</span><br><span class=\"line\">            g.drawImage(image, 0, y, null);</span><br><span class=\"line\">            y += image.getHeight();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Save as new image</span><br><span class=\"line\">        File image = new File(path, fileName + &quot;.png&quot;);</span><br><span class=\"line\">        ImageIO.write(combined, &quot;PNG&quot;, image);</span><br><span class=\"line\">        return image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义 ConverterDocument</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.artofsolving.jodconverter.openoffice.converter.StreamOpenOfficeDocumentConverter;</span><br><span class=\"line\">import com.sun.star.awt.Size;</span><br><span class=\"line\">import com.sun.star.beans.PropertyValue;</span><br><span class=\"line\">import com.sun.star.lang.XComponent;</span><br><span class=\"line\">import com.sun.star.uno.UnoRuntime;</span><br><span class=\"line\">import com.sun.star.view.PaperFormat;</span><br><span class=\"line\">import com.sun.star.view.XPrintable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ConverterDocument extends StreamOpenOfficeDocumentConverter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public ConverterDocument(OpenOfficeConnection connection) &#123;</span><br><span class=\"line\">        super(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public final static Size A5, A4, A3;</span><br><span class=\"line\">    public final static Size B4, B5, B6;</span><br><span class=\"line\">    public final static Size KaoqinReport;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        A5 = new Size(14800, 21000);</span><br><span class=\"line\">        A4 = new Size(21000, 29700);</span><br><span class=\"line\">        A3 = new Size(29700, 42000);</span><br><span class=\"line\"></span><br><span class=\"line\">        B4 = new Size(25000, 35300);</span><br><span class=\"line\">        B5 = new Size(17600, 25000);</span><br><span class=\"line\">        B6 = new Size(12500, 17600);</span><br><span class=\"line\"></span><br><span class=\"line\">//        KaoqinReport = new Size(29700, 27940);  //最大限度  宽 1600000</span><br><span class=\"line\">        KaoqinReport = new Size(25000, 21000);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void refreshDocument(XComponent document) &#123;</span><br><span class=\"line\">        super.refreshDocument(document);</span><br><span class=\"line\"></span><br><span class=\"line\">        // The default paper format and orientation is A4 and portrait. To</span><br><span class=\"line\">        // change paper orientation</span><br><span class=\"line\">        // re set page size</span><br><span class=\"line\">        XPrintable xPrintable = (XPrintable) UnoRuntime.queryInterface(XPrintable.class, document);</span><br><span class=\"line\">        PropertyValue[] printerDesc = new PropertyValue[2];</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Orientation</span><br><span class=\"line\">//  printerDesc[0] = new PropertyValue();</span><br><span class=\"line\">//  printerDesc[0].Name = &quot;PaperOrientation&quot;;</span><br><span class=\"line\">//  printerDesc[0].Value = PaperOrientation.PORTRAIT;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Format</span><br><span class=\"line\">        printerDesc[0] = new PropertyValue();</span><br><span class=\"line\">        printerDesc[0].Name = &quot;PaperFormat&quot;;</span><br><span class=\"line\">        printerDesc[0].Value = PaperFormat.USER;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Paper Size</span><br><span class=\"line\">        printerDesc[1] = new PropertyValue();</span><br><span class=\"line\">        printerDesc[1].Name = &quot;PaperSize&quot;;</span><br><span class=\"line\">        printerDesc[1].Value = KaoqinReport;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            xPrintable.setPrinter(printerDesc);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">       OpenOfficeUtils.convert(&quot;D:\\\\test.xls&quot;, &quot;D:\\\\test.pdf&quot;);</span><br><span class=\"line\">       pdf2image(new File(&quot;D:\\\\test.pdf&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考： <a href=\"https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhualiang/article/details/14094019?utm_source=blogxgwz6</a></p>"},{"title":"Java Random seed伪随机","_content":"\n> 在指定区间内获得随机数，随机的几种方式。\n\n\n方法：\n\n```\n\t/**\n\t * 在指定区间[min,max)通过种子seed设置伪随机数\n\t * @param min 最小值\n\t * @param max 最大值\n\t * @param seed 种子\n\t */\n\tpublic static int random(int min, int max, long seed) {\n\t\tRandom random = new Random(seed);\n\t\tfinal int size = 100;\n\t\tfor (int i = 0; i < size ; i++) {\n\t\t\tint randomNum = random.nextInt(max);\n\t\t\tif (randomNum > min && randomNum < max) {\n\t\t\t\treturn randomNum;\n\t\t\t}\n\t\t}\n\t\t// 确保生成随机数。\n\t\treturn random(min, max, send + size);\n\t}\n```\n 测试：\n \n\n```\n\tpublic static void main(String[] args) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tSystem.out.println(String.format(\"第%d遍\", j));\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tSystem.out.print(random(0,100, i) + \"\t\t\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n```\n结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181219095438137.png)\n\n\n\nApache.commons.lang3包中也有RandomUtils生成随机数， 一般的需求足够了。但是没法加seed，无法生成可控的随机数！\n```\n\t<-- org.apache.commons.lang3 -->\n      <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.8.1</version>\n        </dependency>\n```\n\n方法：\n```\n    public static int random(int min, int max)  {\n\t\treturn RandomUtils.nextInt(min, max);\n\t}\n```\n测试：\n\n```\n\tpublic static void main(String[] args) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tSystem.out.println(String.format(\"第%d遍\", j));\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tSystem.out.print(RandomUtils.nextInt(0,100) + \"\t\t\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181219100330868.png)\n","source":"_posts/Java Random seed伪随机.md","raw":"---\ntitle: Java Random seed伪随机\ncategories: Java\ntags: java,random\n---\n\n> 在指定区间内获得随机数，随机的几种方式。\n\n\n方法：\n\n```\n\t/**\n\t * 在指定区间[min,max)通过种子seed设置伪随机数\n\t * @param min 最小值\n\t * @param max 最大值\n\t * @param seed 种子\n\t */\n\tpublic static int random(int min, int max, long seed) {\n\t\tRandom random = new Random(seed);\n\t\tfinal int size = 100;\n\t\tfor (int i = 0; i < size ; i++) {\n\t\t\tint randomNum = random.nextInt(max);\n\t\t\tif (randomNum > min && randomNum < max) {\n\t\t\t\treturn randomNum;\n\t\t\t}\n\t\t}\n\t\t// 确保生成随机数。\n\t\treturn random(min, max, send + size);\n\t}\n```\n 测试：\n \n\n```\n\tpublic static void main(String[] args) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tSystem.out.println(String.format(\"第%d遍\", j));\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tSystem.out.print(random(0,100, i) + \"\t\t\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n```\n结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181219095438137.png)\n\n\n\nApache.commons.lang3包中也有RandomUtils生成随机数， 一般的需求足够了。但是没法加seed，无法生成可控的随机数！\n```\n\t<-- org.apache.commons.lang3 -->\n      <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.8.1</version>\n        </dependency>\n```\n\n方法：\n```\n    public static int random(int min, int max)  {\n\t\treturn RandomUtils.nextInt(min, max);\n\t}\n```\n测试：\n\n```\n\tpublic static void main(String[] args) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tSystem.out.println(String.format(\"第%d遍\", j));\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tSystem.out.print(RandomUtils.nextInt(0,100) + \"\t\t\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181219100330868.png)\n","slug":"Java Random seed伪随机","published":1,"date":"2019-04-20T12:20:10.467Z","updated":"2019-04-20T12:20:10.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsr000vvq6bxpbhajgb","content":"<blockquote>\n<p>在指定区间内获得随机数，随机的几种方式。</p>\n</blockquote>\n<p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 在指定区间[min,max)通过种子seed设置伪随机数</span><br><span class=\"line\"> * @param min 最小值</span><br><span class=\"line\"> * @param max 最大值</span><br><span class=\"line\"> * @param seed 种子</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static int random(int min, int max, long seed) &#123;</span><br><span class=\"line\">\tRandom random = new Random(seed);</span><br><span class=\"line\">\tfinal int size = 100;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; size ; i++) &#123;</span><br><span class=\"line\">\t\tint randomNum = random.nextInt(max);</span><br><span class=\"line\">\t\tif (randomNum &gt; min &amp;&amp; randomNum &lt; max) &#123;</span><br><span class=\"line\">\t\t\treturn randomNum;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 确保生成随机数。</span><br><span class=\"line\">\treturn random(min, max, send + size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\tfor (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(&quot;第%d遍&quot;, j));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(random(0,100, i) + &quot;\t\t&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181219095438137.png\" alt=\"在这里插入图片描述\"></p>\n<p>Apache.commons.lang3包中也有RandomUtils生成随机数， 一般的需求足够了。但是没法加seed，无法生成可控的随机数！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;-- org.apache.commons.lang3 --&gt;</span><br><span class=\"line\">     &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   public static int random(int min, int max)  &#123;</span><br><span class=\"line\">\treturn RandomUtils.nextInt(min, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\tfor (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(&quot;第%d遍&quot;, j));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(RandomUtils.nextInt(0,100) + &quot;\t\t&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20181219100330868.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在指定区间内获得随机数，随机的几种方式。</p>\n</blockquote>\n<p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 在指定区间[min,max)通过种子seed设置伪随机数</span><br><span class=\"line\"> * @param min 最小值</span><br><span class=\"line\"> * @param max 最大值</span><br><span class=\"line\"> * @param seed 种子</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static int random(int min, int max, long seed) &#123;</span><br><span class=\"line\">\tRandom random = new Random(seed);</span><br><span class=\"line\">\tfinal int size = 100;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; size ; i++) &#123;</span><br><span class=\"line\">\t\tint randomNum = random.nextInt(max);</span><br><span class=\"line\">\t\tif (randomNum &gt; min &amp;&amp; randomNum &lt; max) &#123;</span><br><span class=\"line\">\t\t\treturn randomNum;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 确保生成随机数。</span><br><span class=\"line\">\treturn random(min, max, send + size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\tfor (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(&quot;第%d遍&quot;, j));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(random(0,100, i) + &quot;\t\t&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181219095438137.png\" alt=\"在这里插入图片描述\"></p>\n<p>Apache.commons.lang3包中也有RandomUtils生成随机数， 一般的需求足够了。但是没法加seed，无法生成可控的随机数！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;-- org.apache.commons.lang3 --&gt;</span><br><span class=\"line\">     &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   public static int random(int min, int max)  &#123;</span><br><span class=\"line\">\treturn RandomUtils.nextInt(min, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\tfor (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(&quot;第%d遍&quot;, j));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(RandomUtils.nextInt(0,100) + &quot;\t\t&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20181219100330868.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"JAVA8新特性学习","date":"2018-03-11T14:14:14.000Z","_content":"\n### Lambda表达式\n>lambda简称闭包，类似Groovy，Scala等的函数式编程，即将函数作为方法的参数。\n> 一个简单的Lambda表达式由逗号分隔开的参数列表、-> 及函数体组成\n\n<!-- more -->\n例如：\n```\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> System.out.println(str));\n```\n同：（其中str的类型是由编译器推断出来的。可省略）\n```\nstrList.forEach((String str)-> System.out.println(str));\n```\n如果 **->** 后有多条语句，则需要将代码块放在 **{}** 中，即函数体中的代码块。\n\n```\nstrList.forEach(str -> {\n\tSystem.out.println(\"输出\");\n\tSystem.out.println(str);\n});\n```\n#### Lambda可以引用成员变量和局部变量，但是他们会隐含的被 **final** 修饰。\n\n```\nString separator = \",\";\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> {\n\tSystem.out.println(str + separator);\n});\n```\n同：\n```\nfinal String separator = \",\";\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> {\n\tSystem.out.println(str + separator);\n});\n```\n#### Lambda返回值\n如果函数体中只有一条语句，则无需写**return**语句，例如：\n\n```\nList<String> list2 = Arrays.asList(\"a\", \"b\", \"c\");\nlist2.sort((e1, e2) -> e1.compareTo(e2));\n```\n同：\n\n```\n list2.sort((e1, e2) -> {\n\tint compare = e1.compareTo(e2);\n\treturn compare;\n});\n```\n### 函数式接口（**Functional Interface**）\n* 什么样的才算是函数式接口呢？ \n> 首先定义**一个接口**\n> 接口中定义 **有且仅有一个** 抽象方法\n\n例如：\n\n```\npublic interface FunctionalDemo {\n\t// 抽象方法\n\tint add(int a, int b);\n}\n```\n使用：\n\n```\npublic static void main(String[] args) {\n\t// Java8之前是用匿名函数来实现的。\n       FunctionalDemo methods = (a, b) -> {\n            return a + b;\n       };\n       int sum = methods.add(1, 2);\n       System.out.println(sum);\n }\n```\n函数式接口在实际应用中容易出错，当其他开发人员在你的函数式接口中添加了其他抽象方法，此时这个接口就不再是函数式接口了。如何避免这种事情的发生呢？在声明的函数式接口上添加注解 ***@FunctionalInterface***。添加注解后如果添加其他抽象方法则编译器报错。\n![!在这里插入图片描述\\](https://img-blog.csdnimg.cn/20181204132900553.png)](https://img-blog.csdnimg.cn/2018120413311650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)在上述描述中多次提到抽象方法，主要是因为函数式接口中允许添加 \n\n1. 默认方法，默认方法不是抽象方法。\n2. 静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。\n3. 重写Object中的Public方法重写Object中的Public方法。\n\n```\n@FunctionalInterface\npublic interface FunctionalDemo {\n\n\tint add(int a, int b);\n    \n\t/** 默认方法 */\n\tdefault void defaultMethod() {\n\t\tSystem.out.println(\"default method 1\");\n\t}\n\tdefault void defaultMethod2(String message) {\n\t\tSystem.out.println(message + \"：default method 2 \");\n\t}\n\t// 静态方法\t\n\tstatic void printMessage(String message) {\n\t\tSystem.out.println(message);\n\t}\n\t// 重写Object中的方法。\n\t@Override\n\tpublic int hashCode();\n\n\tpublic boolean equals(Object obj);\n}\n```\n使用：\n\n```\npublic static void main(String[] args) {\n        FunctionalDemo methods = (a, b) -> {\n            return a + b;\n        };\n        int sum = methods.add(1, 2);\n        System.out.println(sum);\n\n        // 调用默认方法\n        methods.defaultMethod();\n        methods.defaultMethod2(\"默认方法加参数\");\n        // 静态方法\n        FunctionalDemo.printMessage(\"静态方法\");\n}\n```\n结果：\n\n```\n3\ndefault method 1\n默认方法加参数：default method 2 \n静态方法**\n```\nJDK中的栗子：\n\n```\njava.lang.Runnable,\n\njava.util.Comparator,\n\njava.util.concurrent.Callable\n```\n\n#### 接口的默认方法\nJava8之后允许在接口中添加默认方法，默认方法不需要实现，如果有需要则可以覆盖默认方法，而抽象方法必须要实现。\n\n接口\n```\npublic interface Function {\n    // 抽象方法\n    void required();\n    \n    // 默认方法\n    default void notRequired() {\n        // 函数体\n    }\n}\n```\n实现类\n```\npublic class FunctionalImpl implements Function {\n\n    @Override\n    public void required() {\n        System.out.println(\"interface abstract method must override\");\n    }\n\n    @Override\n    public void notRequired() {\n        System.out.println(\"interface default method not required\");\n    }\n}\n\n```\n使用：\n\n```\n public static void main(String[] args) {\n\t Function function = FunctionalFactory.crate(FunctionalImpl::new);\n        function.required();\n        function.notRequired();\n}\n```\n运行结果：\n\n```\ninterface abstract method must override\ninterface default method not required\n```\n思考：怎么优雅的使用默认方法呢？\n> 尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误\n\n#### 方法引用\n> 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。\n\n例如：\n```\npublic class Person {\n\n    /**\n     * 构造器引用\n     * @param supplier 该引用接收一个空构造参数\n     * @return\n     */\n    public static Person constructMethod(final Supplier<Person> supplier) {\n        System.out.println(\"构造器引用, 语法是：Class::new， 构造器无参\");\n        return supplier.get();\n    }\n\n    /**\n     * 静态方法引用\n     * @param person 该引用接收一个Person参数\n     */\n    public static void staticMethod(Person person) {\n        System.out.println(\"构造器引用，语法是Class::static_method, 接收到的person：\" + person.toString());\n    }\n\n    /**\n     * 特定方法的引用\n     * @param person 该引用接收一个Person参数\n     */\n    public void instanceMethod(Person person) {\n        System.out.println(\"特定对象的方法引用，语法是：Class::method, 接收到的person: \" + person.toString());\n    }\n\n    /**\n     * 任意方法的引用\n     * 注意：无参\n     */\n    public void otherMethod() {\n        System.out.println(\"任意对象的方法引用，语法是：Class::method， 无参\" + this.toString());\n    }\n\n}\n```\n使用：\n\n```\npublic class LambdaTest {\n\n    public static void main(String[] args) {\n        // 构造器引入\n        Person person = Person.constructMethod(Person::new);\n\n        List<Person> list = new ArrayList<>(Arrays.asList(person));\n\n        // 静态方法引入\n        list.forEach(Person::staticMethod);\n\n        list.forEach(person::instanceMethod);\n\n        list.forEach(Person::otherMethod);\n    }\n\n}\n\n```\n运行结果\n```\n构造器引用, 语法是：Class::new， 构造器无参\n构造器引用，语法是Class::static_method, 接收到的person：domain.Person@d70c109\n特定对象的方法引用，语法是：Class::method, 接收到的person: domain.Person@d70c109\n任意对象的方法引用，语法是：Class::method， 无参domain.Person@d70c109\n```\n### Optional [官方文档](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)\n> 优雅的判断 ***null***， 不再进行 ***if（obj == null） {......}***\n\n####  慎重使用以下方式：\n>    调用 isPresent() 方法时\n>    调用 get() 方法时\n>    Optional 类型作为类/实例属性时\n>    Optional 类型作为方法参数时\n\n```\nUser user = new User();\nOptional<User> optional = Optional.ofNullable(user); \nif (optional.isPresent()) {\n\tUser u = optional.get();\n}\n```\n上面代码跟以前写的null判断有什么区别呢？\n\n```\nUser user = new User();\nif (user != null) {\n\tSystem.out.println(user.getName());\n}\n```\n如何优雅的使用Optional呢？\n\nOptional中的方法\n\n```\n    public<U> Optional<U> map(Function<? super T, ? extends U> mapper)\n    public T orElse(T other)\n    public T orElseGet(Supplier<? extends T> other)\n    public void ifPresent(Consumer<? super T> consumer)\n    public Optional<T> filter(Predicate<? super T> predicate)\n    public<U> Optional<U> flatMap(Function<? super T, Optional<U>> mapper)\n    public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X\n```\n\n例如：\n```\nUser zs = new User(\"zs\", 23, new ArrayList<>(\"篮球\", \"旅行\"));   \nOptional.of(zs).map(user -> user.getName()).map(name -> name.toUpperCase()).orElse(null);\n```\n\n### Stream\n\n```\npublic class Streams {\n\n    private enum Status{\n        OPEN, CLOSED\n    }\n\n    private final static class Task {\n        private Status status;\n        private Integer points;\n\n        Task(final Status status, final Integer points) {\n            this.status  =status;\n            this.points = points;\n        }\n\n        public Status getStatus() {\n            return status;\n        }\n\n        public Integer getPoints() {\n            return points;\n        }\n    }\n\n\n    public static void main(String[] args) {\n        Collection<Task> tasks = Arrays.asList(\n            new Task(Status.OPEN, 5),\n            new Task(Status.OPEN, 13),\n            new Task(Status.CLOSED, 8)\n        );\n\n        // 所有OPEN的总points\n        Integer openSum =\n                tasks.stream()          // 将集合转化为stream\n                .filter(task -> task.getStatus() == Status.OPEN)   // 过滤掉CLOSED的选项\n                .mapToInt(Task::getPoints)      // mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream\n                .sum();         // 用sum函数把所有的分数加起来\n        System.out.println(\" OPEN points \" + openSum);\n\n\n        Integer totalPoints = tasks.stream()\n                .parallel()                 // 并行操作\n                .map(Task::getPoints)\n                .reduce(0, Integer::sum);\n        System.out.println(\"total points \" + totalPoints);\n\n        // 按某属性分组\n        Map<Status, List<Task>> group =\n                tasks.stream().collect(Collectors.groupingBy(Task::getStatus));\n        System.out.println(\"group by status: \" + group);\n\n        // 计算元素的权重\n        final Collection< String > result = tasks\n                .stream()                                        // Stream< String >\n                .mapToInt( Task::getPoints )                     // IntStream\n                .asLongStream()                                  // LongStream\n                .mapToDouble( points -> points / totalPoints )   // DoubleStream\n                .boxed()                                         // Stream< Double >\n                .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n                .mapToObj( percentage -> percentage + \"%\" )      // Stream< String>\n                .collect( Collectors.toList() );                 // List< String >\n        System.out.println(\"权重为：\" + result);\n\n\n    }\n}\n\n```\n\n#### Time\n\n```\npublic class DateUtil {\n    public static final String DATE_FORMAT_FULL = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DATE_FORMAT_SHORT = \"yyyy-MM-dd\";\n    public static final String DATE_FORMAT_COMPACT = \"yyyyMMdd\";\n    public static final String DATE_FORMAT_COMPACTFULL = \"yyyyMMddHHmmss\";\n    public static final String DATE_FORMAT_FULL_MSEL = \"yyyyMMddHHmmssSSSS\";\n    public static final String DATE_YEAR_MONTH = \"yyyyMM\";\n    public static final String DATE_FORMAT_FULL_MSE = \"yyyyMMddHHmmssSSS\";\n\n    /**\n     * 获取系统当前日期\n     *\n     * @return\n     */\n    public static Date getCurrentDate() {\n        return new Date();\n    }\n\n    /**\n     * 获取系统当前日期\n     *\n     * @return\n     */\n    public static LocalDateTime getCurrentLocalDateTime() {\n        return LocalDateTime.now();\n    }\n\n    /**\n     * 根据时间格式返回对应的String类型的时间\n     *\n     * @param format\n     * @return\n     */\n    public static String getCurDateTime(String format) {\n        LocalDateTime now = LocalDateTime.now();\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        String dataTime = now.format(dateTimeFormatter);\n        return dataTime;\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyy-MM-dd HH:mm:ss格式\n     * @author kevin\n     */\n    public static String getCurDateTimeFull() {\n        return getCurDateTime(DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyyMMddHHmmss格式\n     * @author kevin\n     */\n    public static String getCurDateTime1() {\n        return getCurDateTime(DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 得到当前日期YYYYMM格式\n     *\n     * @return String 当前日期 yyyyMM格式\n     * @author kevin\n     */\n    public static String getCurDateYYYYMM() {\n        return getCurDateTime(DATE_YEAR_MONTH);\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyyMMdd格式\n     * @author kevin\n     */\n    public static String getCurDateYYYYMMDD() {\n        return getCurDateTime(DATE_FORMAT_COMPACT);\n    }\n\n    /**\n     * 判断是否是今天\n     *\n     * @param strDate\n     * @return\n     */\n    public static boolean isCurrentDay(String strDate) {\n        boolean bRet = false;\n        LocalDate strLocalDate = LocalDate.parse(strDate);\n        if (LocalDate.now().getYear() == strLocalDate.getYear()) {\n            MonthDay monthDay = MonthDay.from(strLocalDate);\n            MonthDay today = MonthDay.from(LocalDate.now());\n            return monthDay.equals(today);\n        }\n        return bRet;\n    }\n\n    /**\n     * 获取几小时后的时间\n     *\n     * @param hour\n     * @param format\n     * @return\n     */\n    public static String getAfterDateTime(int hour, String format) {\n        LocalTime localTime = LocalTime.now().plusHours(hour);\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        String dataTime = localTime.format(dateTimeFormatter);\n        return dataTime;\n    }\n\n\n    /**\n     * 当前日期时间戳(yyyyMMddHHmmssSSSS)\n     *\n     * @return\n     * @author liangxuekai\n     */\n    public static String getTimeStamp() {\n        LocalDateTime now = LocalDateTime.now();\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_FULL_MSEL);\n        return now.format(dateTimeFormatter);\n    }\n\n    /**\n     * 日期转字符串\n     *\n     * @return String\n     * @author kevin\n     */\n    public static String parseDateToString(Date thedate, String format) {\n        if (thedate != null) {\n            Instant instant = thedate.toInstant();\n            ZoneId zone = ZoneId.systemDefault();\n            LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);\n            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            return localDateTime.format(dateTimeFormatter);\n        }\n        return null;\n    }\n\n    /**\n     * parseDateToString(Date thedate, String format)的重载方法\n     *\n     * @param thedate\n     * @return\n     */\n    public static String parseDateToString(Date thedate) {\n        // String format = \"yyyy-MM-dd\";\n        return parseDateToString(thedate, DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 字符串转日期\n     *\n     * @return Date\n     * @author kevin\n     */\n    public static Date parseStringToDate(String thedate, String format) {\n        DateFormat sdf = new SimpleDateFormat(format);\n        Date dd1 = null;\n        try {\n            dd1 = sdf.parse(thedate);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return dd1;\n    }\n\n    /**\n     * 由String型日期转成format形式String\n     *\n     * @param format1 原先格式\n     * @param format2 转化格式\n     * @return String\n     * @author kevin\n     */\n    public static String changeFormatDateString(String format1, String format2, String strDate) {\n        if (strDate == null)\n            return \"\";\n        if (strDate.length() >= format1.length() && format1.length() >= format2.length()) {\n            return parseDateToString(parseStringToDate(strDate, format1), format2);\n        }\n        return strDate;\n    }\n\n    /**\n     * 得到当前日期的前N天时间 yyyymmdd\n     *\n     * @param format\n     * @param day\n     * @return\n     */\n    public static String beforeNDaysDate(String format, int day) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        if (day > 0) {\n            return LocalDateTime.now().minusDays(day).format(dateTimeFormatter);\n        }\n        return null;\n    }\n\n    /**\n     * 获得N个月后的日期\n     * <p>\n     * theDate 日期\n     * <p>\n     * int month 月数\n     * <p>\n     * format 格式\n     */\n    public static String afterNMonthDate(String theDate, int month, String format) {\n\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusMonths(month)\n                .format(dateTimeFormatter);\n\n    }\n\n    /**\n     * 得到N天后的日期\n     *\n     * @param theDate 某日期\n     *                格式 yyyy-MM-dd\n     * @param nDayNum N天\n     * @return String N天后的日期\n     * @author kevin\n     */\n    public static String afterNDaysDate(String theDate, Integer nDayNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusDays(nDayNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N小时后的日期\n     *\n     * @param theDate  时间\n     * @param nHourNum N小时数\n     * @param format   时间格式\n     * @return\n     */\n    public static String afterNHoursDate(String theDate, Integer nHourNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusHours(nHourNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N分钟后的日期\n     *\n     * @param theDate\n     * @param nMinNum\n     * @param format\n     * @return\n     */\n    public static String afterNMinsDate(String theDate, Integer nMinNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusMinutes(nMinNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N秒后的日期\n     * @param theDate\n     * @param nSecNum\n     * @param format\n     * @return\n     */\n    public static String afterNSecondsDate(String theDate, Integer nSecNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusSeconds(nSecNum)\n                .format(dateTimeFormatter);\n    }\n\n    // 比较两个字符串格式日期大小,带格式的日期\n    public static boolean isBefore(String strdat1, String strdat2, String format) {\n        try {\n            Date dat1 = parseStringToDate(strdat1, format);\n            Date dat2 = parseStringToDate(strdat2, format);\n            return dat1.before(dat2);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    // 比较两个字符串格式日期大小,带格式的日期,返回int\n    public static long isBefore_int(String strdat1, String strdat2, String format) {\n        long result = 0;\n        try {\n            Date dat1 = parseStringToDate(strdat1, format);\n            Date dat2 = parseStringToDate(strdat2, format);\n            return dat2.getTime() - dat1.getTime();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    /*\n     * 得到上一个月或者下一个月的日期\n     */\n    public static String getDayafterMonth(String theDate, int month, String formatStr) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(formatStr);\n        return LocalDateTime.parse(theDate).plusMonths(month).format(dateTimeFormatter);\n    }\n\n    /**\n     * 将秒转换为小时分秒等\n     *\n     * @param sec\n     * @return\n     */\n    public String changeTime(int sec) {\n        String temp = \"\";\n        if (sec < 60) {\n            temp = \"\" + sec + \"秒\";\n        } else if (sec < 3600) {\n            temp = \"\" + sec / 60 + \"分\" + sec % 60 + \"秒\";\n        } else {\n            temp = \"\" + sec / 3600 + \"小时\" + (sec % 3600) / 60 + \"分\" + sec % 60 + \"秒\";\n        }\n        return temp;\n    }\n\n    /**\n     * 方法描述:\n     * 计算两个日期相差天数\n     *\n     * @param end   结束日期\n     * @param start 开始日期\n     * @return 作者：liangxuekai\n     * 日期：2018 2018年1月31日\n     */\n    public static int getSubDays(String end, String start) {\n        LocalDate startDate = LocalDate.parse(start);\n        LocalDate endDate = LocalDate.parse(end);\n        Long between = ChronoUnit.DAYS.between(startDate, endDate);\n        return between.intValue();\n    }\n\n\n    public static String getTimeDiff(Date time1, Date time2) throws Exception {\n        long l = time1.getTime() - time2.getTime();\n        String returnStr = \"\";\n        long day = l / (24 * 60 * 60 * 1000);\n        if (day > 0) {\n            returnStr += (day + \"天\");\n        }\n        long hour = (l / (60 * 60 * 1000) - day * 24);\n        if (hour > 0) {\n            returnStr += (hour + \"小时\");\n        }\n        long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);\n        if (min > 0) {\n            returnStr += (min + \"分\");\n        }\n        long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);\n        if (s > 0) {\n            returnStr += (s + \"秒\");\n        }\n        return returnStr;\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 参考文章：\n\n#### Java 8新特性终极指南  [http://www.importnew.com/11908.html](http://www.importnew.com/11908.html)\n\n#### 优雅的使用Optional  [https://blog.csdn.net/zhang89xiao/article/details/76596046](https://blog.csdn.net/zhang89xiao/article/details/76596046)\n\n#### 深入浅出Stream和parallelStream[https://blog.csdn.net/darrensty/article/details/79283146](https://blog.csdn.net/darrensty/article/details/79283146)\n\n#### java8时间工具类[https://www.jianshu.com/p/6261f4162cfe](https://www.jianshu.com/p/6261f4162cfe)\n","source":"_posts/JAVA8新特性学习.md","raw":"---\ntitle: JAVA8新特性学习\ncategories: Java\ntags: java\ndate: 2018-03-11 22:14:14\n---\n\n### Lambda表达式\n>lambda简称闭包，类似Groovy，Scala等的函数式编程，即将函数作为方法的参数。\n> 一个简单的Lambda表达式由逗号分隔开的参数列表、-> 及函数体组成\n\n<!-- more -->\n例如：\n```\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> System.out.println(str));\n```\n同：（其中str的类型是由编译器推断出来的。可省略）\n```\nstrList.forEach((String str)-> System.out.println(str));\n```\n如果 **->** 后有多条语句，则需要将代码块放在 **{}** 中，即函数体中的代码块。\n\n```\nstrList.forEach(str -> {\n\tSystem.out.println(\"输出\");\n\tSystem.out.println(str);\n});\n```\n#### Lambda可以引用成员变量和局部变量，但是他们会隐含的被 **final** 修饰。\n\n```\nString separator = \",\";\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> {\n\tSystem.out.println(str + separator);\n});\n```\n同：\n```\nfinal String separator = \",\";\nList<String> strList = Arrays.asList(\"a\", \"b\", \"c\");\nstrList.forEach(str -> {\n\tSystem.out.println(str + separator);\n});\n```\n#### Lambda返回值\n如果函数体中只有一条语句，则无需写**return**语句，例如：\n\n```\nList<String> list2 = Arrays.asList(\"a\", \"b\", \"c\");\nlist2.sort((e1, e2) -> e1.compareTo(e2));\n```\n同：\n\n```\n list2.sort((e1, e2) -> {\n\tint compare = e1.compareTo(e2);\n\treturn compare;\n});\n```\n### 函数式接口（**Functional Interface**）\n* 什么样的才算是函数式接口呢？ \n> 首先定义**一个接口**\n> 接口中定义 **有且仅有一个** 抽象方法\n\n例如：\n\n```\npublic interface FunctionalDemo {\n\t// 抽象方法\n\tint add(int a, int b);\n}\n```\n使用：\n\n```\npublic static void main(String[] args) {\n\t// Java8之前是用匿名函数来实现的。\n       FunctionalDemo methods = (a, b) -> {\n            return a + b;\n       };\n       int sum = methods.add(1, 2);\n       System.out.println(sum);\n }\n```\n函数式接口在实际应用中容易出错，当其他开发人员在你的函数式接口中添加了其他抽象方法，此时这个接口就不再是函数式接口了。如何避免这种事情的发生呢？在声明的函数式接口上添加注解 ***@FunctionalInterface***。添加注解后如果添加其他抽象方法则编译器报错。\n![!在这里插入图片描述\\](https://img-blog.csdnimg.cn/20181204132900553.png)](https://img-blog.csdnimg.cn/2018120413311650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)在上述描述中多次提到抽象方法，主要是因为函数式接口中允许添加 \n\n1. 默认方法，默认方法不是抽象方法。\n2. 静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。\n3. 重写Object中的Public方法重写Object中的Public方法。\n\n```\n@FunctionalInterface\npublic interface FunctionalDemo {\n\n\tint add(int a, int b);\n    \n\t/** 默认方法 */\n\tdefault void defaultMethod() {\n\t\tSystem.out.println(\"default method 1\");\n\t}\n\tdefault void defaultMethod2(String message) {\n\t\tSystem.out.println(message + \"：default method 2 \");\n\t}\n\t// 静态方法\t\n\tstatic void printMessage(String message) {\n\t\tSystem.out.println(message);\n\t}\n\t// 重写Object中的方法。\n\t@Override\n\tpublic int hashCode();\n\n\tpublic boolean equals(Object obj);\n}\n```\n使用：\n\n```\npublic static void main(String[] args) {\n        FunctionalDemo methods = (a, b) -> {\n            return a + b;\n        };\n        int sum = methods.add(1, 2);\n        System.out.println(sum);\n\n        // 调用默认方法\n        methods.defaultMethod();\n        methods.defaultMethod2(\"默认方法加参数\");\n        // 静态方法\n        FunctionalDemo.printMessage(\"静态方法\");\n}\n```\n结果：\n\n```\n3\ndefault method 1\n默认方法加参数：default method 2 \n静态方法**\n```\nJDK中的栗子：\n\n```\njava.lang.Runnable,\n\njava.util.Comparator,\n\njava.util.concurrent.Callable\n```\n\n#### 接口的默认方法\nJava8之后允许在接口中添加默认方法，默认方法不需要实现，如果有需要则可以覆盖默认方法，而抽象方法必须要实现。\n\n接口\n```\npublic interface Function {\n    // 抽象方法\n    void required();\n    \n    // 默认方法\n    default void notRequired() {\n        // 函数体\n    }\n}\n```\n实现类\n```\npublic class FunctionalImpl implements Function {\n\n    @Override\n    public void required() {\n        System.out.println(\"interface abstract method must override\");\n    }\n\n    @Override\n    public void notRequired() {\n        System.out.println(\"interface default method not required\");\n    }\n}\n\n```\n使用：\n\n```\n public static void main(String[] args) {\n\t Function function = FunctionalFactory.crate(FunctionalImpl::new);\n        function.required();\n        function.notRequired();\n}\n```\n运行结果：\n\n```\ninterface abstract method must override\ninterface default method not required\n```\n思考：怎么优雅的使用默认方法呢？\n> 尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误\n\n#### 方法引用\n> 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。\n\n例如：\n```\npublic class Person {\n\n    /**\n     * 构造器引用\n     * @param supplier 该引用接收一个空构造参数\n     * @return\n     */\n    public static Person constructMethod(final Supplier<Person> supplier) {\n        System.out.println(\"构造器引用, 语法是：Class::new， 构造器无参\");\n        return supplier.get();\n    }\n\n    /**\n     * 静态方法引用\n     * @param person 该引用接收一个Person参数\n     */\n    public static void staticMethod(Person person) {\n        System.out.println(\"构造器引用，语法是Class::static_method, 接收到的person：\" + person.toString());\n    }\n\n    /**\n     * 特定方法的引用\n     * @param person 该引用接收一个Person参数\n     */\n    public void instanceMethod(Person person) {\n        System.out.println(\"特定对象的方法引用，语法是：Class::method, 接收到的person: \" + person.toString());\n    }\n\n    /**\n     * 任意方法的引用\n     * 注意：无参\n     */\n    public void otherMethod() {\n        System.out.println(\"任意对象的方法引用，语法是：Class::method， 无参\" + this.toString());\n    }\n\n}\n```\n使用：\n\n```\npublic class LambdaTest {\n\n    public static void main(String[] args) {\n        // 构造器引入\n        Person person = Person.constructMethod(Person::new);\n\n        List<Person> list = new ArrayList<>(Arrays.asList(person));\n\n        // 静态方法引入\n        list.forEach(Person::staticMethod);\n\n        list.forEach(person::instanceMethod);\n\n        list.forEach(Person::otherMethod);\n    }\n\n}\n\n```\n运行结果\n```\n构造器引用, 语法是：Class::new， 构造器无参\n构造器引用，语法是Class::static_method, 接收到的person：domain.Person@d70c109\n特定对象的方法引用，语法是：Class::method, 接收到的person: domain.Person@d70c109\n任意对象的方法引用，语法是：Class::method， 无参domain.Person@d70c109\n```\n### Optional [官方文档](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)\n> 优雅的判断 ***null***， 不再进行 ***if（obj == null） {......}***\n\n####  慎重使用以下方式：\n>    调用 isPresent() 方法时\n>    调用 get() 方法时\n>    Optional 类型作为类/实例属性时\n>    Optional 类型作为方法参数时\n\n```\nUser user = new User();\nOptional<User> optional = Optional.ofNullable(user); \nif (optional.isPresent()) {\n\tUser u = optional.get();\n}\n```\n上面代码跟以前写的null判断有什么区别呢？\n\n```\nUser user = new User();\nif (user != null) {\n\tSystem.out.println(user.getName());\n}\n```\n如何优雅的使用Optional呢？\n\nOptional中的方法\n\n```\n    public<U> Optional<U> map(Function<? super T, ? extends U> mapper)\n    public T orElse(T other)\n    public T orElseGet(Supplier<? extends T> other)\n    public void ifPresent(Consumer<? super T> consumer)\n    public Optional<T> filter(Predicate<? super T> predicate)\n    public<U> Optional<U> flatMap(Function<? super T, Optional<U>> mapper)\n    public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X\n```\n\n例如：\n```\nUser zs = new User(\"zs\", 23, new ArrayList<>(\"篮球\", \"旅行\"));   \nOptional.of(zs).map(user -> user.getName()).map(name -> name.toUpperCase()).orElse(null);\n```\n\n### Stream\n\n```\npublic class Streams {\n\n    private enum Status{\n        OPEN, CLOSED\n    }\n\n    private final static class Task {\n        private Status status;\n        private Integer points;\n\n        Task(final Status status, final Integer points) {\n            this.status  =status;\n            this.points = points;\n        }\n\n        public Status getStatus() {\n            return status;\n        }\n\n        public Integer getPoints() {\n            return points;\n        }\n    }\n\n\n    public static void main(String[] args) {\n        Collection<Task> tasks = Arrays.asList(\n            new Task(Status.OPEN, 5),\n            new Task(Status.OPEN, 13),\n            new Task(Status.CLOSED, 8)\n        );\n\n        // 所有OPEN的总points\n        Integer openSum =\n                tasks.stream()          // 将集合转化为stream\n                .filter(task -> task.getStatus() == Status.OPEN)   // 过滤掉CLOSED的选项\n                .mapToInt(Task::getPoints)      // mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream\n                .sum();         // 用sum函数把所有的分数加起来\n        System.out.println(\" OPEN points \" + openSum);\n\n\n        Integer totalPoints = tasks.stream()\n                .parallel()                 // 并行操作\n                .map(Task::getPoints)\n                .reduce(0, Integer::sum);\n        System.out.println(\"total points \" + totalPoints);\n\n        // 按某属性分组\n        Map<Status, List<Task>> group =\n                tasks.stream().collect(Collectors.groupingBy(Task::getStatus));\n        System.out.println(\"group by status: \" + group);\n\n        // 计算元素的权重\n        final Collection< String > result = tasks\n                .stream()                                        // Stream< String >\n                .mapToInt( Task::getPoints )                     // IntStream\n                .asLongStream()                                  // LongStream\n                .mapToDouble( points -> points / totalPoints )   // DoubleStream\n                .boxed()                                         // Stream< Double >\n                .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n                .mapToObj( percentage -> percentage + \"%\" )      // Stream< String>\n                .collect( Collectors.toList() );                 // List< String >\n        System.out.println(\"权重为：\" + result);\n\n\n    }\n}\n\n```\n\n#### Time\n\n```\npublic class DateUtil {\n    public static final String DATE_FORMAT_FULL = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DATE_FORMAT_SHORT = \"yyyy-MM-dd\";\n    public static final String DATE_FORMAT_COMPACT = \"yyyyMMdd\";\n    public static final String DATE_FORMAT_COMPACTFULL = \"yyyyMMddHHmmss\";\n    public static final String DATE_FORMAT_FULL_MSEL = \"yyyyMMddHHmmssSSSS\";\n    public static final String DATE_YEAR_MONTH = \"yyyyMM\";\n    public static final String DATE_FORMAT_FULL_MSE = \"yyyyMMddHHmmssSSS\";\n\n    /**\n     * 获取系统当前日期\n     *\n     * @return\n     */\n    public static Date getCurrentDate() {\n        return new Date();\n    }\n\n    /**\n     * 获取系统当前日期\n     *\n     * @return\n     */\n    public static LocalDateTime getCurrentLocalDateTime() {\n        return LocalDateTime.now();\n    }\n\n    /**\n     * 根据时间格式返回对应的String类型的时间\n     *\n     * @param format\n     * @return\n     */\n    public static String getCurDateTime(String format) {\n        LocalDateTime now = LocalDateTime.now();\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        String dataTime = now.format(dateTimeFormatter);\n        return dataTime;\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyy-MM-dd HH:mm:ss格式\n     * @author kevin\n     */\n    public static String getCurDateTimeFull() {\n        return getCurDateTime(DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyyMMddHHmmss格式\n     * @author kevin\n     */\n    public static String getCurDateTime1() {\n        return getCurDateTime(DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 得到当前日期YYYYMM格式\n     *\n     * @return String 当前日期 yyyyMM格式\n     * @author kevin\n     */\n    public static String getCurDateYYYYMM() {\n        return getCurDateTime(DATE_YEAR_MONTH);\n    }\n\n    /**\n     * 得到当前日期\n     *\n     * @return String 当前日期 yyyyMMdd格式\n     * @author kevin\n     */\n    public static String getCurDateYYYYMMDD() {\n        return getCurDateTime(DATE_FORMAT_COMPACT);\n    }\n\n    /**\n     * 判断是否是今天\n     *\n     * @param strDate\n     * @return\n     */\n    public static boolean isCurrentDay(String strDate) {\n        boolean bRet = false;\n        LocalDate strLocalDate = LocalDate.parse(strDate);\n        if (LocalDate.now().getYear() == strLocalDate.getYear()) {\n            MonthDay monthDay = MonthDay.from(strLocalDate);\n            MonthDay today = MonthDay.from(LocalDate.now());\n            return monthDay.equals(today);\n        }\n        return bRet;\n    }\n\n    /**\n     * 获取几小时后的时间\n     *\n     * @param hour\n     * @param format\n     * @return\n     */\n    public static String getAfterDateTime(int hour, String format) {\n        LocalTime localTime = LocalTime.now().plusHours(hour);\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        String dataTime = localTime.format(dateTimeFormatter);\n        return dataTime;\n    }\n\n\n    /**\n     * 当前日期时间戳(yyyyMMddHHmmssSSSS)\n     *\n     * @return\n     * @author liangxuekai\n     */\n    public static String getTimeStamp() {\n        LocalDateTime now = LocalDateTime.now();\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_FULL_MSEL);\n        return now.format(dateTimeFormatter);\n    }\n\n    /**\n     * 日期转字符串\n     *\n     * @return String\n     * @author kevin\n     */\n    public static String parseDateToString(Date thedate, String format) {\n        if (thedate != null) {\n            Instant instant = thedate.toInstant();\n            ZoneId zone = ZoneId.systemDefault();\n            LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);\n            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            return localDateTime.format(dateTimeFormatter);\n        }\n        return null;\n    }\n\n    /**\n     * parseDateToString(Date thedate, String format)的重载方法\n     *\n     * @param thedate\n     * @return\n     */\n    public static String parseDateToString(Date thedate) {\n        // String format = \"yyyy-MM-dd\";\n        return parseDateToString(thedate, DATE_FORMAT_FULL);\n    }\n\n    /**\n     * 字符串转日期\n     *\n     * @return Date\n     * @author kevin\n     */\n    public static Date parseStringToDate(String thedate, String format) {\n        DateFormat sdf = new SimpleDateFormat(format);\n        Date dd1 = null;\n        try {\n            dd1 = sdf.parse(thedate);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return dd1;\n    }\n\n    /**\n     * 由String型日期转成format形式String\n     *\n     * @param format1 原先格式\n     * @param format2 转化格式\n     * @return String\n     * @author kevin\n     */\n    public static String changeFormatDateString(String format1, String format2, String strDate) {\n        if (strDate == null)\n            return \"\";\n        if (strDate.length() >= format1.length() && format1.length() >= format2.length()) {\n            return parseDateToString(parseStringToDate(strDate, format1), format2);\n        }\n        return strDate;\n    }\n\n    /**\n     * 得到当前日期的前N天时间 yyyymmdd\n     *\n     * @param format\n     * @param day\n     * @return\n     */\n    public static String beforeNDaysDate(String format, int day) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        if (day > 0) {\n            return LocalDateTime.now().minusDays(day).format(dateTimeFormatter);\n        }\n        return null;\n    }\n\n    /**\n     * 获得N个月后的日期\n     * <p>\n     * theDate 日期\n     * <p>\n     * int month 月数\n     * <p>\n     * format 格式\n     */\n    public static String afterNMonthDate(String theDate, int month, String format) {\n\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusMonths(month)\n                .format(dateTimeFormatter);\n\n    }\n\n    /**\n     * 得到N天后的日期\n     *\n     * @param theDate 某日期\n     *                格式 yyyy-MM-dd\n     * @param nDayNum N天\n     * @return String N天后的日期\n     * @author kevin\n     */\n    public static String afterNDaysDate(String theDate, Integer nDayNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusDays(nDayNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N小时后的日期\n     *\n     * @param theDate  时间\n     * @param nHourNum N小时数\n     * @param format   时间格式\n     * @return\n     */\n    public static String afterNHoursDate(String theDate, Integer nHourNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusHours(nHourNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N分钟后的日期\n     *\n     * @param theDate\n     * @param nMinNum\n     * @param format\n     * @return\n     */\n    public static String afterNMinsDate(String theDate, Integer nMinNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusMinutes(nMinNum)\n                .format(dateTimeFormatter);\n    }\n\n    /**\n     * 得到N秒后的日期\n     * @param theDate\n     * @param nSecNum\n     * @param format\n     * @return\n     */\n    public static String afterNSecondsDate(String theDate, Integer nSecNum, String format) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        return LocalDateTime.parse(theDate,dateTimeFormatter)\n                .plusSeconds(nSecNum)\n                .format(dateTimeFormatter);\n    }\n\n    // 比较两个字符串格式日期大小,带格式的日期\n    public static boolean isBefore(String strdat1, String strdat2, String format) {\n        try {\n            Date dat1 = parseStringToDate(strdat1, format);\n            Date dat2 = parseStringToDate(strdat2, format);\n            return dat1.before(dat2);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    // 比较两个字符串格式日期大小,带格式的日期,返回int\n    public static long isBefore_int(String strdat1, String strdat2, String format) {\n        long result = 0;\n        try {\n            Date dat1 = parseStringToDate(strdat1, format);\n            Date dat2 = parseStringToDate(strdat2, format);\n            return dat2.getTime() - dat1.getTime();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    /*\n     * 得到上一个月或者下一个月的日期\n     */\n    public static String getDayafterMonth(String theDate, int month, String formatStr) {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(formatStr);\n        return LocalDateTime.parse(theDate).plusMonths(month).format(dateTimeFormatter);\n    }\n\n    /**\n     * 将秒转换为小时分秒等\n     *\n     * @param sec\n     * @return\n     */\n    public String changeTime(int sec) {\n        String temp = \"\";\n        if (sec < 60) {\n            temp = \"\" + sec + \"秒\";\n        } else if (sec < 3600) {\n            temp = \"\" + sec / 60 + \"分\" + sec % 60 + \"秒\";\n        } else {\n            temp = \"\" + sec / 3600 + \"小时\" + (sec % 3600) / 60 + \"分\" + sec % 60 + \"秒\";\n        }\n        return temp;\n    }\n\n    /**\n     * 方法描述:\n     * 计算两个日期相差天数\n     *\n     * @param end   结束日期\n     * @param start 开始日期\n     * @return 作者：liangxuekai\n     * 日期：2018 2018年1月31日\n     */\n    public static int getSubDays(String end, String start) {\n        LocalDate startDate = LocalDate.parse(start);\n        LocalDate endDate = LocalDate.parse(end);\n        Long between = ChronoUnit.DAYS.between(startDate, endDate);\n        return between.intValue();\n    }\n\n\n    public static String getTimeDiff(Date time1, Date time2) throws Exception {\n        long l = time1.getTime() - time2.getTime();\n        String returnStr = \"\";\n        long day = l / (24 * 60 * 60 * 1000);\n        if (day > 0) {\n            returnStr += (day + \"天\");\n        }\n        long hour = (l / (60 * 60 * 1000) - day * 24);\n        if (hour > 0) {\n            returnStr += (hour + \"小时\");\n        }\n        long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);\n        if (min > 0) {\n            returnStr += (min + \"分\");\n        }\n        long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);\n        if (s > 0) {\n            returnStr += (s + \"秒\");\n        }\n        return returnStr;\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 参考文章：\n\n#### Java 8新特性终极指南  [http://www.importnew.com/11908.html](http://www.importnew.com/11908.html)\n\n#### 优雅的使用Optional  [https://blog.csdn.net/zhang89xiao/article/details/76596046](https://blog.csdn.net/zhang89xiao/article/details/76596046)\n\n#### 深入浅出Stream和parallelStream[https://blog.csdn.net/darrensty/article/details/79283146](https://blog.csdn.net/darrensty/article/details/79283146)\n\n#### java8时间工具类[https://www.jianshu.com/p/6261f4162cfe](https://www.jianshu.com/p/6261f4162cfe)\n","slug":"JAVA8新特性学习","published":1,"updated":"2019-04-20T12:29:19.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xss000xvq6b32wp0mt4","content":"<h3 id=\"lambda表达式\">Lambda表达式</h3>\n<blockquote>\n<p>lambda简称闭包，类似Groovy，Scala等的函数式编程，即将函数作为方法的参数。<br>\n一个简单的Lambda表达式由逗号分隔开的参数列表、-&gt; 及函数体组成</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>\n<p>同：（其中str的类型是由编译器推断出来的。可省略）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strList.forEach((String str)-&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>\n<p>如果 <strong>-&gt;</strong> 后有多条语句，则需要将代码块放在 <strong>{}</strong> 中，即函数体中的代码块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;输出&quot;);</span><br><span class=\"line\">\tSystem.out.println(str);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"lambda可以引用成员变量和局部变量但是他们会隐含的被-final-修饰\">Lambda可以引用成员变量和局部变量，但是他们会隐含的被 <strong>final</strong> 修饰。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = &quot;,&quot;;</span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(str + separator);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String separator = &quot;,&quot;;</span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(str + separator);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"lambda返回值\">Lambda返回值</h4>\n<p>如果函数体中只有一条语句，则无需写<strong>return</strong>语句，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">list2.sort((e1, e2) -&gt; e1.compareTo(e2));</span><br></pre></td></tr></table></figure>\n<p>同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> list2.sort((e1, e2) -&gt; &#123;</span><br><span class=\"line\">\tint compare = e1.compareTo(e2);</span><br><span class=\"line\">\treturn compare;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口functional-interface\">函数式接口（<strong>Functional Interface</strong>）</h3>\n<ul>\n<li>什么样的才算是函数式接口呢？</li>\n</ul>\n<blockquote>\n<p>首先定义<strong>一个接口</strong><br>\n接口中定义 <strong>有且仅有一个</strong> 抽象方法</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface FunctionalDemo &#123;</span><br><span class=\"line\">\t// 抽象方法</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t// Java8之前是用匿名函数来实现的。</span><br><span class=\"line\">       FunctionalDemo methods = (a, b) -&gt; &#123;</span><br><span class=\"line\">            return a + b;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       int sum = methods.add(1, 2);</span><br><span class=\"line\">       System.out.println(sum);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>函数式接口在实际应用中容易出错，当其他开发人员在你的函数式接口中添加了其他抽象方法，此时这个接口就不再是函数式接口了。如何避免这种事情的发生呢？在声明的函数式接口上添加注解 <strong><em>@FunctionalInterface</em></strong>。添加注解后如果添加其他抽象方法则编译器报错。<br>\n<img src=\"https://img-blog.csdnimg.cn/2018120413311650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"!在这里插入图片描述](https://img-blog.csdnimg.cn/20181204132900553.png)\">在上述描述中多次提到抽象方法，主要是因为函数式接口中允许添加</p>\n<ol>\n<li>默认方法，默认方法不是抽象方法。</li>\n<li>静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。</li>\n<li>重写Object中的Public方法重写Object中的Public方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface FunctionalDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t/** 默认方法 */</span><br><span class=\"line\">\tdefault void defaultMethod() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;default method 1&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefault void defaultMethod2(String message) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(message + &quot;：default method 2 &quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 静态方法\t</span><br><span class=\"line\">\tstatic void printMessage(String message) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 重写Object中的方法。</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean equals(Object obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        FunctionalDemo methods = (a, b) -&gt; &#123;</span><br><span class=\"line\">            return a + b;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        int sum = methods.add(1, 2);</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 调用默认方法</span><br><span class=\"line\">        methods.defaultMethod();</span><br><span class=\"line\">        methods.defaultMethod2(&quot;默认方法加参数&quot;);</span><br><span class=\"line\">        // 静态方法</span><br><span class=\"line\">        FunctionalDemo.printMessage(&quot;静态方法&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">default method 1</span><br><span class=\"line\">默认方法加参数：default method 2 </span><br><span class=\"line\">静态方法**</span><br></pre></td></tr></table></figure>\n<p>JDK中的栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Runnable,</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.Comparator,</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.concurrent.Callable</span><br></pre></td></tr></table></figure>\n<h4 id=\"接口的默认方法\">接口的默认方法</h4>\n<p>Java8之后允许在接口中添加默认方法，默认方法不需要实现，如果有需要则可以覆盖默认方法，而抽象方法必须要实现。</p>\n<p>接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Function &#123;</span><br><span class=\"line\">    // 抽象方法</span><br><span class=\"line\">    void required();</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 默认方法</span><br><span class=\"line\">    default void notRequired() &#123;</span><br><span class=\"line\">        // 函数体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FunctionalImpl implements Function &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void required() &#123;</span><br><span class=\"line\">        System.out.println(&quot;interface abstract method must override&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notRequired() &#123;</span><br><span class=\"line\">        System.out.println(&quot;interface default method not required&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static void main(String[] args) &#123;</span><br><span class=\"line\">\t Function function = FunctionalFactory.crate(FunctionalImpl::new);</span><br><span class=\"line\">        function.required();</span><br><span class=\"line\">        function.notRequired();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface abstract method must override</span><br><span class=\"line\">interface default method not required</span><br></pre></td></tr></table></figure>\n<p>思考：怎么优雅的使用默认方法呢？</p>\n<blockquote>\n<p>尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误</p>\n</blockquote>\n<h4 id=\"方法引用\">方法引用</h4>\n<blockquote>\n<p>方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造器引用</span><br><span class=\"line\">     * @param supplier 该引用接收一个空构造参数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Person constructMethod(final Supplier&lt;Person&gt; supplier) &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造器引用, 语法是：Class::new， 构造器无参&quot;);</span><br><span class=\"line\">        return supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 静态方法引用</span><br><span class=\"line\">     * @param person 该引用接收一个Person参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void staticMethod(Person person) &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造器引用，语法是Class::static_method, 接收到的person：&quot; + person.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 特定方法的引用</span><br><span class=\"line\">     * @param person 该引用接收一个Person参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void instanceMethod(Person person) &#123;</span><br><span class=\"line\">        System.out.println(&quot;特定对象的方法引用，语法是：Class::method, 接收到的person: &quot; + person.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 任意方法的引用</span><br><span class=\"line\">     * 注意：无参</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void otherMethod() &#123;</span><br><span class=\"line\">        System.out.println(&quot;任意对象的方法引用，语法是：Class::method， 无参&quot; + this.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LambdaTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 构造器引入</span><br><span class=\"line\">        Person person = Person.constructMethod(Person::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; list = new ArrayList&lt;&gt;(Arrays.asList(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 静态方法引入</span><br><span class=\"line\">        list.forEach(Person::staticMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.forEach(person::instanceMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.forEach(Person::otherMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造器引用, 语法是：Class::new， 构造器无参</span><br><span class=\"line\">构造器引用，语法是Class::static_method, 接收到的person：domain.Person@d70c109</span><br><span class=\"line\">特定对象的方法引用，语法是：Class::method, 接收到的person: domain.Person@d70c109</span><br><span class=\"line\">任意对象的方法引用，语法是：Class::method， 无参domain.Person@d70c109</span><br></pre></td></tr></table></figure>\n<h3 id=\"optional-官方文档\">Optional <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></h3>\n<blockquote>\n<p>优雅的判断 <strong><em>null</em></strong>， 不再进行 <strong><em>if（obj == null） {…}</em></strong></p>\n</blockquote>\n<h4 id=\"慎重使用以下方式\">慎重使用以下方式：</h4>\n<blockquote>\n<p>调用 isPresent() 方法时<br>\n调用 get() 方法时<br>\nOptional 类型作为类/实例属性时<br>\nOptional 类型作为方法参数时</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User();</span><br><span class=\"line\">Optional&lt;User&gt; optional = Optional.ofNullable(user); </span><br><span class=\"line\">if (optional.isPresent()) &#123;</span><br><span class=\"line\">\tUser u = optional.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码跟以前写的null判断有什么区别呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User();</span><br><span class=\"line\">if (user != null) &#123;</span><br><span class=\"line\">\tSystem.out.println(user.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何优雅的使用Optional呢？</p>\n<p>Optional中的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</span><br><span class=\"line\">public T orElse(T other)</span><br><span class=\"line\">public T orElseGet(Supplier&lt;? extends T&gt; other)</span><br><span class=\"line\">public void ifPresent(Consumer&lt;? super T&gt; consumer)</span><br><span class=\"line\">public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span><br><span class=\"line\">public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</span><br><span class=\"line\">public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User zs = new User(&quot;zs&quot;, 23, new ArrayList&lt;&gt;(&quot;篮球&quot;, &quot;旅行&quot;));   </span><br><span class=\"line\">Optional.of(zs).map(user -&gt; user.getName()).map(name -&gt; name.toUpperCase()).orElse(null);</span><br></pre></td></tr></table></figure>\n<h3 id=\"stream\">Stream</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Streams &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private enum Status&#123;</span><br><span class=\"line\">        OPEN, CLOSED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final static class Task &#123;</span><br><span class=\"line\">        private Status status;</span><br><span class=\"line\">        private Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">        Task(final Status status, final Integer points) &#123;</span><br><span class=\"line\">            this.status  =status;</span><br><span class=\"line\">            this.points = points;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Status getStatus() &#123;</span><br><span class=\"line\">            return status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Integer getPoints() &#123;</span><br><span class=\"line\">            return points;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Collection&lt;Task&gt; tasks = Arrays.asList(</span><br><span class=\"line\">            new Task(Status.OPEN, 5),</span><br><span class=\"line\">            new Task(Status.OPEN, 13),</span><br><span class=\"line\">            new Task(Status.CLOSED, 8)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        // 所有OPEN的总points</span><br><span class=\"line\">        Integer openSum =</span><br><span class=\"line\">                tasks.stream()          // 将集合转化为stream</span><br><span class=\"line\">                .filter(task -&gt; task.getStatus() == Status.OPEN)   // 过滤掉CLOSED的选项</span><br><span class=\"line\">                .mapToInt(Task::getPoints)      // mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream</span><br><span class=\"line\">                .sum();         // 用sum函数把所有的分数加起来</span><br><span class=\"line\">        System.out.println(&quot; OPEN points &quot; + openSum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Integer totalPoints = tasks.stream()</span><br><span class=\"line\">                .parallel()                 // 并行操作</span><br><span class=\"line\">                .map(Task::getPoints)</span><br><span class=\"line\">                .reduce(0, Integer::sum);</span><br><span class=\"line\">        System.out.println(&quot;total points &quot; + totalPoints);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 按某属性分组</span><br><span class=\"line\">        Map&lt;Status, List&lt;Task&gt;&gt; group =</span><br><span class=\"line\">                tasks.stream().collect(Collectors.groupingBy(Task::getStatus));</span><br><span class=\"line\">        System.out.println(&quot;group by status: &quot; + group);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 计算元素的权重</span><br><span class=\"line\">        final Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">                .stream()                                        // Stream&lt; String &gt;</span><br><span class=\"line\">                .mapToInt( Task::getPoints )                     // IntStream</span><br><span class=\"line\">                .asLongStream()                                  // LongStream</span><br><span class=\"line\">                .mapToDouble( points -&gt; points / totalPoints )   // DoubleStream</span><br><span class=\"line\">                .boxed()                                         // Stream&lt; Double &gt;</span><br><span class=\"line\">                .mapToLong( weigth -&gt; ( long )( weigth * 100 ) ) // LongStream</span><br><span class=\"line\">                .mapToObj( percentage -&gt; percentage + &quot;%&quot; )      // Stream&lt; String&gt;</span><br><span class=\"line\">                .collect( Collectors.toList() );                 // List&lt; String &gt;</span><br><span class=\"line\">        System.out.println(&quot;权重为：&quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"time\">Time</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DateUtil &#123;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_SHORT = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_COMPACT = &quot;yyyyMMdd&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_COMPACTFULL = &quot;yyyyMMddHHmmss&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL_MSEL = &quot;yyyyMMddHHmmssSSSS&quot;;</span><br><span class=\"line\">    public static final String DATE_YEAR_MONTH = &quot;yyyyMM&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL_MSE = &quot;yyyyMMddHHmmssSSS&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取系统当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Date getCurrentDate() &#123;</span><br><span class=\"line\">        return new Date();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取系统当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static LocalDateTime getCurrentLocalDateTime() &#123;</span><br><span class=\"line\">        return LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据时间格式返回对应的String类型的时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTime(String format) &#123;</span><br><span class=\"line\">        LocalDateTime now = LocalDateTime.now();</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        String dataTime = now.format(dateTimeFormatter);</span><br><span class=\"line\">        return dataTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyy-MM-dd HH:mm:ss格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTimeFull() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMMddHHmmss格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTime1() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期YYYYMM格式</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMM格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateYYYYMM() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_YEAR_MONTH);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMMdd格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateYYYYMMDD() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_COMPACT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是今天</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param strDate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isCurrentDay(String strDate) &#123;</span><br><span class=\"line\">        boolean bRet = false;</span><br><span class=\"line\">        LocalDate strLocalDate = LocalDate.parse(strDate);</span><br><span class=\"line\">        if (LocalDate.now().getYear() == strLocalDate.getYear()) &#123;</span><br><span class=\"line\">            MonthDay monthDay = MonthDay.from(strLocalDate);</span><br><span class=\"line\">            MonthDay today = MonthDay.from(LocalDate.now());</span><br><span class=\"line\">            return monthDay.equals(today);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return bRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取几小时后的时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param hour</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getAfterDateTime(int hour, String format) &#123;</span><br><span class=\"line\">        LocalTime localTime = LocalTime.now().plusHours(hour);</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        String dataTime = localTime.format(dateTimeFormatter);</span><br><span class=\"line\">        return dataTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前日期时间戳(yyyyMMddHHmmssSSSS)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @author liangxuekai</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getTimeStamp() &#123;</span><br><span class=\"line\">        LocalDateTime now = LocalDateTime.now();</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_FULL_MSEL);</span><br><span class=\"line\">        return now.format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 日期转字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String parseDateToString(Date thedate, String format) &#123;</span><br><span class=\"line\">        if (thedate != null) &#123;</span><br><span class=\"line\">            Instant instant = thedate.toInstant();</span><br><span class=\"line\">            ZoneId zone = ZoneId.systemDefault();</span><br><span class=\"line\">            LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);</span><br><span class=\"line\">            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">            return localDateTime.format(dateTimeFormatter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * parseDateToString(Date thedate, String format)的重载方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param thedate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String parseDateToString(Date thedate) &#123;</span><br><span class=\"line\">        // String format = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\">        return parseDateToString(thedate, DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 字符串转日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Date</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Date parseStringToDate(String thedate, String format) &#123;</span><br><span class=\"line\">        DateFormat sdf = new SimpleDateFormat(format);</span><br><span class=\"line\">        Date dd1 = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            dd1 = sdf.parse(thedate);</span><br><span class=\"line\">        &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dd1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 由String型日期转成format形式String</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format1 原先格式</span><br><span class=\"line\">     * @param format2 转化格式</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String changeFormatDateString(String format1, String format2, String strDate) &#123;</span><br><span class=\"line\">        if (strDate == null)</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        if (strDate.length() &gt;= format1.length() &amp;&amp; format1.length() &gt;= format2.length()) &#123;</span><br><span class=\"line\">            return parseDateToString(parseStringToDate(strDate, format1), format2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return strDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期的前N天时间 yyyymmdd</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @param day</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String beforeNDaysDate(String format, int day) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        if (day &gt; 0) &#123;</span><br><span class=\"line\">            return LocalDateTime.now().minusDays(day).format(dateTimeFormatter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获得N个月后的日期</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * theDate 日期</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * int month 月数</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * format 格式</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNMonthDate(String theDate, int month, String format) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusMonths(month)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N天后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate 某日期</span><br><span class=\"line\">     *                格式 yyyy-MM-dd</span><br><span class=\"line\">     * @param nDayNum N天</span><br><span class=\"line\">     * @return String N天后的日期</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNDaysDate(String theDate, Integer nDayNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\"></span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusDays(nDayNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N小时后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate  时间</span><br><span class=\"line\">     * @param nHourNum N小时数</span><br><span class=\"line\">     * @param format   时间格式</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNHoursDate(String theDate, Integer nHourNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusHours(nHourNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N分钟后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate</span><br><span class=\"line\">     * @param nMinNum</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNMinsDate(String theDate, Integer nMinNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusMinutes(nMinNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N秒后的日期</span><br><span class=\"line\">     * @param theDate</span><br><span class=\"line\">     * @param nSecNum</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNSecondsDate(String theDate, Integer nSecNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusSeconds(nSecNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 比较两个字符串格式日期大小,带格式的日期</span><br><span class=\"line\">    public static boolean isBefore(String strdat1, String strdat2, String format) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Date dat1 = parseStringToDate(strdat1, format);</span><br><span class=\"line\">            Date dat2 = parseStringToDate(strdat2, format);</span><br><span class=\"line\">            return dat1.before(dat2);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 比较两个字符串格式日期大小,带格式的日期,返回int</span><br><span class=\"line\">    public static long isBefore_int(String strdat1, String strdat2, String format) &#123;</span><br><span class=\"line\">        long result = 0;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Date dat1 = parseStringToDate(strdat1, format);</span><br><span class=\"line\">            Date dat2 = parseStringToDate(strdat2, format);</span><br><span class=\"line\">            return dat2.getTime() - dat1.getTime();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 得到上一个月或者下一个月的日期</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getDayafterMonth(String theDate, int month, String formatStr) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(formatStr);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate).plusMonths(month).format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将秒转换为小时分秒等</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sec</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String changeTime(int sec) &#123;</span><br><span class=\"line\">        String temp = &quot;&quot;;</span><br><span class=\"line\">        if (sec &lt; 60) &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec + &quot;秒&quot;;</span><br><span class=\"line\">        &#125; else if (sec &lt; 3600) &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec / 60 + &quot;分&quot; + sec % 60 + &quot;秒&quot;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec / 3600 + &quot;小时&quot; + (sec % 3600) / 60 + &quot;分&quot; + sec % 60 + &quot;秒&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 方法描述:</span><br><span class=\"line\">     * 计算两个日期相差天数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param end   结束日期</span><br><span class=\"line\">     * @param start 开始日期</span><br><span class=\"line\">     * @return 作者：liangxuekai</span><br><span class=\"line\">     * 日期：2018 2018年1月31日</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int getSubDays(String end, String start) &#123;</span><br><span class=\"line\">        LocalDate startDate = LocalDate.parse(start);</span><br><span class=\"line\">        LocalDate endDate = LocalDate.parse(end);</span><br><span class=\"line\">        Long between = ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class=\"line\">        return between.intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static String getTimeDiff(Date time1, Date time2) throws Exception &#123;</span><br><span class=\"line\">        long l = time1.getTime() - time2.getTime();</span><br><span class=\"line\">        String returnStr = &quot;&quot;;</span><br><span class=\"line\">        long day = l / (24 * 60 * 60 * 1000);</span><br><span class=\"line\">        if (day &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (day + &quot;天&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long hour = (l / (60 * 60 * 1000) - day * 24);</span><br><span class=\"line\">        if (hour &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (hour + &quot;小时&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);</span><br><span class=\"line\">        if (min &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (min + &quot;分&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);</span><br><span class=\"line\">        if (s &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (s + &quot;秒&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return returnStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\">参考文章：</h3>\n<h4 id=\"java-8新特性终极指南-httpwwwimportnewcom11908html\">Java 8新特性终极指南  <a href=\"http://www.importnew.com/11908.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/11908.html</a></h4>\n<h4 id=\"优雅的使用optional-httpsblogcsdnnetzhang89xiaoarticledetails76596046\">优雅的使用Optional  <a href=\"https://blog.csdn.net/zhang89xiao/article/details/76596046\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhang89xiao/article/details/76596046</a></h4>\n<h4 id=\"深入浅出stream和parallelstreamhttpsblogcsdnnetdarrenstyarticledetails79283146\">深入浅出Stream和parallelStream<a href=\"https://blog.csdn.net/darrensty/article/details/79283146\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/darrensty/article/details/79283146</a></h4>\n<h4 id=\"java8时间工具类httpswwwjianshucomp6261f4162cfe\">java8时间工具类<a href=\"https://www.jianshu.com/p/6261f4162cfe\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6261f4162cfe</a></h4>\n","site":{"data":{}},"excerpt":"<h3>Lambda表达式</h3>\n<blockquote>\n<p>lambda简称闭包，类似Groovy，Scala等的函数式编程，即将函数作为方法的参数。<br>\n一个简单的Lambda表达式由逗号分隔开的参数列表、-&gt; 及函数体组成</p>\n</blockquote>","more":"<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>\n<p>同：（其中str的类型是由编译器推断出来的。可省略）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strList.forEach((String str)-&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>\n<p>如果 <strong>-&gt;</strong> 后有多条语句，则需要将代码块放在 <strong>{}</strong> 中，即函数体中的代码块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;输出&quot;);</span><br><span class=\"line\">\tSystem.out.println(str);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4>Lambda可以引用成员变量和局部变量，但是他们会隐含的被 <strong>final</strong> 修饰。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = &quot;,&quot;;</span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(str + separator);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String separator = &quot;,&quot;;</span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">strList.forEach(str -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.println(str + separator);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4>Lambda返回值</h4>\n<p>如果函数体中只有一条语句，则无需写<strong>return</strong>语句，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">list2.sort((e1, e2) -&gt; e1.compareTo(e2));</span><br></pre></td></tr></table></figure>\n<p>同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> list2.sort((e1, e2) -&gt; &#123;</span><br><span class=\"line\">\tint compare = e1.compareTo(e2);</span><br><span class=\"line\">\treturn compare;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3>函数式接口（<strong>Functional Interface</strong>）</h3>\n<ul>\n<li>什么样的才算是函数式接口呢？</li>\n</ul>\n<blockquote>\n<p>首先定义<strong>一个接口</strong><br>\n接口中定义 <strong>有且仅有一个</strong> 抽象方法</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface FunctionalDemo &#123;</span><br><span class=\"line\">\t// 抽象方法</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t// Java8之前是用匿名函数来实现的。</span><br><span class=\"line\">       FunctionalDemo methods = (a, b) -&gt; &#123;</span><br><span class=\"line\">            return a + b;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       int sum = methods.add(1, 2);</span><br><span class=\"line\">       System.out.println(sum);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>函数式接口在实际应用中容易出错，当其他开发人员在你的函数式接口中添加了其他抽象方法，此时这个接口就不再是函数式接口了。如何避免这种事情的发生呢？在声明的函数式接口上添加注解 <strong><em>@FunctionalInterface</em></strong>。添加注解后如果添加其他抽象方法则编译器报错。<br>\n<img src=\"https://img-blog.csdnimg.cn/2018120413311650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"!在这里插入图片描述](https://img-blog.csdnimg.cn/20181204132900553.png)\">在上述描述中多次提到抽象方法，主要是因为函数式接口中允许添加</p>\n<ol>\n<li>默认方法，默认方法不是抽象方法。</li>\n<li>静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。静态方法，静态方法也不是抽象方法，它已经是一个实现了的方法。</li>\n<li>重写Object中的Public方法重写Object中的Public方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface FunctionalDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t/** 默认方法 */</span><br><span class=\"line\">\tdefault void defaultMethod() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;default method 1&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefault void defaultMethod2(String message) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(message + &quot;：default method 2 &quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 静态方法\t</span><br><span class=\"line\">\tstatic void printMessage(String message) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 重写Object中的方法。</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean equals(Object obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        FunctionalDemo methods = (a, b) -&gt; &#123;</span><br><span class=\"line\">            return a + b;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        int sum = methods.add(1, 2);</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 调用默认方法</span><br><span class=\"line\">        methods.defaultMethod();</span><br><span class=\"line\">        methods.defaultMethod2(&quot;默认方法加参数&quot;);</span><br><span class=\"line\">        // 静态方法</span><br><span class=\"line\">        FunctionalDemo.printMessage(&quot;静态方法&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">default method 1</span><br><span class=\"line\">默认方法加参数：default method 2 </span><br><span class=\"line\">静态方法**</span><br></pre></td></tr></table></figure>\n<p>JDK中的栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Runnable,</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.Comparator,</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.concurrent.Callable</span><br></pre></td></tr></table></figure>\n<h4>接口的默认方法</h4>\n<p>Java8之后允许在接口中添加默认方法，默认方法不需要实现，如果有需要则可以覆盖默认方法，而抽象方法必须要实现。</p>\n<p>接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Function &#123;</span><br><span class=\"line\">    // 抽象方法</span><br><span class=\"line\">    void required();</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 默认方法</span><br><span class=\"line\">    default void notRequired() &#123;</span><br><span class=\"line\">        // 函数体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FunctionalImpl implements Function &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void required() &#123;</span><br><span class=\"line\">        System.out.println(&quot;interface abstract method must override&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notRequired() &#123;</span><br><span class=\"line\">        System.out.println(&quot;interface default method not required&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static void main(String[] args) &#123;</span><br><span class=\"line\">\t Function function = FunctionalFactory.crate(FunctionalImpl::new);</span><br><span class=\"line\">        function.required();</span><br><span class=\"line\">        function.notRequired();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface abstract method must override</span><br><span class=\"line\">interface default method not required</span><br></pre></td></tr></table></figure>\n<p>思考：怎么优雅的使用默认方法呢？</p>\n<blockquote>\n<p>尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误</p>\n</blockquote>\n<h4>方法引用</h4>\n<blockquote>\n<p>方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造器引用</span><br><span class=\"line\">     * @param supplier 该引用接收一个空构造参数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Person constructMethod(final Supplier&lt;Person&gt; supplier) &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造器引用, 语法是：Class::new， 构造器无参&quot;);</span><br><span class=\"line\">        return supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 静态方法引用</span><br><span class=\"line\">     * @param person 该引用接收一个Person参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void staticMethod(Person person) &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造器引用，语法是Class::static_method, 接收到的person：&quot; + person.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 特定方法的引用</span><br><span class=\"line\">     * @param person 该引用接收一个Person参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void instanceMethod(Person person) &#123;</span><br><span class=\"line\">        System.out.println(&quot;特定对象的方法引用，语法是：Class::method, 接收到的person: &quot; + person.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 任意方法的引用</span><br><span class=\"line\">     * 注意：无参</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void otherMethod() &#123;</span><br><span class=\"line\">        System.out.println(&quot;任意对象的方法引用，语法是：Class::method， 无参&quot; + this.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LambdaTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 构造器引入</span><br><span class=\"line\">        Person person = Person.constructMethod(Person::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; list = new ArrayList&lt;&gt;(Arrays.asList(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 静态方法引入</span><br><span class=\"line\">        list.forEach(Person::staticMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.forEach(person::instanceMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.forEach(Person::otherMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造器引用, 语法是：Class::new， 构造器无参</span><br><span class=\"line\">构造器引用，语法是Class::static_method, 接收到的person：domain.Person@d70c109</span><br><span class=\"line\">特定对象的方法引用，语法是：Class::method, 接收到的person: domain.Person@d70c109</span><br><span class=\"line\">任意对象的方法引用，语法是：Class::method， 无参domain.Person@d70c109</span><br></pre></td></tr></table></figure>\n<h3>Optional <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></h3>\n<blockquote>\n<p>优雅的判断 <strong><em>null</em></strong>， 不再进行 <strong><em>if（obj == null） {…}</em></strong></p>\n</blockquote>\n<h4>慎重使用以下方式：</h4>\n<blockquote>\n<p>调用 isPresent() 方法时<br>\n调用 get() 方法时<br>\nOptional 类型作为类/实例属性时<br>\nOptional 类型作为方法参数时</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User();</span><br><span class=\"line\">Optional&lt;User&gt; optional = Optional.ofNullable(user); </span><br><span class=\"line\">if (optional.isPresent()) &#123;</span><br><span class=\"line\">\tUser u = optional.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码跟以前写的null判断有什么区别呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User();</span><br><span class=\"line\">if (user != null) &#123;</span><br><span class=\"line\">\tSystem.out.println(user.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何优雅的使用Optional呢？</p>\n<p>Optional中的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</span><br><span class=\"line\">public T orElse(T other)</span><br><span class=\"line\">public T orElseGet(Supplier&lt;? extends T&gt; other)</span><br><span class=\"line\">public void ifPresent(Consumer&lt;? super T&gt; consumer)</span><br><span class=\"line\">public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span><br><span class=\"line\">public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</span><br><span class=\"line\">public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User zs = new User(&quot;zs&quot;, 23, new ArrayList&lt;&gt;(&quot;篮球&quot;, &quot;旅行&quot;));   </span><br><span class=\"line\">Optional.of(zs).map(user -&gt; user.getName()).map(name -&gt; name.toUpperCase()).orElse(null);</span><br></pre></td></tr></table></figure>\n<h3>Stream</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Streams &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private enum Status&#123;</span><br><span class=\"line\">        OPEN, CLOSED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final static class Task &#123;</span><br><span class=\"line\">        private Status status;</span><br><span class=\"line\">        private Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">        Task(final Status status, final Integer points) &#123;</span><br><span class=\"line\">            this.status  =status;</span><br><span class=\"line\">            this.points = points;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Status getStatus() &#123;</span><br><span class=\"line\">            return status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Integer getPoints() &#123;</span><br><span class=\"line\">            return points;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Collection&lt;Task&gt; tasks = Arrays.asList(</span><br><span class=\"line\">            new Task(Status.OPEN, 5),</span><br><span class=\"line\">            new Task(Status.OPEN, 13),</span><br><span class=\"line\">            new Task(Status.CLOSED, 8)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        // 所有OPEN的总points</span><br><span class=\"line\">        Integer openSum =</span><br><span class=\"line\">                tasks.stream()          // 将集合转化为stream</span><br><span class=\"line\">                .filter(task -&gt; task.getStatus() == Status.OPEN)   // 过滤掉CLOSED的选项</span><br><span class=\"line\">                .mapToInt(Task::getPoints)      // mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream</span><br><span class=\"line\">                .sum();         // 用sum函数把所有的分数加起来</span><br><span class=\"line\">        System.out.println(&quot; OPEN points &quot; + openSum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Integer totalPoints = tasks.stream()</span><br><span class=\"line\">                .parallel()                 // 并行操作</span><br><span class=\"line\">                .map(Task::getPoints)</span><br><span class=\"line\">                .reduce(0, Integer::sum);</span><br><span class=\"line\">        System.out.println(&quot;total points &quot; + totalPoints);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 按某属性分组</span><br><span class=\"line\">        Map&lt;Status, List&lt;Task&gt;&gt; group =</span><br><span class=\"line\">                tasks.stream().collect(Collectors.groupingBy(Task::getStatus));</span><br><span class=\"line\">        System.out.println(&quot;group by status: &quot; + group);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 计算元素的权重</span><br><span class=\"line\">        final Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">                .stream()                                        // Stream&lt; String &gt;</span><br><span class=\"line\">                .mapToInt( Task::getPoints )                     // IntStream</span><br><span class=\"line\">                .asLongStream()                                  // LongStream</span><br><span class=\"line\">                .mapToDouble( points -&gt; points / totalPoints )   // DoubleStream</span><br><span class=\"line\">                .boxed()                                         // Stream&lt; Double &gt;</span><br><span class=\"line\">                .mapToLong( weigth -&gt; ( long )( weigth * 100 ) ) // LongStream</span><br><span class=\"line\">                .mapToObj( percentage -&gt; percentage + &quot;%&quot; )      // Stream&lt; String&gt;</span><br><span class=\"line\">                .collect( Collectors.toList() );                 // List&lt; String &gt;</span><br><span class=\"line\">        System.out.println(&quot;权重为：&quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>Time</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DateUtil &#123;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_SHORT = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_COMPACT = &quot;yyyyMMdd&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_COMPACTFULL = &quot;yyyyMMddHHmmss&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL_MSEL = &quot;yyyyMMddHHmmssSSSS&quot;;</span><br><span class=\"line\">    public static final String DATE_YEAR_MONTH = &quot;yyyyMM&quot;;</span><br><span class=\"line\">    public static final String DATE_FORMAT_FULL_MSE = &quot;yyyyMMddHHmmssSSS&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取系统当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Date getCurrentDate() &#123;</span><br><span class=\"line\">        return new Date();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取系统当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static LocalDateTime getCurrentLocalDateTime() &#123;</span><br><span class=\"line\">        return LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据时间格式返回对应的String类型的时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTime(String format) &#123;</span><br><span class=\"line\">        LocalDateTime now = LocalDateTime.now();</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        String dataTime = now.format(dateTimeFormatter);</span><br><span class=\"line\">        return dataTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyy-MM-dd HH:mm:ss格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTimeFull() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMMddHHmmss格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateTime1() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期YYYYMM格式</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMM格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateYYYYMM() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_YEAR_MONTH);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String 当前日期 yyyyMMdd格式</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getCurDateYYYYMMDD() &#123;</span><br><span class=\"line\">        return getCurDateTime(DATE_FORMAT_COMPACT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是今天</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param strDate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isCurrentDay(String strDate) &#123;</span><br><span class=\"line\">        boolean bRet = false;</span><br><span class=\"line\">        LocalDate strLocalDate = LocalDate.parse(strDate);</span><br><span class=\"line\">        if (LocalDate.now().getYear() == strLocalDate.getYear()) &#123;</span><br><span class=\"line\">            MonthDay monthDay = MonthDay.from(strLocalDate);</span><br><span class=\"line\">            MonthDay today = MonthDay.from(LocalDate.now());</span><br><span class=\"line\">            return monthDay.equals(today);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return bRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取几小时后的时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param hour</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getAfterDateTime(int hour, String format) &#123;</span><br><span class=\"line\">        LocalTime localTime = LocalTime.now().plusHours(hour);</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        String dataTime = localTime.format(dateTimeFormatter);</span><br><span class=\"line\">        return dataTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前日期时间戳(yyyyMMddHHmmssSSSS)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @author liangxuekai</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getTimeStamp() &#123;</span><br><span class=\"line\">        LocalDateTime now = LocalDateTime.now();</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_FULL_MSEL);</span><br><span class=\"line\">        return now.format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 日期转字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String parseDateToString(Date thedate, String format) &#123;</span><br><span class=\"line\">        if (thedate != null) &#123;</span><br><span class=\"line\">            Instant instant = thedate.toInstant();</span><br><span class=\"line\">            ZoneId zone = ZoneId.systemDefault();</span><br><span class=\"line\">            LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);</span><br><span class=\"line\">            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">            return localDateTime.format(dateTimeFormatter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * parseDateToString(Date thedate, String format)的重载方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param thedate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String parseDateToString(Date thedate) &#123;</span><br><span class=\"line\">        // String format = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\">        return parseDateToString(thedate, DATE_FORMAT_FULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 字符串转日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Date</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Date parseStringToDate(String thedate, String format) &#123;</span><br><span class=\"line\">        DateFormat sdf = new SimpleDateFormat(format);</span><br><span class=\"line\">        Date dd1 = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            dd1 = sdf.parse(thedate);</span><br><span class=\"line\">        &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dd1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 由String型日期转成format形式String</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format1 原先格式</span><br><span class=\"line\">     * @param format2 转化格式</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String changeFormatDateString(String format1, String format2, String strDate) &#123;</span><br><span class=\"line\">        if (strDate == null)</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        if (strDate.length() &gt;= format1.length() &amp;&amp; format1.length() &gt;= format2.length()) &#123;</span><br><span class=\"line\">            return parseDateToString(parseStringToDate(strDate, format1), format2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return strDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到当前日期的前N天时间 yyyymmdd</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @param day</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String beforeNDaysDate(String format, int day) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        if (day &gt; 0) &#123;</span><br><span class=\"line\">            return LocalDateTime.now().minusDays(day).format(dateTimeFormatter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获得N个月后的日期</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * theDate 日期</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * int month 月数</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * format 格式</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNMonthDate(String theDate, int month, String format) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusMonths(month)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N天后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate 某日期</span><br><span class=\"line\">     *                格式 yyyy-MM-dd</span><br><span class=\"line\">     * @param nDayNum N天</span><br><span class=\"line\">     * @return String N天后的日期</span><br><span class=\"line\">     * @author kevin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNDaysDate(String theDate, Integer nDayNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\"></span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusDays(nDayNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N小时后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate  时间</span><br><span class=\"line\">     * @param nHourNum N小时数</span><br><span class=\"line\">     * @param format   时间格式</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNHoursDate(String theDate, Integer nHourNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusHours(nHourNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N分钟后的日期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param theDate</span><br><span class=\"line\">     * @param nMinNum</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNMinsDate(String theDate, Integer nMinNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusMinutes(nMinNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到N秒后的日期</span><br><span class=\"line\">     * @param theDate</span><br><span class=\"line\">     * @param nSecNum</span><br><span class=\"line\">     * @param format</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String afterNSecondsDate(String theDate, Integer nSecNum, String format) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate,dateTimeFormatter)</span><br><span class=\"line\">                .plusSeconds(nSecNum)</span><br><span class=\"line\">                .format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 比较两个字符串格式日期大小,带格式的日期</span><br><span class=\"line\">    public static boolean isBefore(String strdat1, String strdat2, String format) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Date dat1 = parseStringToDate(strdat1, format);</span><br><span class=\"line\">            Date dat2 = parseStringToDate(strdat2, format);</span><br><span class=\"line\">            return dat1.before(dat2);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 比较两个字符串格式日期大小,带格式的日期,返回int</span><br><span class=\"line\">    public static long isBefore_int(String strdat1, String strdat2, String format) &#123;</span><br><span class=\"line\">        long result = 0;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Date dat1 = parseStringToDate(strdat1, format);</span><br><span class=\"line\">            Date dat2 = parseStringToDate(strdat2, format);</span><br><span class=\"line\">            return dat2.getTime() - dat1.getTime();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 得到上一个月或者下一个月的日期</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getDayafterMonth(String theDate, int month, String formatStr) &#123;</span><br><span class=\"line\">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(formatStr);</span><br><span class=\"line\">        return LocalDateTime.parse(theDate).plusMonths(month).format(dateTimeFormatter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将秒转换为小时分秒等</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sec</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String changeTime(int sec) &#123;</span><br><span class=\"line\">        String temp = &quot;&quot;;</span><br><span class=\"line\">        if (sec &lt; 60) &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec + &quot;秒&quot;;</span><br><span class=\"line\">        &#125; else if (sec &lt; 3600) &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec / 60 + &quot;分&quot; + sec % 60 + &quot;秒&quot;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            temp = &quot;&quot; + sec / 3600 + &quot;小时&quot; + (sec % 3600) / 60 + &quot;分&quot; + sec % 60 + &quot;秒&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 方法描述:</span><br><span class=\"line\">     * 计算两个日期相差天数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param end   结束日期</span><br><span class=\"line\">     * @param start 开始日期</span><br><span class=\"line\">     * @return 作者：liangxuekai</span><br><span class=\"line\">     * 日期：2018 2018年1月31日</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int getSubDays(String end, String start) &#123;</span><br><span class=\"line\">        LocalDate startDate = LocalDate.parse(start);</span><br><span class=\"line\">        LocalDate endDate = LocalDate.parse(end);</span><br><span class=\"line\">        Long between = ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class=\"line\">        return between.intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static String getTimeDiff(Date time1, Date time2) throws Exception &#123;</span><br><span class=\"line\">        long l = time1.getTime() - time2.getTime();</span><br><span class=\"line\">        String returnStr = &quot;&quot;;</span><br><span class=\"line\">        long day = l / (24 * 60 * 60 * 1000);</span><br><span class=\"line\">        if (day &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (day + &quot;天&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long hour = (l / (60 * 60 * 1000) - day * 24);</span><br><span class=\"line\">        if (hour &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (hour + &quot;小时&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);</span><br><span class=\"line\">        if (min &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (min + &quot;分&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);</span><br><span class=\"line\">        if (s &gt; 0) &#123;</span><br><span class=\"line\">            returnStr += (s + &quot;秒&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return returnStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>参考文章：</h3>\n<h4>Java 8新特性终极指南  <a href=\"http://www.importnew.com/11908.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/11908.html</a></h4>\n<h4>优雅的使用Optional  <a href=\"https://blog.csdn.net/zhang89xiao/article/details/76596046\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhang89xiao/article/details/76596046</a></h4>\n<h4>深入浅出Stream和parallelStream<a href=\"https://blog.csdn.net/darrensty/article/details/79283146\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/darrensty/article/details/79283146</a></h4>\n<h4>java8时间工具类<a href=\"https://www.jianshu.com/p/6261f4162cfe\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6261f4162cfe</a></h4>"},{"title":"Java正确获取客户端真实IP方法整理","date":"2018-01-04T04:06:10.000Z","_content":"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122131357280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n参考：[Java技术栈](https://mp.weixin.qq.com/s/Affy4l9TUj7rv9A86gRC4A)\n","source":"_posts/Java正确获取客户端真实IP方法整理.md","raw":"---\ntitle: Java正确获取客户端真实IP方法整理\ncategories: Java\ntags: java\ndate: 2018-01-04 12:06:10\n---\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122131357280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n参考：[Java技术栈](https://mp.weixin.qq.com/s/Affy4l9TUj7rv9A86gRC4A)\n","slug":"Java正确获取客户端真实IP方法整理","published":1,"updated":"2019-04-20T12:30:20.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsu0011vq6bgk0x37sz","content":"<p><img src=\"https://img-blog.csdnimg.cn/20181122131357280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n参考：<a href=\"https://mp.weixin.qq.com/s/Affy4l9TUj7rv9A86gRC4A\" target=\"_blank\" rel=\"noopener\">Java技术栈</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://img-blog.csdnimg.cn/20181122131357280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n参考：<a href=\"https://mp.weixin.qq.com/s/Affy4l9TUj7rv9A86gRC4A\" target=\"_blank\" rel=\"noopener\">Java技术栈</a></p>\n"},{"title":"kafka-入门","date":"2018-04-06T15:55:12.000Z","_content":"\n## 入门\n---\n#### 概念\n```\n1. kafka是一种消息中间件（生产者把消息放到队列里，消费者到'指定'队列消费）\n2. producer：生产者、consumer：消费者、topic：队列（消息标签）、broker：kafka：扩容\n3. kafka作为一个集群运行在一个或多个服务器上， 集群存储的消息是以topic为类别存储的\n4. 一个消息（record）是由key、value、时间戳构成\n```\n<!-- more -->\n#### 基本术语\n##### Topic（主题）\n* 将消息或种子Feed分门别类，每一类消息就是一个Topic\n\n> 每个分区都是一个顺序的，不可变的消息队列，并且可以持续的添加，分区中的消息都被分了一个序列号，成为偏移量（offset），每个分区中的偏移量都是唯一的。对于每一个Topic， kafka集群维护这一个分区的log，如下图\n![Broker（多分区）](1524625989644.png)\n> kafka集群无论消息是否被消费都会保存所有的消息，直到过期！实际上Consumer持有的仅仅是消息的偏移量，Consumer既可以读取新消息，也可以重新读取旧消息。且Consumer之间互不干扰。这样做为了处理更多的消息而不被限制在单台服务器上。Topic拥有多个分区意味着它可以处理更多的数据。分区可以作为并行处理的单元。\n![Alt text](1524625961392.png)\n##### Producer\n* 发布消息的对象\n\n>生产者往某个Topic上发布消息，生产者也负责选择发布到Topic上的哪一分区，最简单的方式是重分区列表中轮流选择，也可以根据某种算法依照权重进行选择分区，开发者负责如何选择分区的算法。 \n##### Consumer\n* 订阅消息，并处理发布的消息\n通常消费模型分为队列和发布-订阅模式\n* 队列： 一条消息只有一个消费者可以处理\n* 发布-订阅：消息被广播给所有的消费者，接收到消息的消费者都可以处理这条消息。\n\n> kafka为这两种模型提供了单一的消费者抽象模型: 消费者组（Consumer group）。消费者用一个消费者组名标记自己，一个发布在Topic上的消息被分发给消费者，如果所有的消费者都在一个组里，那么就成了queue 模型， 如果所有消费者都不在同一组中，那么就变成了发布-订阅模型。更通用的，我们可以创建一个消费者组作为逻辑上的订阅者，每个字包含数目不等的消费者，一个组内的消费者可以用来扩展和容错。![Alt text](1524633231026.png)\n正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区。 因为Topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。\n\n##### Broker（代理）\n* 已发布的消息保存在一组服务器中， 称为kafka集群，集群中的每个服务器就是一个Broker，Consumer可以订阅一个或多个Topic，并从Broker上拉数据，从而消费这些已发布的消息\n\n##### 分布式（Distribution）\n* Log被分配到多个服务器上，每个服务器处理它分到的分区。根据配置每个分区还可以备份到其他服务器作为容错备份。每个分区有一个Leader，有零或多个Follower，Leader处理此分区的所有读写请求，而Follower则被动的复制数据，如果Leader宕机，则从Follower中选举一个作为新Leader。一个分区的Leader可能还是其他分区的Follower。这样可以负载均衡，避免所有请求只由一台或某几台服务器处理\n\n##### Geo-Replication(异地数据同步技术)\n* Kafka MirrorMaker为集群提供了Geo-Replication支持。借助MirrorMaker，消息可以跨多个数据中心或云区域进行备份。可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。\n\n---\n\n---\n#### 流平台（kafka作为一个分布式的流平台）\n```\n流平台具有三个关键能力：\n1. 发布和订阅\n2. 以容错的方式存储消息（流）\n3. 在消息流发生时处理\n```\n#### 核心API\n```\n1. Producer API: `发布一个或多个Topic（主题）`\n2. Consumer API: `订阅一个或多个Topic，并处理产生的消息`\n3. Streams API: `消费topic，同时生产topic，将输入流转换为输出流`\n4. Connector API： \n![关系图](http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DXiAVXBMAAFScKNS-Og538.png)\n```\n\n#### 学习完应该掌握哪些内容\n```\nkafka节点之间如何复制备份的？\nkafka消息是否会丢失？为什么？\nkafka最合理的配置是什么？\nkafka的leader选举机制是什么？\nkafka对硬件的配置有什么要求？\nkafka的消息保证有几种方式？\n\n后续补充...\n```\n\n\n\n\n","source":"_posts/Kafka_入门.md","raw":"---\ntitle: kafka-入门\ncategories: Kafka学习\ntags: kafka\ndate: 2018-04-06 23:55:12\n---\n\n## 入门\n---\n#### 概念\n```\n1. kafka是一种消息中间件（生产者把消息放到队列里，消费者到'指定'队列消费）\n2. producer：生产者、consumer：消费者、topic：队列（消息标签）、broker：kafka：扩容\n3. kafka作为一个集群运行在一个或多个服务器上， 集群存储的消息是以topic为类别存储的\n4. 一个消息（record）是由key、value、时间戳构成\n```\n<!-- more -->\n#### 基本术语\n##### Topic（主题）\n* 将消息或种子Feed分门别类，每一类消息就是一个Topic\n\n> 每个分区都是一个顺序的，不可变的消息队列，并且可以持续的添加，分区中的消息都被分了一个序列号，成为偏移量（offset），每个分区中的偏移量都是唯一的。对于每一个Topic， kafka集群维护这一个分区的log，如下图\n![Broker（多分区）](1524625989644.png)\n> kafka集群无论消息是否被消费都会保存所有的消息，直到过期！实际上Consumer持有的仅仅是消息的偏移量，Consumer既可以读取新消息，也可以重新读取旧消息。且Consumer之间互不干扰。这样做为了处理更多的消息而不被限制在单台服务器上。Topic拥有多个分区意味着它可以处理更多的数据。分区可以作为并行处理的单元。\n![Alt text](1524625961392.png)\n##### Producer\n* 发布消息的对象\n\n>生产者往某个Topic上发布消息，生产者也负责选择发布到Topic上的哪一分区，最简单的方式是重分区列表中轮流选择，也可以根据某种算法依照权重进行选择分区，开发者负责如何选择分区的算法。 \n##### Consumer\n* 订阅消息，并处理发布的消息\n通常消费模型分为队列和发布-订阅模式\n* 队列： 一条消息只有一个消费者可以处理\n* 发布-订阅：消息被广播给所有的消费者，接收到消息的消费者都可以处理这条消息。\n\n> kafka为这两种模型提供了单一的消费者抽象模型: 消费者组（Consumer group）。消费者用一个消费者组名标记自己，一个发布在Topic上的消息被分发给消费者，如果所有的消费者都在一个组里，那么就成了queue 模型， 如果所有消费者都不在同一组中，那么就变成了发布-订阅模型。更通用的，我们可以创建一个消费者组作为逻辑上的订阅者，每个字包含数目不等的消费者，一个组内的消费者可以用来扩展和容错。![Alt text](1524633231026.png)\n正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区。 因为Topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。\n\n##### Broker（代理）\n* 已发布的消息保存在一组服务器中， 称为kafka集群，集群中的每个服务器就是一个Broker，Consumer可以订阅一个或多个Topic，并从Broker上拉数据，从而消费这些已发布的消息\n\n##### 分布式（Distribution）\n* Log被分配到多个服务器上，每个服务器处理它分到的分区。根据配置每个分区还可以备份到其他服务器作为容错备份。每个分区有一个Leader，有零或多个Follower，Leader处理此分区的所有读写请求，而Follower则被动的复制数据，如果Leader宕机，则从Follower中选举一个作为新Leader。一个分区的Leader可能还是其他分区的Follower。这样可以负载均衡，避免所有请求只由一台或某几台服务器处理\n\n##### Geo-Replication(异地数据同步技术)\n* Kafka MirrorMaker为集群提供了Geo-Replication支持。借助MirrorMaker，消息可以跨多个数据中心或云区域进行备份。可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。\n\n---\n\n---\n#### 流平台（kafka作为一个分布式的流平台）\n```\n流平台具有三个关键能力：\n1. 发布和订阅\n2. 以容错的方式存储消息（流）\n3. 在消息流发生时处理\n```\n#### 核心API\n```\n1. Producer API: `发布一个或多个Topic（主题）`\n2. Consumer API: `订阅一个或多个Topic，并处理产生的消息`\n3. Streams API: `消费topic，同时生产topic，将输入流转换为输出流`\n4. Connector API： \n![关系图](http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DXiAVXBMAAFScKNS-Og538.png)\n```\n\n#### 学习完应该掌握哪些内容\n```\nkafka节点之间如何复制备份的？\nkafka消息是否会丢失？为什么？\nkafka最合理的配置是什么？\nkafka的leader选举机制是什么？\nkafka对硬件的配置有什么要求？\nkafka的消息保证有几种方式？\n\n后续补充...\n```\n\n\n\n\n","slug":"Kafka_入门","published":1,"updated":"2019-04-20T12:31:50.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsv0014vq6bnyfbnzjm","content":"<h2 id=\"入门\">入门</h2>\n<hr>\n<h4 id=\"概念\">概念</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. kafka是一种消息中间件（生产者把消息放到队列里，消费者到&apos;指定&apos;队列消费）</span><br><span class=\"line\">2. producer：生产者、consumer：消费者、topic：队列（消息标签）、broker：kafka：扩容</span><br><span class=\"line\">3. kafka作为一个集群运行在一个或多个服务器上， 集群存储的消息是以topic为类别存储的</span><br><span class=\"line\">4. 一个消息（record）是由key、value、时间戳构成</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"基本术语\">基本术语</h4>\n<h5 id=\"topic主题\">Topic（主题）</h5>\n<ul>\n<li>将消息或种子Feed分门别类，每一类消息就是一个Topic</li>\n</ul>\n<blockquote>\n<p>每个分区都是一个顺序的，不可变的消息队列，并且可以持续的添加，分区中的消息都被分了一个序列号，成为偏移量（offset），每个分区中的偏移量都是唯一的。对于每一个Topic， kafka集群维护这一个分区的log，如下图<br>\n<img src=\"1524625989644.png\" alt=\"Broker（多分区）\"><br>\nkafka集群无论消息是否被消费都会保存所有的消息，直到过期！实际上Consumer持有的仅仅是消息的偏移量，Consumer既可以读取新消息，也可以重新读取旧消息。且Consumer之间互不干扰。这样做为了处理更多的消息而不被限制在单台服务器上。Topic拥有多个分区意味着它可以处理更多的数据。分区可以作为并行处理的单元。<br>\n<img src=\"1524625961392.png\" alt=\"Alt text\"></p>\n</blockquote>\n<h5 id=\"producer\">Producer</h5>\n<ul>\n<li>发布消息的对象</li>\n</ul>\n<blockquote>\n<p>生产者往某个Topic上发布消息，生产者也负责选择发布到Topic上的哪一分区，最简单的方式是重分区列表中轮流选择，也可以根据某种算法依照权重进行选择分区，开发者负责如何选择分区的算法。</p>\n</blockquote>\n<h5 id=\"consumer\">Consumer</h5>\n<ul>\n<li>订阅消息，并处理发布的消息<br>\n通常消费模型分为队列和发布-订阅模式</li>\n<li>队列： 一条消息只有一个消费者可以处理</li>\n<li>发布-订阅：消息被广播给所有的消费者，接收到消息的消费者都可以处理这条消息。</li>\n</ul>\n<blockquote>\n<p>kafka为这两种模型提供了单一的消费者抽象模型: 消费者组（Consumer group）。消费者用一个消费者组名标记自己，一个发布在Topic上的消息被分发给消费者，如果所有的消费者都在一个组里，那么就成了queue 模型， 如果所有消费者都不在同一组中，那么就变成了发布-订阅模型。更通用的，我们可以创建一个消费者组作为逻辑上的订阅者，每个字包含数目不等的消费者，一个组内的消费者可以用来扩展和容错。<img src=\"1524633231026.png\" alt=\"Alt text\"><br>\n正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区。 因为Topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。</p>\n</blockquote>\n<h5 id=\"broker代理\">Broker（代理）</h5>\n<ul>\n<li>已发布的消息保存在一组服务器中， 称为kafka集群，集群中的每个服务器就是一个Broker，Consumer可以订阅一个或多个Topic，并从Broker上拉数据，从而消费这些已发布的消息</li>\n</ul>\n<h5 id=\"分布式distribution\">分布式（Distribution）</h5>\n<ul>\n<li>Log被分配到多个服务器上，每个服务器处理它分到的分区。根据配置每个分区还可以备份到其他服务器作为容错备份。每个分区有一个Leader，有零或多个Follower，Leader处理此分区的所有读写请求，而Follower则被动的复制数据，如果Leader宕机，则从Follower中选举一个作为新Leader。一个分区的Leader可能还是其他分区的Follower。这样可以负载均衡，避免所有请求只由一台或某几台服务器处理</li>\n</ul>\n<h5 id=\"geo-replication异地数据同步技术\">Geo-Replication(异地数据同步技术)</h5>\n<ul>\n<li>Kafka MirrorMaker为集群提供了Geo-Replication支持。借助MirrorMaker，消息可以跨多个数据中心或云区域进行备份。可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。</li>\n</ul>\n<hr>\n<hr>\n<h4 id=\"流平台kafka作为一个分布式的流平台\">流平台（kafka作为一个分布式的流平台）</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流平台具有三个关键能力：</span><br><span class=\"line\">1. 发布和订阅</span><br><span class=\"line\">2. 以容错的方式存储消息（流）</span><br><span class=\"line\">3. 在消息流发生时处理</span><br></pre></td></tr></table></figure>\n<h4 id=\"核心api\">核心API</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Producer API: `发布一个或多个Topic（主题）`</span><br><span class=\"line\">2. Consumer API: `订阅一个或多个Topic，并处理产生的消息`</span><br><span class=\"line\">3. Streams API: `消费topic，同时生产topic，将输入流转换为输出流`</span><br><span class=\"line\">4. Connector API： </span><br><span class=\"line\">![关系图](http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DXiAVXBMAAFScKNS-Og538.png)</span><br></pre></td></tr></table></figure>\n<h4 id=\"学习完应该掌握哪些内容\">学习完应该掌握哪些内容</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka节点之间如何复制备份的？</span><br><span class=\"line\">kafka消息是否会丢失？为什么？</span><br><span class=\"line\">kafka最合理的配置是什么？</span><br><span class=\"line\">kafka的leader选举机制是什么？</span><br><span class=\"line\">kafka对硬件的配置有什么要求？</span><br><span class=\"line\">kafka的消息保证有几种方式？</span><br><span class=\"line\"></span><br><span class=\"line\">后续补充...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2>入门</h2>\n<hr>\n<h4>概念</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. kafka是一种消息中间件（生产者把消息放到队列里，消费者到&apos;指定&apos;队列消费）</span><br><span class=\"line\">2. producer：生产者、consumer：消费者、topic：队列（消息标签）、broker：kafka：扩容</span><br><span class=\"line\">3. kafka作为一个集群运行在一个或多个服务器上， 集群存储的消息是以topic为类别存储的</span><br><span class=\"line\">4. 一个消息（record）是由key、value、时间戳构成</span><br></pre></td></tr></table></figure>","more":"<h4>基本术语</h4>\n<h5>Topic（主题）</h5>\n<ul>\n<li>将消息或种子Feed分门别类，每一类消息就是一个Topic</li>\n</ul>\n<blockquote>\n<p>每个分区都是一个顺序的，不可变的消息队列，并且可以持续的添加，分区中的消息都被分了一个序列号，成为偏移量（offset），每个分区中的偏移量都是唯一的。对于每一个Topic， kafka集群维护这一个分区的log，如下图<br>\n<img src=\"1524625989644.png\" alt=\"Broker（多分区）\"><br>\nkafka集群无论消息是否被消费都会保存所有的消息，直到过期！实际上Consumer持有的仅仅是消息的偏移量，Consumer既可以读取新消息，也可以重新读取旧消息。且Consumer之间互不干扰。这样做为了处理更多的消息而不被限制在单台服务器上。Topic拥有多个分区意味着它可以处理更多的数据。分区可以作为并行处理的单元。<br>\n<img src=\"1524625961392.png\" alt=\"Alt text\"></p>\n</blockquote>\n<h5>Producer</h5>\n<ul>\n<li>发布消息的对象</li>\n</ul>\n<blockquote>\n<p>生产者往某个Topic上发布消息，生产者也负责选择发布到Topic上的哪一分区，最简单的方式是重分区列表中轮流选择，也可以根据某种算法依照权重进行选择分区，开发者负责如何选择分区的算法。</p>\n</blockquote>\n<h5>Consumer</h5>\n<ul>\n<li>订阅消息，并处理发布的消息<br>\n通常消费模型分为队列和发布-订阅模式</li>\n<li>队列： 一条消息只有一个消费者可以处理</li>\n<li>发布-订阅：消息被广播给所有的消费者，接收到消息的消费者都可以处理这条消息。</li>\n</ul>\n<blockquote>\n<p>kafka为这两种模型提供了单一的消费者抽象模型: 消费者组（Consumer group）。消费者用一个消费者组名标记自己，一个发布在Topic上的消息被分发给消费者，如果所有的消费者都在一个组里，那么就成了queue 模型， 如果所有消费者都不在同一组中，那么就变成了发布-订阅模型。更通用的，我们可以创建一个消费者组作为逻辑上的订阅者，每个字包含数目不等的消费者，一个组内的消费者可以用来扩展和容错。<img src=\"1524633231026.png\" alt=\"Alt text\"><br>\n正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区。 因为Topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。</p>\n</blockquote>\n<h5>Broker（代理）</h5>\n<ul>\n<li>已发布的消息保存在一组服务器中， 称为kafka集群，集群中的每个服务器就是一个Broker，Consumer可以订阅一个或多个Topic，并从Broker上拉数据，从而消费这些已发布的消息</li>\n</ul>\n<h5>分布式（Distribution）</h5>\n<ul>\n<li>Log被分配到多个服务器上，每个服务器处理它分到的分区。根据配置每个分区还可以备份到其他服务器作为容错备份。每个分区有一个Leader，有零或多个Follower，Leader处理此分区的所有读写请求，而Follower则被动的复制数据，如果Leader宕机，则从Follower中选举一个作为新Leader。一个分区的Leader可能还是其他分区的Follower。这样可以负载均衡，避免所有请求只由一台或某几台服务器处理</li>\n</ul>\n<h5>Geo-Replication(异地数据同步技术)</h5>\n<ul>\n<li>Kafka MirrorMaker为集群提供了Geo-Replication支持。借助MirrorMaker，消息可以跨多个数据中心或云区域进行备份。可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。</li>\n</ul>\n<hr>\n<hr>\n<h4>流平台（kafka作为一个分布式的流平台）</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流平台具有三个关键能力：</span><br><span class=\"line\">1. 发布和订阅</span><br><span class=\"line\">2. 以容错的方式存储消息（流）</span><br><span class=\"line\">3. 在消息流发生时处理</span><br></pre></td></tr></table></figure>\n<h4>核心API</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Producer API: `发布一个或多个Topic（主题）`</span><br><span class=\"line\">2. Consumer API: `订阅一个或多个Topic，并处理产生的消息`</span><br><span class=\"line\">3. Streams API: `消费topic，同时生产topic，将输入流转换为输出流`</span><br><span class=\"line\">4. Connector API： </span><br><span class=\"line\">![关系图](http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DXiAVXBMAAFScKNS-Og538.png)</span><br></pre></td></tr></table></figure>\n<h4>学习完应该掌握哪些内容</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka节点之间如何复制备份的？</span><br><span class=\"line\">kafka消息是否会丢失？为什么？</span><br><span class=\"line\">kafka最合理的配置是什么？</span><br><span class=\"line\">kafka的leader选举机制是什么？</span><br><span class=\"line\">kafka对硬件的配置有什么要求？</span><br><span class=\"line\">kafka的消息保证有几种方式？</span><br><span class=\"line\"></span><br><span class=\"line\">后续补充...</span><br></pre></td></tr></table></figure>"},{"title":"Java工具类","date":"2018-12-04T14:01:12.000Z","_content":"\n### IOUtils\n* org.apache.commons.io.IOUtils\n\n方法：\n> readLines 从输入流中读取多行数据\n> write 把字节. 字符等写入输出流\n> toInputStream 将字符串转化为输入流\n> toString 转化IO流、byte[]、Url为String\n> toByteArray\n> copy 拷贝文件，支持2G以上的数据\n> lineIterator 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败\n> closeQuietly 关闭流\n\n***pom.xml***\n<!-- more -->\n```\n<dependency>\n\t <groupId>org.apache.commons</groupId>\n\t<artifactId>commons-io</artifactId>\n\t <version>1.3.2</version>\n</dependency>\n```\n\n* 示例：\n```\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.LineIterator;\nimport java.io.*;\nimport java.util.List;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestIOUtils\n * @Description: TODO\n * @date 2018/11/20 13:13\n */\npublic class TestIOUtils {\n\n    public static void main(String[] args) {\n        testIOUtils();\n    }\n\n    private static void testIOUtils() {\n        File file = new File(\"test.json\");\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(file);\n            out = new FileOutputStream(\"testCopy.json\");\n\n            // 从输入流中读取多行数据\n            List<String> list = IOUtils.readLines(in, \"UTF-8\");\n\n\n            StringBuffer str = new StringBuffer();\n            list.forEach(value -> {\n                str.append(value);\n            });\n            // 把字节. 字符等写入输出流\n            IOUtils.write(str, out, \"UTF-8\");\n\n\n            // 将字符串转化为输入流\n            String testWord = \"Hello IoUtils!\";\n            InputStream in2 = IOUtils.toInputStream(testWord);\n\n            // toString转化IO流、byte[]、Url为String\n            String inStr = IOUtils.toString(in2, \"UTF-8\");\n            byte[] bytes = IOUtils.toByteArray(in2);\n            String byteStr = IOUtils.toString(bytes);\n\n            // 拷贝文件，支持2G以上的数据\n            int count = IOUtils.copy(in, out);\n            String response = count > 0 ? \"拷贝成功\" : \"拷贝失败，count > 2147483647L\";\n\n            // 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败\n            LineIterator lineIterator = IOUtils.lineIterator(new FileInputStream(new File(\"test.json\")), \"UTF-8\");\n            while (lineIterator.hasNext()) {\n                String line = lineIterator.nextLine();\n            }\n            lineIterator.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n}\n```\n### FileUtils\n* org.apache.commons.io.FileUtils\n\n方法：\n> forceMkdir 强制创建文件夹，如果父级目录不存在则先创建父级目录\n> deleteDirectory 删除文件夹\n> writeStringToFile 将String写入文件中，如果文件目录不存在则都创建\n> copyFile 拷贝文件\n> forceDelete 强制删除\n> forceMkdir 强制创建目录，如果父级目录不存在则创建父级目录\n> copyDirectory 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！\n> listFiles 列举目录下的文件（不是目录！）\n\n* 示例：\n```\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.filefilter.DirectoryFileFilter;\nimport org.apache.commons.io.filefilter.FileFileFilter;\nimport org.apache.commons.io.filefilter.IOFileFilter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestFileUtils\n * @Description: TODO\n * @date 2018/11/20 15:44\n */\npublic class TestFileUtils {\n\n    public static void main(String[] args) {\n        testFileUtils();\n    }\n\n    private static void testFileUtils() {\n        try {\n            // 强制创建文件夹，如果父级目录不存在则先创建父级目录\n            FileUtils.forceMkdir(new File(\"dir/testDir\"));\n\n            // 删除文件夹\n            FileUtils.deleteDirectory(new File(\"dir\"));\n\n            // 将String写入文件中，如果文件目录不存在则都创建\n            FileUtils.writeStringToFile(new File(\"dir/testDir/test.json\"), \"{\\\"name\\\": \\\"zs\\\"}\");\n\n            // 拷贝文件\n            FileUtils.copyFile(new File(\"dir/testDir/test.json\"), new File(\"dir/testDir/testCopy.json\"));\n\n            // 强制删除\n            FileUtils.forceDelete(new File(\"dir/testDir/test.json\"));\n\n            // 强制创建目录，如果父级目录不存在则创建父级目录\n            FileUtils.forceMkdir(new File(\"dir/testDir2/test\"));\n\n            // 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！\n            // FileUtils.copyDirectory(new File(\"dir\"), new File(\"dir/dirCopy\"));\n            FileUtils.copyDirectory(new File(\"dir\"), new File(\"dirCopy\"));\n\n            // 列举目录下的文件（不是目录！）\n            List<String> coll = (List<String>) FileUtils.listFiles(new File(\"dir\"), FileFileFilter.FILE, DirectoryFileFilter.DIRECTORY);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n### StringUtils\n* org.apache.commons.lang3.StringUtils\n\n方法\n> isBlank\n> isEmpty\n> equals\n> split 字符串分割\n> EMPTY 返回空字符串\n> replace 替换字符串\n> capitalize 首字母大写\n\n***pom.xml***\n```\n<dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.8.1</version>\n</dependency>\n```\n\n* 示例：\n```\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Arrays;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestStringUtils\n * @Description: TODO\n * @date 2018/11/20 16:20\n */\npublic class TestStringUtils {\n\n    public static void main(String[] args) {\n        testStringUtils();\n    }\n\n    private static void testStringUtils() {\n        String str = \"Hello-StringUtils!\";\n\n        String str2 = \"Hello\";\n\n        boolean blank = StringUtils.isBlank(str);\n\n        boolean empty = StringUtils.isEmpty(str);\n\n        boolean equals = StringUtils.equals(str, str2);\n\n        String join = StringUtils.join(Arrays.asList(\"hello\", \"StringUtils\", \"!\"));\n        System.out.println(\"输出结果为： [hello, StringUtils, !] \");\n\n        // 字符串分割：默认是按空格分割\n        String[] splitStrBlank = StringUtils.split(str);\n        for (String s : splitStrBlank) {\n            System.out.println(s);\n        }\n        // 自定义风格符\n        String[] splitStrKey = StringUtils.split(str, \"-\");\n        for (String s : splitStrKey) {\n            System.out.println(s);\n        }\n        // 返回空字符串\n        String emptyStr = StringUtils.EMPTY;\n        System.out.println(emptyStr);\n\n        // 替换字符串\n        String replaceStr2 = StringUtils.replace(str2, \"Hello\", \"你好！\");\n        System.out.println(replaceStr2);\n\n        // 首字母大写\n        String capitalizeStr2 = StringUtils.capitalize(str2.toLowerCase());\n        System.out.println(capitalizeStr2);\n    }\n}\n\n```\n","source":"_posts/Java工具类.md","raw":"---\ntitle: Java工具类\ncategories: Java\ntags: java\ndate: 2018-12-04 22:01:12\n---\n\n### IOUtils\n* org.apache.commons.io.IOUtils\n\n方法：\n> readLines 从输入流中读取多行数据\n> write 把字节. 字符等写入输出流\n> toInputStream 将字符串转化为输入流\n> toString 转化IO流、byte[]、Url为String\n> toByteArray\n> copy 拷贝文件，支持2G以上的数据\n> lineIterator 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败\n> closeQuietly 关闭流\n\n***pom.xml***\n<!-- more -->\n```\n<dependency>\n\t <groupId>org.apache.commons</groupId>\n\t<artifactId>commons-io</artifactId>\n\t <version>1.3.2</version>\n</dependency>\n```\n\n* 示例：\n```\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.LineIterator;\nimport java.io.*;\nimport java.util.List;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestIOUtils\n * @Description: TODO\n * @date 2018/11/20 13:13\n */\npublic class TestIOUtils {\n\n    public static void main(String[] args) {\n        testIOUtils();\n    }\n\n    private static void testIOUtils() {\n        File file = new File(\"test.json\");\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(file);\n            out = new FileOutputStream(\"testCopy.json\");\n\n            // 从输入流中读取多行数据\n            List<String> list = IOUtils.readLines(in, \"UTF-8\");\n\n\n            StringBuffer str = new StringBuffer();\n            list.forEach(value -> {\n                str.append(value);\n            });\n            // 把字节. 字符等写入输出流\n            IOUtils.write(str, out, \"UTF-8\");\n\n\n            // 将字符串转化为输入流\n            String testWord = \"Hello IoUtils!\";\n            InputStream in2 = IOUtils.toInputStream(testWord);\n\n            // toString转化IO流、byte[]、Url为String\n            String inStr = IOUtils.toString(in2, \"UTF-8\");\n            byte[] bytes = IOUtils.toByteArray(in2);\n            String byteStr = IOUtils.toString(bytes);\n\n            // 拷贝文件，支持2G以上的数据\n            int count = IOUtils.copy(in, out);\n            String response = count > 0 ? \"拷贝成功\" : \"拷贝失败，count > 2147483647L\";\n\n            // 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败\n            LineIterator lineIterator = IOUtils.lineIterator(new FileInputStream(new File(\"test.json\")), \"UTF-8\");\n            while (lineIterator.hasNext()) {\n                String line = lineIterator.nextLine();\n            }\n            lineIterator.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n}\n```\n### FileUtils\n* org.apache.commons.io.FileUtils\n\n方法：\n> forceMkdir 强制创建文件夹，如果父级目录不存在则先创建父级目录\n> deleteDirectory 删除文件夹\n> writeStringToFile 将String写入文件中，如果文件目录不存在则都创建\n> copyFile 拷贝文件\n> forceDelete 强制删除\n> forceMkdir 强制创建目录，如果父级目录不存在则创建父级目录\n> copyDirectory 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！\n> listFiles 列举目录下的文件（不是目录！）\n\n* 示例：\n```\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.filefilter.DirectoryFileFilter;\nimport org.apache.commons.io.filefilter.FileFileFilter;\nimport org.apache.commons.io.filefilter.IOFileFilter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestFileUtils\n * @Description: TODO\n * @date 2018/11/20 15:44\n */\npublic class TestFileUtils {\n\n    public static void main(String[] args) {\n        testFileUtils();\n    }\n\n    private static void testFileUtils() {\n        try {\n            // 强制创建文件夹，如果父级目录不存在则先创建父级目录\n            FileUtils.forceMkdir(new File(\"dir/testDir\"));\n\n            // 删除文件夹\n            FileUtils.deleteDirectory(new File(\"dir\"));\n\n            // 将String写入文件中，如果文件目录不存在则都创建\n            FileUtils.writeStringToFile(new File(\"dir/testDir/test.json\"), \"{\\\"name\\\": \\\"zs\\\"}\");\n\n            // 拷贝文件\n            FileUtils.copyFile(new File(\"dir/testDir/test.json\"), new File(\"dir/testDir/testCopy.json\"));\n\n            // 强制删除\n            FileUtils.forceDelete(new File(\"dir/testDir/test.json\"));\n\n            // 强制创建目录，如果父级目录不存在则创建父级目录\n            FileUtils.forceMkdir(new File(\"dir/testDir2/test\"));\n\n            // 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！\n            // FileUtils.copyDirectory(new File(\"dir\"), new File(\"dir/dirCopy\"));\n            FileUtils.copyDirectory(new File(\"dir\"), new File(\"dirCopy\"));\n\n            // 列举目录下的文件（不是目录！）\n            List<String> coll = (List<String>) FileUtils.listFiles(new File(\"dir\"), FileFileFilter.FILE, DirectoryFileFilter.DIRECTORY);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n### StringUtils\n* org.apache.commons.lang3.StringUtils\n\n方法\n> isBlank\n> isEmpty\n> equals\n> split 字符串分割\n> EMPTY 返回空字符串\n> replace 替换字符串\n> capitalize 首字母大写\n\n***pom.xml***\n```\n<dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.8.1</version>\n</dependency>\n```\n\n* 示例：\n```\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Arrays;\n\n/**\n * @author Angus\n * @version 1.0\n * @Title: TestStringUtils\n * @Description: TODO\n * @date 2018/11/20 16:20\n */\npublic class TestStringUtils {\n\n    public static void main(String[] args) {\n        testStringUtils();\n    }\n\n    private static void testStringUtils() {\n        String str = \"Hello-StringUtils!\";\n\n        String str2 = \"Hello\";\n\n        boolean blank = StringUtils.isBlank(str);\n\n        boolean empty = StringUtils.isEmpty(str);\n\n        boolean equals = StringUtils.equals(str, str2);\n\n        String join = StringUtils.join(Arrays.asList(\"hello\", \"StringUtils\", \"!\"));\n        System.out.println(\"输出结果为： [hello, StringUtils, !] \");\n\n        // 字符串分割：默认是按空格分割\n        String[] splitStrBlank = StringUtils.split(str);\n        for (String s : splitStrBlank) {\n            System.out.println(s);\n        }\n        // 自定义风格符\n        String[] splitStrKey = StringUtils.split(str, \"-\");\n        for (String s : splitStrKey) {\n            System.out.println(s);\n        }\n        // 返回空字符串\n        String emptyStr = StringUtils.EMPTY;\n        System.out.println(emptyStr);\n\n        // 替换字符串\n        String replaceStr2 = StringUtils.replace(str2, \"Hello\", \"你好！\");\n        System.out.println(replaceStr2);\n\n        // 首字母大写\n        String capitalizeStr2 = StringUtils.capitalize(str2.toLowerCase());\n        System.out.println(capitalizeStr2);\n    }\n}\n\n```\n","slug":"Java工具类","published":1,"updated":"2019-04-20T12:29:57.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsx0019vq6bi8ltiq4u","content":"<h3 id=\"ioutils\">IOUtils</h3>\n<ul>\n<li>org.apache.commons.io.IOUtils</li>\n</ul>\n<p>方法：</p>\n<blockquote>\n<p>readLines 从输入流中读取多行数据<br>\nwrite 把字节. 字符等写入输出流<br>\ntoInputStream 将字符串转化为输入流<br>\ntoString 转化IO流、byte[]、Url为String<br>\ntoByteArray<br>\ncopy 拷贝文件，支持2G以上的数据<br>\nlineIterator 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败<br>\ncloseQuietly 关闭流</p>\n</blockquote>\n<p><strong><em>pom.xml</em></strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class=\"line\">\t &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\">import org.apache.commons.io.LineIterator;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestIOUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 13:13</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestIOUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testIOUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testIOUtils() &#123;</span><br><span class=\"line\">        File file = new File(&quot;test.json&quot;);</span><br><span class=\"line\">        FileInputStream in = null;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            in = new FileInputStream(file);</span><br><span class=\"line\">            out = new FileOutputStream(&quot;testCopy.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 从输入流中读取多行数据</span><br><span class=\"line\">            List&lt;String&gt; list = IOUtils.readLines(in, &quot;UTF-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            StringBuffer str = new StringBuffer();</span><br><span class=\"line\">            list.forEach(value -&gt; &#123;</span><br><span class=\"line\">                str.append(value);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 把字节. 字符等写入输出流</span><br><span class=\"line\">            IOUtils.write(str, out, &quot;UTF-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            // 将字符串转化为输入流</span><br><span class=\"line\">            String testWord = &quot;Hello IoUtils!&quot;;</span><br><span class=\"line\">            InputStream in2 = IOUtils.toInputStream(testWord);</span><br><span class=\"line\"></span><br><span class=\"line\">            // toString转化IO流、byte[]、Url为String</span><br><span class=\"line\">            String inStr = IOUtils.toString(in2, &quot;UTF-8&quot;);</span><br><span class=\"line\">            byte[] bytes = IOUtils.toByteArray(in2);</span><br><span class=\"line\">            String byteStr = IOUtils.toString(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件，支持2G以上的数据</span><br><span class=\"line\">            int count = IOUtils.copy(in, out);</span><br><span class=\"line\">            String response = count &gt; 0 ? &quot;拷贝成功&quot; : &quot;拷贝失败，count &gt; 2147483647L&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败</span><br><span class=\"line\">            LineIterator lineIterator = IOUtils.lineIterator(new FileInputStream(new File(&quot;test.json&quot;)), &quot;UTF-8&quot;);</span><br><span class=\"line\">            while (lineIterator.hasNext()) &#123;</span><br><span class=\"line\">                String line = lineIterator.nextLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lineIterator.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            IOUtils.closeQuietly(in);</span><br><span class=\"line\">            IOUtils.closeQuietly(out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"fileutils\">FileUtils</h3>\n<ul>\n<li>org.apache.commons.io.FileUtils</li>\n</ul>\n<p>方法：</p>\n<blockquote>\n<p>forceMkdir 强制创建文件夹，如果父级目录不存在则先创建父级目录<br>\ndeleteDirectory 删除文件夹<br>\nwriteStringToFile 将String写入文件中，如果文件目录不存在则都创建<br>\ncopyFile 拷贝文件<br>\nforceDelete 强制删除<br>\nforceMkdir 强制创建目录，如果父级目录不存在则创建父级目录<br>\ncopyDirectory 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！<br>\nlistFiles 列举目录下的文件（不是目录！）</p>\n</blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.FileUtils;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.FileFileFilter;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.IOFileFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestFileUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 15:44</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestFileUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testFileUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testFileUtils() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 强制创建文件夹，如果父级目录不存在则先创建父级目录</span><br><span class=\"line\">            FileUtils.forceMkdir(new File(&quot;dir/testDir&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 删除文件夹</span><br><span class=\"line\">            FileUtils.deleteDirectory(new File(&quot;dir&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 将String写入文件中，如果文件目录不存在则都创建</span><br><span class=\"line\">            FileUtils.writeStringToFile(new File(&quot;dir/testDir/test.json&quot;), &quot;&#123;\\&quot;name\\&quot;: \\&quot;zs\\&quot;&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件</span><br><span class=\"line\">            FileUtils.copyFile(new File(&quot;dir/testDir/test.json&quot;), new File(&quot;dir/testDir/testCopy.json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 强制删除</span><br><span class=\"line\">            FileUtils.forceDelete(new File(&quot;dir/testDir/test.json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 强制创建目录，如果父级目录不存在则创建父级目录</span><br><span class=\"line\">            FileUtils.forceMkdir(new File(&quot;dir/testDir2/test&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！</span><br><span class=\"line\">            // FileUtils.copyDirectory(new File(&quot;dir&quot;), new File(&quot;dir/dirCopy&quot;));</span><br><span class=\"line\">            FileUtils.copyDirectory(new File(&quot;dir&quot;), new File(&quot;dirCopy&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 列举目录下的文件（不是目录！）</span><br><span class=\"line\">            List&lt;String&gt; coll = (List&lt;String&gt;) FileUtils.listFiles(new File(&quot;dir&quot;), FileFileFilter.FILE, DirectoryFileFilter.DIRECTORY);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"stringutils\">StringUtils</h3>\n<ul>\n<li>org.apache.commons.lang3.StringUtils</li>\n</ul>\n<p>方法</p>\n<blockquote>\n<p>isBlank<br>\nisEmpty<br>\nequals<br>\nsplit 字符串分割<br>\nEMPTY 返回空字符串<br>\nreplace 替换字符串<br>\ncapitalize 首字母大写</p>\n</blockquote>\n<p><strong><em>pom.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestStringUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 16:20</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStringUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testStringUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testStringUtils() &#123;</span><br><span class=\"line\">        String str = &quot;Hello-StringUtils!&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String str2 = &quot;Hello&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean blank = StringUtils.isBlank(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean empty = StringUtils.isEmpty(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean equals = StringUtils.equals(str, str2);</span><br><span class=\"line\"></span><br><span class=\"line\">        String join = StringUtils.join(Arrays.asList(&quot;hello&quot;, &quot;StringUtils&quot;, &quot;!&quot;));</span><br><span class=\"line\">        System.out.println(&quot;输出结果为： [hello, StringUtils, !] &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 字符串分割：默认是按空格分割</span><br><span class=\"line\">        String[] splitStrBlank = StringUtils.split(str);</span><br><span class=\"line\">        for (String s : splitStrBlank) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 自定义风格符</span><br><span class=\"line\">        String[] splitStrKey = StringUtils.split(str, &quot;-&quot;);</span><br><span class=\"line\">        for (String s : splitStrKey) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 返回空字符串</span><br><span class=\"line\">        String emptyStr = StringUtils.EMPTY;</span><br><span class=\"line\">        System.out.println(emptyStr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 替换字符串</span><br><span class=\"line\">        String replaceStr2 = StringUtils.replace(str2, &quot;Hello&quot;, &quot;你好！&quot;);</span><br><span class=\"line\">        System.out.println(replaceStr2);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 首字母大写</span><br><span class=\"line\">        String capitalizeStr2 = StringUtils.capitalize(str2.toLowerCase());</span><br><span class=\"line\">        System.out.println(capitalizeStr2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3>IOUtils</h3>\n<ul>\n<li>org.apache.commons.io.IOUtils</li>\n</ul>\n<p>方法：</p>\n<blockquote>\n<p>readLines 从输入流中读取多行数据<br>\nwrite 把字节. 字符等写入输出流<br>\ntoInputStream 将字符串转化为输入流<br>\ntoString 转化IO流、byte[]、Url为String<br>\ntoByteArray<br>\ncopy 拷贝文件，支持2G以上的数据<br>\nlineIterator 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败<br>\ncloseQuietly 关闭流</p>\n</blockquote>\n<p><strong><em>pom.xml</em></strong></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class=\"line\">\t &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\">import org.apache.commons.io.LineIterator;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestIOUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 13:13</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestIOUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testIOUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testIOUtils() &#123;</span><br><span class=\"line\">        File file = new File(&quot;test.json&quot;);</span><br><span class=\"line\">        FileInputStream in = null;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            in = new FileInputStream(file);</span><br><span class=\"line\">            out = new FileOutputStream(&quot;testCopy.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 从输入流中读取多行数据</span><br><span class=\"line\">            List&lt;String&gt; list = IOUtils.readLines(in, &quot;UTF-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            StringBuffer str = new StringBuffer();</span><br><span class=\"line\">            list.forEach(value -&gt; &#123;</span><br><span class=\"line\">                str.append(value);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 把字节. 字符等写入输出流</span><br><span class=\"line\">            IOUtils.write(str, out, &quot;UTF-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            // 将字符串转化为输入流</span><br><span class=\"line\">            String testWord = &quot;Hello IoUtils!&quot;;</span><br><span class=\"line\">            InputStream in2 = IOUtils.toInputStream(testWord);</span><br><span class=\"line\"></span><br><span class=\"line\">            // toString转化IO流、byte[]、Url为String</span><br><span class=\"line\">            String inStr = IOUtils.toString(in2, &quot;UTF-8&quot;);</span><br><span class=\"line\">            byte[] bytes = IOUtils.toByteArray(in2);</span><br><span class=\"line\">            String byteStr = IOUtils.toString(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件，支持2G以上的数据</span><br><span class=\"line\">            int count = IOUtils.copy(in, out);</span><br><span class=\"line\">            String response = count &gt; 0 ? &quot;拷贝成功&quot; : &quot;拷贝失败，count &gt; 2147483647L&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败</span><br><span class=\"line\">            LineIterator lineIterator = IOUtils.lineIterator(new FileInputStream(new File(&quot;test.json&quot;)), &quot;UTF-8&quot;);</span><br><span class=\"line\">            while (lineIterator.hasNext()) &#123;</span><br><span class=\"line\">                String line = lineIterator.nextLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lineIterator.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            IOUtils.closeQuietly(in);</span><br><span class=\"line\">            IOUtils.closeQuietly(out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>FileUtils</h3>\n<ul>\n<li>org.apache.commons.io.FileUtils</li>\n</ul>\n<p>方法：</p>\n<blockquote>\n<p>forceMkdir 强制创建文件夹，如果父级目录不存在则先创建父级目录<br>\ndeleteDirectory 删除文件夹<br>\nwriteStringToFile 将String写入文件中，如果文件目录不存在则都创建<br>\ncopyFile 拷贝文件<br>\nforceDelete 强制删除<br>\nforceMkdir 强制创建目录，如果父级目录不存在则创建父级目录<br>\ncopyDirectory 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！<br>\nlistFiles 列举目录下的文件（不是目录！）</p>\n</blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.FileUtils;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.FileFileFilter;</span><br><span class=\"line\">import org.apache.commons.io.filefilter.IOFileFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestFileUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 15:44</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestFileUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testFileUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testFileUtils() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 强制创建文件夹，如果父级目录不存在则先创建父级目录</span><br><span class=\"line\">            FileUtils.forceMkdir(new File(&quot;dir/testDir&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 删除文件夹</span><br><span class=\"line\">            FileUtils.deleteDirectory(new File(&quot;dir&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 将String写入文件中，如果文件目录不存在则都创建</span><br><span class=\"line\">            FileUtils.writeStringToFile(new File(&quot;dir/testDir/test.json&quot;), &quot;&#123;\\&quot;name\\&quot;: \\&quot;zs\\&quot;&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件</span><br><span class=\"line\">            FileUtils.copyFile(new File(&quot;dir/testDir/test.json&quot;), new File(&quot;dir/testDir/testCopy.json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 强制删除</span><br><span class=\"line\">            FileUtils.forceDelete(new File(&quot;dir/testDir/test.json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 强制创建目录，如果父级目录不存在则创建父级目录</span><br><span class=\"line\">            FileUtils.forceMkdir(new File(&quot;dir/testDir2/test&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 拷贝文件夹！ 【警告】如下操作（创建子文件夹），会造成死循环！</span><br><span class=\"line\">            // FileUtils.copyDirectory(new File(&quot;dir&quot;), new File(&quot;dir/dirCopy&quot;));</span><br><span class=\"line\">            FileUtils.copyDirectory(new File(&quot;dir&quot;), new File(&quot;dirCopy&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            // 列举目录下的文件（不是目录！）</span><br><span class=\"line\">            List&lt;String&gt; coll = (List&lt;String&gt;) FileUtils.listFiles(new File(&quot;dir&quot;), FileFileFilter.FILE, DirectoryFileFilter.DIRECTORY);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>StringUtils</h3>\n<ul>\n<li>org.apache.commons.lang3.StringUtils</li>\n</ul>\n<p>方法</p>\n<blockquote>\n<p>isBlank<br>\nisEmpty<br>\nequals<br>\nsplit 字符串分割<br>\nEMPTY 返回空字符串<br>\nreplace 替换字符串<br>\ncapitalize 首字母大写</p>\n</blockquote>\n<p><strong><em>pom.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Angus</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Title: TestStringUtils</span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @date 2018/11/20 16:20</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStringUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testStringUtils();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void testStringUtils() &#123;</span><br><span class=\"line\">        String str = &quot;Hello-StringUtils!&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String str2 = &quot;Hello&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean blank = StringUtils.isBlank(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean empty = StringUtils.isEmpty(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean equals = StringUtils.equals(str, str2);</span><br><span class=\"line\"></span><br><span class=\"line\">        String join = StringUtils.join(Arrays.asList(&quot;hello&quot;, &quot;StringUtils&quot;, &quot;!&quot;));</span><br><span class=\"line\">        System.out.println(&quot;输出结果为： [hello, StringUtils, !] &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 字符串分割：默认是按空格分割</span><br><span class=\"line\">        String[] splitStrBlank = StringUtils.split(str);</span><br><span class=\"line\">        for (String s : splitStrBlank) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 自定义风格符</span><br><span class=\"line\">        String[] splitStrKey = StringUtils.split(str, &quot;-&quot;);</span><br><span class=\"line\">        for (String s : splitStrKey) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 返回空字符串</span><br><span class=\"line\">        String emptyStr = StringUtils.EMPTY;</span><br><span class=\"line\">        System.out.println(emptyStr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 替换字符串</span><br><span class=\"line\">        String replaceStr2 = StringUtils.replace(str2, &quot;Hello&quot;, &quot;你好！&quot;);</span><br><span class=\"line\">        System.out.println(replaceStr2);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 首字母大写</span><br><span class=\"line\">        String capitalizeStr2 = StringUtils.capitalize(str2.toLowerCase());</span><br><span class=\"line\">        System.out.println(capitalizeStr2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Kafka总结","date":"2018-04-07T04:57:09.000Z","_content":"\n### 什么是Kafka\n由LinkedIn在11年开源，还有例如：分布式数据同步系统Databus、高性能计算引擎Cubert、Java异步处理框架ParSeq。 \n<!-- more -->\n![* streaming platform has three key capabilities:\n\t* Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.\n\t* Store streams of records in a fault-tolerant durable way.\n\t* Process streams of records as they occur.](https://img-blog.csdnimg.cn/20190331203053858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331203206419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## \bKafka基本概念\n* Producer：消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务\n* Consumer：消息和数据的消费者，订阅数据（Topic）并且处理其发布的消息的进程/代码/服务。\n* Consumer Group：逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。\n* Broker：物理概念，Kafka集群中的每个Kafka节点。\n* Topic：逻辑概念，Kafka消息的类别，对数据进行区分、隔离。\n* Partition：物理概念，Kafka下数据存储的基本单元。一个Topic数据会被分散存储到多个Partition，每个Partition是有序的。\n* Replication：同一个Partition可能会有多个Replica，多个Replica之间数据是一样的。\n* Replication Leader：一个Partition的多个Replica上，需要个Leader负责该Partition上与Producer和Consumer交互，Leader有且只有一个。\n* ReplicaManager：负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等。\n\n## Kafka基本结构\n\n![ ](https://img-blog.csdnimg.cn/20190331210155617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331210315693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n## Kafka消息结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331210426387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## Kafka的特点\n\n分布式\n* 多分区\n* 多副本\n* 多订阅者\n* 基于Zookeeper消息调度\n \n高性能\n* 高吞吐量\n* 低延迟\n* 高并发\n* 时间复杂度为O(1)\n\n持久性与扩展性\n* 数据可持久化\n* 容错性\n* 支持在线水平扩展\n* 消息自动平衡\n\n## Kafka应用场景\n\n* 消息队列\n* 行为跟踪\n* 元信息监控\n* 日志收集\n* 流处理\n* 事件源\n* 持久性日志（commit log）\n\n## Kafka应用案例\n\n## Kafka代码案例\n\n## Kafka高级特性之消息事务\n\n## Kafka高级特性之零拷贝\n","source":"_posts/Kafka总结.md","raw":"---\ntitle: Kafka总结\ncategories: Kafka\ntags: kafka\ndate: 2018-04-07 12:57:09\n---\n\n### 什么是Kafka\n由LinkedIn在11年开源，还有例如：分布式数据同步系统Databus、高性能计算引擎Cubert、Java异步处理框架ParSeq。 \n<!-- more -->\n![* streaming platform has three key capabilities:\n\t* Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.\n\t* Store streams of records in a fault-tolerant durable way.\n\t* Process streams of records as they occur.](https://img-blog.csdnimg.cn/20190331203053858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331203206419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## \bKafka基本概念\n* Producer：消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务\n* Consumer：消息和数据的消费者，订阅数据（Topic）并且处理其发布的消息的进程/代码/服务。\n* Consumer Group：逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。\n* Broker：物理概念，Kafka集群中的每个Kafka节点。\n* Topic：逻辑概念，Kafka消息的类别，对数据进行区分、隔离。\n* Partition：物理概念，Kafka下数据存储的基本单元。一个Topic数据会被分散存储到多个Partition，每个Partition是有序的。\n* Replication：同一个Partition可能会有多个Replica，多个Replica之间数据是一样的。\n* Replication Leader：一个Partition的多个Replica上，需要个Leader负责该Partition上与Producer和Consumer交互，Leader有且只有一个。\n* ReplicaManager：负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等。\n\n## Kafka基本结构\n\n![ ](https://img-blog.csdnimg.cn/20190331210155617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331210315693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n## Kafka消息结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190331210426387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n## Kafka的特点\n\n分布式\n* 多分区\n* 多副本\n* 多订阅者\n* 基于Zookeeper消息调度\n \n高性能\n* 高吞吐量\n* 低延迟\n* 高并发\n* 时间复杂度为O(1)\n\n持久性与扩展性\n* 数据可持久化\n* 容错性\n* 支持在线水平扩展\n* 消息自动平衡\n\n## Kafka应用场景\n\n* 消息队列\n* 行为跟踪\n* 元信息监控\n* 日志收集\n* 流处理\n* 事件源\n* 持久性日志（commit log）\n\n## Kafka应用案例\n\n## Kafka代码案例\n\n## Kafka高级特性之消息事务\n\n## Kafka高级特性之零拷贝\n","slug":"Kafka总结","published":1,"updated":"2019-04-20T12:32:26.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsy001cvq6bomu36o7b","content":"<h3 id=\"什么是kafka\">什么是Kafka</h3>\n<p>由LinkedIn在11年开源，还有例如：分布式数据同步系统Databus、高性能计算引擎Cubert、Java异步处理框架ParSeq。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331203053858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"* streaming platform has three key capabilities:\t* Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.\t* Store streams of records in a fault-tolerant durable way.\t* Process streams of records as they occur.\"><br>\n<img src=\"https://img-blog.csdnimg.cn/20190331203206419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"kafka基本概念\">\bKafka基本概念</h2>\n<ul>\n<li>Producer：消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务</li>\n<li>Consumer：消息和数据的消费者，订阅数据（Topic）并且处理其发布的消息的进程/代码/服务。</li>\n<li>Consumer Group：逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。</li>\n<li>Broker：物理概念，Kafka集群中的每个Kafka节点。</li>\n<li>Topic：逻辑概念，Kafka消息的类别，对数据进行区分、隔离。</li>\n<li>Partition：物理概念，Kafka下数据存储的基本单元。一个Topic数据会被分散存储到多个Partition，每个Partition是有序的。</li>\n<li>Replication：同一个Partition可能会有多个Replica，多个Replica之间数据是一样的。</li>\n<li>Replication Leader：一个Partition的多个Replica上，需要个Leader负责该Partition上与Producer和Consumer交互，Leader有且只有一个。</li>\n<li>ReplicaManager：负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等。</li>\n</ul>\n<h2 id=\"kafka基本结构\">Kafka基本结构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331210155617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\" \"><br>\n<img src=\"https://img-blog.csdnimg.cn/20190331210315693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"kafka消息结构\">Kafka消息结构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331210426387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"kafka的特点\">Kafka的特点</h2>\n<p>分布式</p>\n<ul>\n<li>多分区</li>\n<li>多副本</li>\n<li>多订阅者</li>\n<li>基于Zookeeper消息调度</li>\n</ul>\n<p>高性能</p>\n<ul>\n<li>高吞吐量</li>\n<li>低延迟</li>\n<li>高并发</li>\n<li>时间复杂度为O(1)</li>\n</ul>\n<p>持久性与扩展性</p>\n<ul>\n<li>数据可持久化</li>\n<li>容错性</li>\n<li>支持在线水平扩展</li>\n<li>消息自动平衡</li>\n</ul>\n<h2 id=\"kafka应用场景\">Kafka应用场景</h2>\n<ul>\n<li>消息队列</li>\n<li>行为跟踪</li>\n<li>元信息监控</li>\n<li>日志收集</li>\n<li>流处理</li>\n<li>事件源</li>\n<li>持久性日志（commit log）</li>\n</ul>\n<h2 id=\"kafka应用案例\">Kafka应用案例</h2>\n<h2 id=\"kafka代码案例\">Kafka代码案例</h2>\n<h2 id=\"kafka高级特性之消息事务\">Kafka高级特性之消息事务</h2>\n<h2 id=\"kafka高级特性之零拷贝\">Kafka高级特性之零拷贝</h2>\n","site":{"data":{}},"excerpt":"<h3>什么是Kafka</h3>\n<p>由LinkedIn在11年开源，还有例如：分布式数据同步系统Databus、高性能计算引擎Cubert、Java异步处理框架ParSeq。</p>","more":"<p><img src=\"https://img-blog.csdnimg.cn/20190331203053858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"* streaming platform has three key capabilities:\t* Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.\t* Store streams of records in a fault-tolerant durable way.\t* Process streams of records as they occur.\"><br>\n<img src=\"https://img-blog.csdnimg.cn/20190331203206419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2>\bKafka基本概念</h2>\n<ul>\n<li>Producer：消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务</li>\n<li>Consumer：消息和数据的消费者，订阅数据（Topic）并且处理其发布的消息的进程/代码/服务。</li>\n<li>Consumer Group：逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。</li>\n<li>Broker：物理概念，Kafka集群中的每个Kafka节点。</li>\n<li>Topic：逻辑概念，Kafka消息的类别，对数据进行区分、隔离。</li>\n<li>Partition：物理概念，Kafka下数据存储的基本单元。一个Topic数据会被分散存储到多个Partition，每个Partition是有序的。</li>\n<li>Replication：同一个Partition可能会有多个Replica，多个Replica之间数据是一样的。</li>\n<li>Replication Leader：一个Partition的多个Replica上，需要个Leader负责该Partition上与Producer和Consumer交互，Leader有且只有一个。</li>\n<li>ReplicaManager：负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等。</li>\n</ul>\n<h2>Kafka基本结构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331210155617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\" \"><br>\n<img src=\"https://img-blog.csdnimg.cn/20190331210315693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2>Kafka消息结构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331210426387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2>Kafka的特点</h2>\n<p>分布式</p>\n<ul>\n<li>多分区</li>\n<li>多副本</li>\n<li>多订阅者</li>\n<li>基于Zookeeper消息调度</li>\n</ul>\n<p>高性能</p>\n<ul>\n<li>高吞吐量</li>\n<li>低延迟</li>\n<li>高并发</li>\n<li>时间复杂度为O(1)</li>\n</ul>\n<p>持久性与扩展性</p>\n<ul>\n<li>数据可持久化</li>\n<li>容错性</li>\n<li>支持在线水平扩展</li>\n<li>消息自动平衡</li>\n</ul>\n<h2>Kafka应用场景</h2>\n<ul>\n<li>消息队列</li>\n<li>行为跟踪</li>\n<li>元信息监控</li>\n<li>日志收集</li>\n<li>流处理</li>\n<li>事件源</li>\n<li>持久性日志（commit log）</li>\n</ul>\n<h2>Kafka应用案例</h2>\n<h2>Kafka代码案例</h2>\n<h2>Kafka高级特性之消息事务</h2>\n<h2>Kafka高级特性之零拷贝</h2>"},{"title":"Java多线程技能","time":"2019-04-20T12:21:19.000Z","_content":"# 进程和多线程的概念及线程的优点\n## 进程\n操作系统的基础；是一次程序的执行；是系统进行资源分配和调度的一个独立单位。\n\n## 线程\n进程中独立运行的子任务。\n\n## 多线程的优点\n可以极大的利用CPU的空闲时间来处理其他的任务，即同一时间内运行更多不同种类的任务。\n\n# 使用多线程\n一个进程中至少有一个线程在运行\n\n```\npublic class MainThread {\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n```\n\n## 实现多线程的两种方式\n\n1⃣️继承Thread           2⃣️实现Runnable\n\n### 继承Thread类\n类只能单根继承，不可多继承\n```\npublic class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"MyThread\");\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        myThread.start();\n        System.out.println(\"运行结束！\");\n    }\n}\n```\n运行结果：\n```\n运行结束！\nMyThread\n```\n结论：在执行多线程时，代码的运行结果与代码执行顺序或调用顺序是无关的。（线程的随机性）\n\n### 实现Runnable接口\n接口可以多实现\nThread实现了Runnable接口\n```\npublic class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"MyRunnable\");\n    }\n\n    public static void main(String[] args) {\n        new Thread(new MyRunnable()).start();\n        System.out.println(\"执行了\");\n    }\n}\n```\n运行结果：\n```\nMyRunnable\n执行了\n```\n结论：推荐使用Runnable接口，因为Java类只能单继承\n\n### 实例变量和线程安全\n自定义线程中的实例变量针对其他线程有共享和不共享之分。\n#### 不共享\n\n```\npublic class NoSharedThread extends Thread{\n\n    private int count = 5;\n\n    public NoSharedThread(String name) {\n        this.setName(name);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n\n        while (count > 0) {\n            System.out.println(Thread.currentThread().getName() + \": \" + count);\n            count --;\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new NoSharedThread(\"线程1\").start();\n        new NoSharedThread(\"线程2\").start();\n        new NoSharedThread(\"线程3\").start();\n    }\n}\n```\n运行结果\n```\n线程1: 5\n线程2: 5\n线程2: 4\n线程2: 3\n线程2: 2\n线程2: 1\n线程1: 4\n线程1: 3\n线程1: 2\n线程1: 1\n线程3: 5\n线程3: 4\n线程3: 3\n线程3: 2\n线程3: 1\n```\n结论：每个线程使用各自的count变量\n\n#### 共享\n\n分析 ***i - -*** ：\n\n```\n1. 取得原有i的值\n2. 计算 i - 1\n3. 将 i - 1 的值赋给 i\n\n结论：如果有多个线程同时访问i，那么会垂岸非线程安全问题\n```\n\n\n未加锁\n```\npublic class SharedThread extends Thread{\n\n    private int count = 5;\n\n    @Override\n    public void run() {\n        super.run();\n        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！\n        System.out.println(Thread.currentThread().getName() + \": \" + count);\n\n    }\n\n    public static void main(String[] args) {\n        SharedThread sharedThread = new SharedThread();\n        Thread t1 = new Thread(sharedThread, \"a\");\n        Thread t2 = new Thread(sharedThread, \"b\");\n        Thread t3 = new Thread(sharedThread, \"c\");\n        Thread t4 = new Thread(sharedThread, \"d\");\n        Thread t5 = new Thread(sharedThread, \"e\");\n\n        t1.start();\n        t2.start();\n        t3.start();\n        t4.start();\n        t5.start();\n    }\n}\n\n```\n运行结果：\n\n```\nb: 3\na: 3\nc: 2\nd: 1\ne: 0\n```\n结论： 出现了a、b两个读到相同的值3，造成线程不安全。\n\n\n解决方式：\n\n给 run方法加锁\n\n```\n   @Override\n   synchronized  public void run() {\n        super.run();\n        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！\n        System.out.println(Thread.currentThread().getName() + \": \" + count);\n    }\n```\n分析：多个线程访问run方法时，以排队的方式进行处理，当一个线程调用run方法前，先检查run方法是否被上锁，如果是则等待其他线程执行完释放锁后才能执行。如果否则对run方法加锁，执行结束后释放锁。加锁的这块代码称为**互斥区**或**临界区**。\n\n\n### 留意i- -与System.out.println()的异常\n结论：println()方法在内部是同步的，但i- -的操作确实在进入println()之前发生的，所以有发生非线程安全问题的概率。\n所以为了防止发生非线程安全问题，还是应继续使用同步方法。\n\n\n## currentThread() 方法\ncurrentThread()可返回代码段被哪个线程调用的信息\n\n例如：\n```\n\npublic class CurrentThread extends Thread {\n\n    public CurrentThread() {\n        System.out.println(\"构造方法执行：\" + Thread.currentThread().getName());\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"run方法执行：\" + Thread.currentThread().getName());\n    }\n\n\n    public static void main(String[] args) {\n        CurrentThread currentThread = new CurrentThread();\n        // 自动调用run方法\n        currentThread.start();\n        // 手动调用run方法\n        currentThread.run();\n    }\n}\n```\n运行结果：\n\n```\n构造方法执行：main\nrun方法执行：Thread-0\nrun方法执行：main\n```\n结论：\n1.构造方法被main线程调用，run方法被Thread-0线程调用，run方法是自动调用的方法，\n如果手动调用run方法，则是被main线程调用的\n2.构造方法优先执行与run方法\n\n## isAlive()方法\nisAlive()是检查线程是否处于活动状态\n活动状态指的是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为是“存活的”。\n\n```\npublic class IsAliveThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"run:\" + Thread.currentThread().isAlive());\n    }\n\n    public static void main(String[] args) {\n        IsAliveThread isAliveThread = new IsAliveThread();\n        System.out.println(\"begin: \" + isAliveThread.isAlive());\n        isAliveThread.start();\n        System.out.println(\"end: \" + isAliveThread.isAlive());\n    }\n}\n```\n运行结果：\n\n```\nbegin: false\nend: true\nrun:true\n```\n或\n\n```\nbegin: false\nend: true\nrun:false\n```\n结论：start方法后线程状态可能存活可能不存活\n\n## sleep()方法\n在指定的毫秒数内让当前执行的线程休眠（暂停执行），当前执行的线程是指this.currentThread()返回的线程。\n\n```\npublic class SleepThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        try {\n            System.out.println(\"run :\" + this.currentThread().getName() + \" begin\");\n            sleep(10);\n            System.out.println(\"run :\" + this.currentThread().getName() + \" end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SleepThread sleepThread = new SleepThread();\n        System.out.println(\"begin: \" + System.currentTimeMillis());\n        sleepThread.start();\n        System.out.println(\"end: \" + System.currentTimeMillis());\n    }\n}\n```\n运行结果：\n\n```\nbegin: 1555750009067\nend: 1555750009074\nrun :Thread-0 begin\nrun :Thread-0 end\n```\n分析： 由于main和Thread-0是异步的，所以先打印begin和end，而SleepThread是随后运行的，所以打印出run begin和run end\n\n## getId() 方法\n获取线程的唯一标识\n\n```\npublic static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName() + \" : \"+ currentThread().getId());\n    }\n```\n运行结果：\n\n```\nmain : 1\n```\n分析：当前线程名为main，id为1。\n\n## 停止线程\n在线程执行完成之前停止正在做的操作。禁止用Thread.stop()方法，因为是不安全（unsafe）的，并且已经被废弃（deprecated）了。\n大多数停止线程使用Thread.interrupt()方法，但是这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。\nJava中有3个终止线程的方法：\n1.使用退出标志，使线程正常退出，也就是当run方法完成后线程终止\n2.使用stop强行终止，不推荐\n3.使用interrupt方法中断线程\n\n### 停止不了的线程\ninterrupt方法并不像for-break一样马上停止执行，而是仅仅在当前线程中打了一个停止的标记，并不是真正的停止线程。\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 1000000; i ++ ) {\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(5000);\n        interruptThread.interrupt();\n    }\n}\n```\n运行结果：\n\n```\n省略...\ni = 999990\ni = 999991\ni = 999992\ni = 999993\ni = 999994\ni = 999995\ni = 999996\ni = 999997\ni = 999998\ni = 999999\ni = 1000000\n```\n分析：调用interrupt方法并没有让线程停下来！！\n\n### 判断线程是否是停止状态\nThread.java类中提供了两种方法\n1.boolean   this.interrupted()：测试当前线程是否已经中断\n2.boolean   this.isInterrupted()：测试线程是否已经中断\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 1000; i ++ ) {\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(1000);\n        interruptThread.interrupt();\n        System.out.println(\"是否停止1？\"+ interruptThread.interrupted());\n        System.out.println(\"是否停止2？\"+ interruptThread.interrupted());\n    }\n}\n\n```\n\n运行结果：\n\n```\n省略...\ni = 994\ni = 995\ni = 996\ni = 997\ni = 998\ni = 999\ni = 1000\n是否停止1？false\n是否停止2？false\n```\n分析：判断interruptThread对象是否停止，但控制台打印的结果显示，并未停止。验证了interrupted()方法的定义：测试当前线程是否已经中断，而当前线程是 main，从未中断过。所以打印的是两个false。\n\n如何在当前线程中产生中断效果呢？\n\n```\npublic class IsInterruptThread {\n    public static void main(String[] args) {\n        System.out.println(\"begin\");\n        Thread.currentThread().interrupt();\n        System.out.println(\"是否停止1？\" + Thread.interrupted());\n        System.out.println(\"是否停止2？\" + Thread.interrupted());\n        System.out.println(\"end\");\n    }\n}\n```\n运行结果：\n\n```\nbegin\n是否停止1？true\n是否停止2？false\nend\n```\n分析：interrupted方法的确判断出当前线程是否停止状态。\n为什么第二个会是false呢？因为interrupted有解除功能，线程的中断由interrupted方法解除。所以两次连续调用则第二次返回false。\n\nisInterrupted()方法\n\n```\npublic class IsInterruptThread {\n    public static void main(String[] args) {\n        System.out.println(\"begin\");\n        Thread.currentThread().interrupt();\n        System.out.println(\"是否停止1？\" + Thread.currentThread().isInterrupted());\n        System.out.println(\"是否停止2？\" + Thread.currentThread().isInterrupted());\n        System.out.println(\"end\");\n    }\n}\n```\n执行结果：\n\n```\nbegin\n是否停止1？true\n是否停止2？true\nend\n```\n分析：能判断线程是否是中断状态，但连续调用不清除状态标志。\n\n总结：\ninterrupted方法测试当前线程是否是中断状态，执行后具有将状态标志清除为false的功能；\nisInterrupted方法测试当前线程是否是中断状态，但不清除状态标志。\n\n### 能停止的线程——异常法\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 500000; i ++ ) {\n            if (this.isInterrupted()) {\n                // 已经是中断状态了，要退出了！\n                System.out.println(\"已经是中断状态了，要退出了！\");\n                break;\n            }\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(1000);\n        interruptThread.interrupt();\n    }\n}\n\n```\n运行结果：\n\n```\n省略...\ni = 117746\ni = 117747\ni = 117748\ni = 117749\ni = 117750\ni = 117751\ni = 117752\ni = 117753\n已经是中断状态了，要退出了！\n\n```\n\n### 在沉睡中停止\n\n```\npublic class SleepBeforeInterrupt extends Thread{\n\n    @Override\n    public void run() {\n        super.run();\n        try {\n            System.out.println(\"before:\" + this.isInterrupted());\n            Thread.sleep(200000);\n            System.out.println(\"....\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"end:\" + this.isInterrupted());\n    }\n\n    public static void main(String[] args) {\n        SleepBeforeInterrupt sleepBeforeInterrupt = new SleepBeforeInterrupt();\n        sleepBeforeInterrupt.start();\n        sleepBeforeInterrupt.interrupt();\n    }\n}\n```\n运行结果：\n\n```\njava.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat chapter1.SleepBeforeInterrupt.run(SleepBeforeInterrupt.java:10)\nbefore:true\nend:false\n```\n分析：如果在sleep状态下停止某一状态，会进入catch语句，并且清除停止状态值，使之变成false。\n简单说：先执行interrupt再运行sleep会出现异常。\n\n### 能停止的线程——暴力停止\n使用stop()停止线程是非常暴力的。\n\n### 方法stop()与java.lang.ThreadDeath异常\nstop方法已被作废，强制让线程停止有可能使一些清理性的工作得不到完成。另一情况就是对锁定的对象进行了“解锁”，导致数据得不到同步的处理，出现数据不一致的问题。\n\n### 释放锁的不良后果\n使用stop()释放锁将会给数据造成不一致性的后果。\n\n\n### 使用return停止线程\n将方法interrupt和return结合使用也能实现停止线程的效果\n\n```\npublic class InterruptReturn extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        while (true) {\n            if (this.isInterrupted()) {\n                System.out.println(\"执行interrupted了\");\n                return;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        InterruptReturn interruptReturn = new InterruptReturn();\n        interruptReturn.start();\n        try {\n            Thread.sleep(2000);\n            interruptReturn.interrupt();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n运行结果：\n\n```\n执行interrupted了\n```\n\n# 暂停线程\n暂停线程意味着暂停后还可以恢复运行；\n经常使用suspend()方法暂停，用resume()方法恢复线程的执行。\n## suspend和resume方法的使用\n\n```\npublic class SuspendResume extends Thread {\n\n    private int i;\n\n    @Override\n    public void run() {\n        super.run();\n        while (true) {\n            i ++;\n        }\n    }\n\n    public int getI() {\n        return i;\n    }\n\n    public void setI(int i) {\n        this.i = i;\n    }\n\n    public static void main(String[] args) {\n        try {\n            SuspendResume suspendResume = new SuspendResume();\n            suspendResume.start();\n            Thread.sleep(5000);\n\n            suspendResume.suspend();\n            System.out.println(\"A:\" + System.currentTimeMillis() + \" i=\" + suspendResume.getI());\n            suspendResume.resume();\n            Thread.sleep(5000);\n\n            suspendResume.suspend();\n            System.out.println(\"A:\" + System.currentTimeMillis() + \" i=\" + suspendResume.getI());\n            suspendResume.resume();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\nA:1555760257178 i=-2049930246\nA:1555760262182 i=506892209\n```\n## suspend和resume方法的缺点——独占\n\n## suspend和resume方法的缺点——不同步\n\n# yield()方法\nyield方法的作用是放弃当前的CPU资源，让给其他任务区占用CPU执行时间，但放弃的时间不确定，有可能刚放弃又重新获得CPU时间片。\n\n```\npublic class YieldThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        int count = 0;\n        long begin = System.currentTimeMillis();\n        System.out.println(\"开始时间：\" + begin);\n        for (int i = 0; i < 5000000; i++) {\n        \t// Thread.yield();\n            count = count + i;\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"结束时间：\" + end);\n        System.out.println(\"相差：\" + (end - begin));\n    }\n\n    public static void main(String[] args) {\n        YieldThread yieldThread = new YieldThread();\n        yieldThread.start();\n    }\n}\n\n```\n运行结果：\n1⃣️不用yield方法\n```\n开始时间：1555760862508\n结束时间：1555760862515\n相差：7\n```\n2⃣️用yield，打开注释\n```\n开始时间：1555760940292\n结束时间：1555760945941\n相差：5649\n```\n# 线程的优先级\n在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU的资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。\n设置线程的优先级有助于帮“线程规划器”确定下一次选择哪个线程来优先执行。\n设置线程的优先级使用setPriority()方法\n\nJDK源码：\n```\npublic final void setPriority(int newPriority) {\n        ThreadGroup g;\n        checkAccess();\n        if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {\n            throw new IllegalArgumentException();\n        }\n        if((g = getThreadGroup()) != null) {\n            if (newPriority > g.getMaxPriority()) {\n                newPriority = g.getMaxPriority();\n            }\n            setPriority0(priority = newPriority);\n        }\n    }\n```\n优先级分为1-10。\n## 线程优先级的继承特性\n线程的优先级具有继承性。例如：A线程启动B线程，则B的优先级和A是一样的。\n\n## 优先级具有规则性\n线程的优先级具有规则性，即CPU会尽量将执行资源分配给优先级高的线程。\n高优先级的线程总是大部分执行完，但不保证高优先级的线程全部先执行完。\n\n## 优先级具有随机性\n优先级高的不一定最先执行完。\n\n## 优先级高的运行得快\n\n# 守护线程\n在Java中线程分两种，一种是用户线程，一种是守护线程（daemon）。\n守护线程：是一种特殊的线程，它的特性有陪伴的意思，当进程中不存在非守护线程时，守护线程自动销毁。典型的是垃圾回收线程。\n\n","source":"_posts/Java多线程技能.md","raw":"\n---\ntitle: Java多线程技能\ncategories: Java多线程编程核心技术\ntags: 多线程\ntime: 2019-04-20 20:21:19\n---\n# 进程和多线程的概念及线程的优点\n## 进程\n操作系统的基础；是一次程序的执行；是系统进行资源分配和调度的一个独立单位。\n\n## 线程\n进程中独立运行的子任务。\n\n## 多线程的优点\n可以极大的利用CPU的空闲时间来处理其他的任务，即同一时间内运行更多不同种类的任务。\n\n# 使用多线程\n一个进程中至少有一个线程在运行\n\n```\npublic class MainThread {\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n```\n\n## 实现多线程的两种方式\n\n1⃣️继承Thread           2⃣️实现Runnable\n\n### 继承Thread类\n类只能单根继承，不可多继承\n```\npublic class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"MyThread\");\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        myThread.start();\n        System.out.println(\"运行结束！\");\n    }\n}\n```\n运行结果：\n```\n运行结束！\nMyThread\n```\n结论：在执行多线程时，代码的运行结果与代码执行顺序或调用顺序是无关的。（线程的随机性）\n\n### 实现Runnable接口\n接口可以多实现\nThread实现了Runnable接口\n```\npublic class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"MyRunnable\");\n    }\n\n    public static void main(String[] args) {\n        new Thread(new MyRunnable()).start();\n        System.out.println(\"执行了\");\n    }\n}\n```\n运行结果：\n```\nMyRunnable\n执行了\n```\n结论：推荐使用Runnable接口，因为Java类只能单继承\n\n### 实例变量和线程安全\n自定义线程中的实例变量针对其他线程有共享和不共享之分。\n#### 不共享\n\n```\npublic class NoSharedThread extends Thread{\n\n    private int count = 5;\n\n    public NoSharedThread(String name) {\n        this.setName(name);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n\n        while (count > 0) {\n            System.out.println(Thread.currentThread().getName() + \": \" + count);\n            count --;\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new NoSharedThread(\"线程1\").start();\n        new NoSharedThread(\"线程2\").start();\n        new NoSharedThread(\"线程3\").start();\n    }\n}\n```\n运行结果\n```\n线程1: 5\n线程2: 5\n线程2: 4\n线程2: 3\n线程2: 2\n线程2: 1\n线程1: 4\n线程1: 3\n线程1: 2\n线程1: 1\n线程3: 5\n线程3: 4\n线程3: 3\n线程3: 2\n线程3: 1\n```\n结论：每个线程使用各自的count变量\n\n#### 共享\n\n分析 ***i - -*** ：\n\n```\n1. 取得原有i的值\n2. 计算 i - 1\n3. 将 i - 1 的值赋给 i\n\n结论：如果有多个线程同时访问i，那么会垂岸非线程安全问题\n```\n\n\n未加锁\n```\npublic class SharedThread extends Thread{\n\n    private int count = 5;\n\n    @Override\n    public void run() {\n        super.run();\n        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！\n        System.out.println(Thread.currentThread().getName() + \": \" + count);\n\n    }\n\n    public static void main(String[] args) {\n        SharedThread sharedThread = new SharedThread();\n        Thread t1 = new Thread(sharedThread, \"a\");\n        Thread t2 = new Thread(sharedThread, \"b\");\n        Thread t3 = new Thread(sharedThread, \"c\");\n        Thread t4 = new Thread(sharedThread, \"d\");\n        Thread t5 = new Thread(sharedThread, \"e\");\n\n        t1.start();\n        t2.start();\n        t3.start();\n        t4.start();\n        t5.start();\n    }\n}\n\n```\n运行结果：\n\n```\nb: 3\na: 3\nc: 2\nd: 1\ne: 0\n```\n结论： 出现了a、b两个读到相同的值3，造成线程不安全。\n\n\n解决方式：\n\n给 run方法加锁\n\n```\n   @Override\n   synchronized  public void run() {\n        super.run();\n        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！\n        System.out.println(Thread.currentThread().getName() + \": \" + count);\n    }\n```\n分析：多个线程访问run方法时，以排队的方式进行处理，当一个线程调用run方法前，先检查run方法是否被上锁，如果是则等待其他线程执行完释放锁后才能执行。如果否则对run方法加锁，执行结束后释放锁。加锁的这块代码称为**互斥区**或**临界区**。\n\n\n### 留意i- -与System.out.println()的异常\n结论：println()方法在内部是同步的，但i- -的操作确实在进入println()之前发生的，所以有发生非线程安全问题的概率。\n所以为了防止发生非线程安全问题，还是应继续使用同步方法。\n\n\n## currentThread() 方法\ncurrentThread()可返回代码段被哪个线程调用的信息\n\n例如：\n```\n\npublic class CurrentThread extends Thread {\n\n    public CurrentThread() {\n        System.out.println(\"构造方法执行：\" + Thread.currentThread().getName());\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"run方法执行：\" + Thread.currentThread().getName());\n    }\n\n\n    public static void main(String[] args) {\n        CurrentThread currentThread = new CurrentThread();\n        // 自动调用run方法\n        currentThread.start();\n        // 手动调用run方法\n        currentThread.run();\n    }\n}\n```\n运行结果：\n\n```\n构造方法执行：main\nrun方法执行：Thread-0\nrun方法执行：main\n```\n结论：\n1.构造方法被main线程调用，run方法被Thread-0线程调用，run方法是自动调用的方法，\n如果手动调用run方法，则是被main线程调用的\n2.构造方法优先执行与run方法\n\n## isAlive()方法\nisAlive()是检查线程是否处于活动状态\n活动状态指的是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为是“存活的”。\n\n```\npublic class IsAliveThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"run:\" + Thread.currentThread().isAlive());\n    }\n\n    public static void main(String[] args) {\n        IsAliveThread isAliveThread = new IsAliveThread();\n        System.out.println(\"begin: \" + isAliveThread.isAlive());\n        isAliveThread.start();\n        System.out.println(\"end: \" + isAliveThread.isAlive());\n    }\n}\n```\n运行结果：\n\n```\nbegin: false\nend: true\nrun:true\n```\n或\n\n```\nbegin: false\nend: true\nrun:false\n```\n结论：start方法后线程状态可能存活可能不存活\n\n## sleep()方法\n在指定的毫秒数内让当前执行的线程休眠（暂停执行），当前执行的线程是指this.currentThread()返回的线程。\n\n```\npublic class SleepThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        try {\n            System.out.println(\"run :\" + this.currentThread().getName() + \" begin\");\n            sleep(10);\n            System.out.println(\"run :\" + this.currentThread().getName() + \" end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SleepThread sleepThread = new SleepThread();\n        System.out.println(\"begin: \" + System.currentTimeMillis());\n        sleepThread.start();\n        System.out.println(\"end: \" + System.currentTimeMillis());\n    }\n}\n```\n运行结果：\n\n```\nbegin: 1555750009067\nend: 1555750009074\nrun :Thread-0 begin\nrun :Thread-0 end\n```\n分析： 由于main和Thread-0是异步的，所以先打印begin和end，而SleepThread是随后运行的，所以打印出run begin和run end\n\n## getId() 方法\n获取线程的唯一标识\n\n```\npublic static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName() + \" : \"+ currentThread().getId());\n    }\n```\n运行结果：\n\n```\nmain : 1\n```\n分析：当前线程名为main，id为1。\n\n## 停止线程\n在线程执行完成之前停止正在做的操作。禁止用Thread.stop()方法，因为是不安全（unsafe）的，并且已经被废弃（deprecated）了。\n大多数停止线程使用Thread.interrupt()方法，但是这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。\nJava中有3个终止线程的方法：\n1.使用退出标志，使线程正常退出，也就是当run方法完成后线程终止\n2.使用stop强行终止，不推荐\n3.使用interrupt方法中断线程\n\n### 停止不了的线程\ninterrupt方法并不像for-break一样马上停止执行，而是仅仅在当前线程中打了一个停止的标记，并不是真正的停止线程。\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 1000000; i ++ ) {\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(5000);\n        interruptThread.interrupt();\n    }\n}\n```\n运行结果：\n\n```\n省略...\ni = 999990\ni = 999991\ni = 999992\ni = 999993\ni = 999994\ni = 999995\ni = 999996\ni = 999997\ni = 999998\ni = 999999\ni = 1000000\n```\n分析：调用interrupt方法并没有让线程停下来！！\n\n### 判断线程是否是停止状态\nThread.java类中提供了两种方法\n1.boolean   this.interrupted()：测试当前线程是否已经中断\n2.boolean   this.isInterrupted()：测试线程是否已经中断\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 1000; i ++ ) {\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(1000);\n        interruptThread.interrupt();\n        System.out.println(\"是否停止1？\"+ interruptThread.interrupted());\n        System.out.println(\"是否停止2？\"+ interruptThread.interrupted());\n    }\n}\n\n```\n\n运行结果：\n\n```\n省略...\ni = 994\ni = 995\ni = 996\ni = 997\ni = 998\ni = 999\ni = 1000\n是否停止1？false\n是否停止2？false\n```\n分析：判断interruptThread对象是否停止，但控制台打印的结果显示，并未停止。验证了interrupted()方法的定义：测试当前线程是否已经中断，而当前线程是 main，从未中断过。所以打印的是两个false。\n\n如何在当前线程中产生中断效果呢？\n\n```\npublic class IsInterruptThread {\n    public static void main(String[] args) {\n        System.out.println(\"begin\");\n        Thread.currentThread().interrupt();\n        System.out.println(\"是否停止1？\" + Thread.interrupted());\n        System.out.println(\"是否停止2？\" + Thread.interrupted());\n        System.out.println(\"end\");\n    }\n}\n```\n运行结果：\n\n```\nbegin\n是否停止1？true\n是否停止2？false\nend\n```\n分析：interrupted方法的确判断出当前线程是否停止状态。\n为什么第二个会是false呢？因为interrupted有解除功能，线程的中断由interrupted方法解除。所以两次连续调用则第二次返回false。\n\nisInterrupted()方法\n\n```\npublic class IsInterruptThread {\n    public static void main(String[] args) {\n        System.out.println(\"begin\");\n        Thread.currentThread().interrupt();\n        System.out.println(\"是否停止1？\" + Thread.currentThread().isInterrupted());\n        System.out.println(\"是否停止2？\" + Thread.currentThread().isInterrupted());\n        System.out.println(\"end\");\n    }\n}\n```\n执行结果：\n\n```\nbegin\n是否停止1？true\n是否停止2？true\nend\n```\n分析：能判断线程是否是中断状态，但连续调用不清除状态标志。\n\n总结：\ninterrupted方法测试当前线程是否是中断状态，执行后具有将状态标志清除为false的功能；\nisInterrupted方法测试当前线程是否是中断状态，但不清除状态标志。\n\n### 能停止的线程——异常法\n\n```\npublic class InterruptThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 500000; i ++ ) {\n            if (this.isInterrupted()) {\n                // 已经是中断状态了，要退出了！\n                System.out.println(\"已经是中断状态了，要退出了！\");\n                break;\n            }\n            System.out.println(\"i = \" + (i + 1));\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        InterruptThread interruptThread = new InterruptThread();\n        interruptThread.start();\n        sleep(1000);\n        interruptThread.interrupt();\n    }\n}\n\n```\n运行结果：\n\n```\n省略...\ni = 117746\ni = 117747\ni = 117748\ni = 117749\ni = 117750\ni = 117751\ni = 117752\ni = 117753\n已经是中断状态了，要退出了！\n\n```\n\n### 在沉睡中停止\n\n```\npublic class SleepBeforeInterrupt extends Thread{\n\n    @Override\n    public void run() {\n        super.run();\n        try {\n            System.out.println(\"before:\" + this.isInterrupted());\n            Thread.sleep(200000);\n            System.out.println(\"....\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"end:\" + this.isInterrupted());\n    }\n\n    public static void main(String[] args) {\n        SleepBeforeInterrupt sleepBeforeInterrupt = new SleepBeforeInterrupt();\n        sleepBeforeInterrupt.start();\n        sleepBeforeInterrupt.interrupt();\n    }\n}\n```\n运行结果：\n\n```\njava.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat chapter1.SleepBeforeInterrupt.run(SleepBeforeInterrupt.java:10)\nbefore:true\nend:false\n```\n分析：如果在sleep状态下停止某一状态，会进入catch语句，并且清除停止状态值，使之变成false。\n简单说：先执行interrupt再运行sleep会出现异常。\n\n### 能停止的线程——暴力停止\n使用stop()停止线程是非常暴力的。\n\n### 方法stop()与java.lang.ThreadDeath异常\nstop方法已被作废，强制让线程停止有可能使一些清理性的工作得不到完成。另一情况就是对锁定的对象进行了“解锁”，导致数据得不到同步的处理，出现数据不一致的问题。\n\n### 释放锁的不良后果\n使用stop()释放锁将会给数据造成不一致性的后果。\n\n\n### 使用return停止线程\n将方法interrupt和return结合使用也能实现停止线程的效果\n\n```\npublic class InterruptReturn extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        while (true) {\n            if (this.isInterrupted()) {\n                System.out.println(\"执行interrupted了\");\n                return;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        InterruptReturn interruptReturn = new InterruptReturn();\n        interruptReturn.start();\n        try {\n            Thread.sleep(2000);\n            interruptReturn.interrupt();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n运行结果：\n\n```\n执行interrupted了\n```\n\n# 暂停线程\n暂停线程意味着暂停后还可以恢复运行；\n经常使用suspend()方法暂停，用resume()方法恢复线程的执行。\n## suspend和resume方法的使用\n\n```\npublic class SuspendResume extends Thread {\n\n    private int i;\n\n    @Override\n    public void run() {\n        super.run();\n        while (true) {\n            i ++;\n        }\n    }\n\n    public int getI() {\n        return i;\n    }\n\n    public void setI(int i) {\n        this.i = i;\n    }\n\n    public static void main(String[] args) {\n        try {\n            SuspendResume suspendResume = new SuspendResume();\n            suspendResume.start();\n            Thread.sleep(5000);\n\n            suspendResume.suspend();\n            System.out.println(\"A:\" + System.currentTimeMillis() + \" i=\" + suspendResume.getI());\n            suspendResume.resume();\n            Thread.sleep(5000);\n\n            suspendResume.suspend();\n            System.out.println(\"A:\" + System.currentTimeMillis() + \" i=\" + suspendResume.getI());\n            suspendResume.resume();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\nA:1555760257178 i=-2049930246\nA:1555760262182 i=506892209\n```\n## suspend和resume方法的缺点——独占\n\n## suspend和resume方法的缺点——不同步\n\n# yield()方法\nyield方法的作用是放弃当前的CPU资源，让给其他任务区占用CPU执行时间，但放弃的时间不确定，有可能刚放弃又重新获得CPU时间片。\n\n```\npublic class YieldThread extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n        int count = 0;\n        long begin = System.currentTimeMillis();\n        System.out.println(\"开始时间：\" + begin);\n        for (int i = 0; i < 5000000; i++) {\n        \t// Thread.yield();\n            count = count + i;\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"结束时间：\" + end);\n        System.out.println(\"相差：\" + (end - begin));\n    }\n\n    public static void main(String[] args) {\n        YieldThread yieldThread = new YieldThread();\n        yieldThread.start();\n    }\n}\n\n```\n运行结果：\n1⃣️不用yield方法\n```\n开始时间：1555760862508\n结束时间：1555760862515\n相差：7\n```\n2⃣️用yield，打开注释\n```\n开始时间：1555760940292\n结束时间：1555760945941\n相差：5649\n```\n# 线程的优先级\n在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU的资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。\n设置线程的优先级有助于帮“线程规划器”确定下一次选择哪个线程来优先执行。\n设置线程的优先级使用setPriority()方法\n\nJDK源码：\n```\npublic final void setPriority(int newPriority) {\n        ThreadGroup g;\n        checkAccess();\n        if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {\n            throw new IllegalArgumentException();\n        }\n        if((g = getThreadGroup()) != null) {\n            if (newPriority > g.getMaxPriority()) {\n                newPriority = g.getMaxPriority();\n            }\n            setPriority0(priority = newPriority);\n        }\n    }\n```\n优先级分为1-10。\n## 线程优先级的继承特性\n线程的优先级具有继承性。例如：A线程启动B线程，则B的优先级和A是一样的。\n\n## 优先级具有规则性\n线程的优先级具有规则性，即CPU会尽量将执行资源分配给优先级高的线程。\n高优先级的线程总是大部分执行完，但不保证高优先级的线程全部先执行完。\n\n## 优先级具有随机性\n优先级高的不一定最先执行完。\n\n## 优先级高的运行得快\n\n# 守护线程\n在Java中线程分两种，一种是用户线程，一种是守护线程（daemon）。\n守护线程：是一种特殊的线程，它的特性有陪伴的意思，当进程中不存在非守护线程时，守护线程自动销毁。典型的是垃圾回收线程。\n\n","slug":"Java多线程技能","published":1,"date":"2019-04-20T12:22:02.079Z","updated":"2019-04-20T12:29:31.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xsz001gvq6b2n3gu3dh","content":"<h1 id=\"进程和多线程的概念及线程的优点\">进程和多线程的概念及线程的优点</h1>\n<h2 id=\"进程\">进程</h2>\n<p>操作系统的基础；是一次程序的执行；是系统进行资源分配和调度的一个独立单位。</p>\n<h2 id=\"线程\">线程</h2>\n<p>进程中独立运行的子任务。</p>\n<h2 id=\"多线程的优点\">多线程的优点</h2>\n<p>可以极大的利用CPU的空闲时间来处理其他的任务，即同一时间内运行更多不同种类的任务。</p>\n<h1 id=\"使用多线程\">使用多线程</h1>\n<p>一个进程中至少有一个线程在运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现多线程的两种方式\">实现多线程的两种方式</h2>\n<p>1⃣️继承Thread           2⃣️实现Runnable</p>\n<h3 id=\"继承thread类\">继承Thread类</h3>\n<p>类只能单根继承，不可多继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;MyThread&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MyThread myThread = new MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">        System.out.println(&quot;运行结束！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结束！</span><br><span class=\"line\">MyThread</span><br></pre></td></tr></table></figure>\n<p>结论：在执行多线程时，代码的运行结果与代码执行顺序或调用顺序是无关的。（线程的随机性）</p>\n<h3 id=\"实现runnable接口\">实现Runnable接口</h3>\n<p>接口可以多实现<br>\nThread实现了Runnable接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyRunnable implements Runnable &#123;</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;MyRunnable&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new Thread(new MyRunnable()).start();</span><br><span class=\"line\">        System.out.println(&quot;执行了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyRunnable</span><br><span class=\"line\">执行了</span><br></pre></td></tr></table></figure>\n<p>结论：推荐使用Runnable接口，因为Java类只能单继承</p>\n<h3 id=\"实例变量和线程安全\">实例变量和线程安全</h3>\n<p>自定义线程中的实例变量针对其他线程有共享和不共享之分。</p>\n<h4 id=\"不共享\">不共享</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoSharedThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int count = 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    public NoSharedThread(String name) &#123;</span><br><span class=\"line\">        this.setName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        while (count &gt; 0) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\">            count --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new NoSharedThread(&quot;线程1&quot;).start();</span><br><span class=\"line\">        new NoSharedThread(&quot;线程2&quot;).start();</span><br><span class=\"line\">        new NoSharedThread(&quot;线程3&quot;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程1: 5</span><br><span class=\"line\">线程2: 5</span><br><span class=\"line\">线程2: 4</span><br><span class=\"line\">线程2: 3</span><br><span class=\"line\">线程2: 2</span><br><span class=\"line\">线程2: 1</span><br><span class=\"line\">线程1: 4</span><br><span class=\"line\">线程1: 3</span><br><span class=\"line\">线程1: 2</span><br><span class=\"line\">线程1: 1</span><br><span class=\"line\">线程3: 5</span><br><span class=\"line\">线程3: 4</span><br><span class=\"line\">线程3: 3</span><br><span class=\"line\">线程3: 2</span><br><span class=\"line\">线程3: 1</span><br></pre></td></tr></table></figure>\n<p>结论：每个线程使用各自的count变量</p>\n<h4 id=\"共享\">共享</h4>\n<p>分析 <strong><em>i - -</em></strong> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 取得原有i的值</span><br><span class=\"line\">2. 计算 i - 1</span><br><span class=\"line\">3. 将 i - 1 的值赋给 i</span><br><span class=\"line\"></span><br><span class=\"line\">结论：如果有多个线程同时访问i，那么会垂岸非线程安全问题</span><br></pre></td></tr></table></figure>\n<p>未加锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SharedThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int count = 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SharedThread sharedThread = new SharedThread();</span><br><span class=\"line\">        Thread t1 = new Thread(sharedThread, &quot;a&quot;);</span><br><span class=\"line\">        Thread t2 = new Thread(sharedThread, &quot;b&quot;);</span><br><span class=\"line\">        Thread t3 = new Thread(sharedThread, &quot;c&quot;);</span><br><span class=\"line\">        Thread t4 = new Thread(sharedThread, &quot;d&quot;);</span><br><span class=\"line\">        Thread t5 = new Thread(sharedThread, &quot;e&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">        t5.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b: 3</span><br><span class=\"line\">a: 3</span><br><span class=\"line\">c: 2</span><br><span class=\"line\">d: 1</span><br><span class=\"line\">e: 0</span><br></pre></td></tr></table></figure>\n<p>结论： 出现了a、b两个读到相同的值3，造成线程不安全。</p>\n<p>解决方式：</p>\n<p>给 run方法加锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">synchronized  public void run() &#123;</span><br><span class=\"line\">     super.run();</span><br><span class=\"line\">     count--;\t\t// 1⃣️ 线程安全出现在这儿！！！</span><br><span class=\"line\">     System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>分析：多个线程访问run方法时，以排队的方式进行处理，当一个线程调用run方法前，先检查run方法是否被上锁，如果是则等待其他线程执行完释放锁后才能执行。如果否则对run方法加锁，执行结束后释放锁。加锁的这块代码称为<strong>互斥区</strong>或<strong>临界区</strong>。</p>\n<h3 id=\"留意i-与systemoutprintln的异常\">留意i- -与System.out.println()的异常</h3>\n<p>结论：println()方法在内部是同步的，但i- -的操作确实在进入println()之前发生的，所以有发生非线程安全问题的概率。<br>\n所以为了防止发生非线程安全问题，还是应继续使用同步方法。</p>\n<h2 id=\"currentthread-方法\">currentThread() 方法</h2>\n<p>currentThread()可返回代码段被哪个线程调用的信息</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class CurrentThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CurrentThread() &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造方法执行：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;run方法执行：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CurrentThread currentThread = new CurrentThread();</span><br><span class=\"line\">        // 自动调用run方法</span><br><span class=\"line\">        currentThread.start();</span><br><span class=\"line\">        // 手动调用run方法</span><br><span class=\"line\">        currentThread.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法执行：main</span><br><span class=\"line\">run方法执行：Thread-0</span><br><span class=\"line\">run方法执行：main</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.构造方法被main线程调用，run方法被Thread-0线程调用，run方法是自动调用的方法，<br>\n如果手动调用run方法，则是被main线程调用的<br>\n2.构造方法优先执行与run方法</p>\n<h2 id=\"isalive方法\">isAlive()方法</h2>\n<p>isAlive()是检查线程是否处于活动状态<br>\n活动状态指的是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为是“存活的”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsAliveThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;run:&quot; + Thread.currentThread().isAlive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        IsAliveThread isAliveThread = new IsAliveThread();</span><br><span class=\"line\">        System.out.println(&quot;begin: &quot; + isAliveThread.isAlive());</span><br><span class=\"line\">        isAliveThread.start();</span><br><span class=\"line\">        System.out.println(&quot;end: &quot; + isAliveThread.isAlive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: false</span><br><span class=\"line\">end: true</span><br><span class=\"line\">run:true</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: false</span><br><span class=\"line\">end: true</span><br><span class=\"line\">run:false</span><br></pre></td></tr></table></figure>\n<p>结论：start方法后线程状态可能存活可能不存活</p>\n<h2 id=\"sleep方法\">sleep()方法</h2>\n<p>在指定的毫秒数内让当前执行的线程休眠（暂停执行），当前执行的线程是指this.currentThread()返回的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SleepThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;run :&quot; + this.currentThread().getName() + &quot; begin&quot;);</span><br><span class=\"line\">            sleep(10);</span><br><span class=\"line\">            System.out.println(&quot;run :&quot; + this.currentThread().getName() + &quot; end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SleepThread sleepThread = new SleepThread();</span><br><span class=\"line\">        System.out.println(&quot;begin: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        sleepThread.start();</span><br><span class=\"line\">        System.out.println(&quot;end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: 1555750009067</span><br><span class=\"line\">end: 1555750009074</span><br><span class=\"line\">run :Thread-0 begin</span><br><span class=\"line\">run :Thread-0 end</span><br></pre></td></tr></table></figure>\n<p>分析： 由于main和Thread-0是异步的，所以先打印begin和end，而SleepThread是随后运行的，所以打印出run begin和run end</p>\n<h2 id=\"getid-方法\">getId() 方法</h2>\n<p>获取线程的唯一标识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; : &quot;+ currentThread().getId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main : 1</span><br></pre></td></tr></table></figure>\n<p>分析：当前线程名为main，id为1。</p>\n<h2 id=\"停止线程\">停止线程</h2>\n<p>在线程执行完成之前停止正在做的操作。禁止用Thread.stop()方法，因为是不安全（unsafe）的，并且已经被废弃（deprecated）了。<br>\n大多数停止线程使用Thread.interrupt()方法，但是这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。<br>\nJava中有3个终止线程的方法：<br>\n1.使用退出标志，使线程正常退出，也就是当run方法完成后线程终止<br>\n2.使用stop强行终止，不推荐<br>\n3.使用interrupt方法中断线程</p>\n<h3 id=\"停止不了的线程\">停止不了的线程</h3>\n<p>interrupt方法并不像for-break一样马上停止执行，而是仅仅在当前线程中打了一个停止的标记，并不是真正的停止线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 1000000; i ++ ) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(5000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 999990</span><br><span class=\"line\">i = 999991</span><br><span class=\"line\">i = 999992</span><br><span class=\"line\">i = 999993</span><br><span class=\"line\">i = 999994</span><br><span class=\"line\">i = 999995</span><br><span class=\"line\">i = 999996</span><br><span class=\"line\">i = 999997</span><br><span class=\"line\">i = 999998</span><br><span class=\"line\">i = 999999</span><br><span class=\"line\">i = 1000000</span><br></pre></td></tr></table></figure>\n<p>分析：调用interrupt方法并没有让线程停下来！！</p>\n<h3 id=\"判断线程是否是停止状态\">判断线程是否是停止状态</h3>\n<p>Thread.java类中提供了两种方法<br>\n1.boolean   this.interrupted()：测试当前线程是否已经中断<br>\n2.boolean   this.isInterrupted()：测试线程是否已经中断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 1000; i ++ ) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(1000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot;+ interruptThread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot;+ interruptThread.interrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 994</span><br><span class=\"line\">i = 995</span><br><span class=\"line\">i = 996</span><br><span class=\"line\">i = 997</span><br><span class=\"line\">i = 998</span><br><span class=\"line\">i = 999</span><br><span class=\"line\">i = 1000</span><br><span class=\"line\">是否停止1？false</span><br><span class=\"line\">是否停止2？false</span><br></pre></td></tr></table></figure>\n<p>分析：判断interruptThread对象是否停止，但控制台打印的结果显示，并未停止。验证了interrupted()方法的定义：测试当前线程是否已经中断，而当前线程是 main，从未中断过。所以打印的是两个false。</p>\n<p>如何在当前线程中产生中断效果呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsInterruptThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;begin&quot;);</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot; + Thread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot; + Thread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">是否停止1？true</span><br><span class=\"line\">是否停止2？false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：interrupted方法的确判断出当前线程是否停止状态。<br>\n为什么第二个会是false呢？因为interrupted有解除功能，线程的中断由interrupted方法解除。所以两次连续调用则第二次返回false。</p>\n<p>isInterrupted()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsInterruptThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;begin&quot;);</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot; + Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot; + Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        System.out.println(&quot;end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">是否停止1？true</span><br><span class=\"line\">是否停止2？true</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：能判断线程是否是中断状态，但连续调用不清除状态标志。</p>\n<p>总结：<br>\ninterrupted方法测试当前线程是否是中断状态，执行后具有将状态标志清除为false的功能；<br>\nisInterrupted方法测试当前线程是否是中断状态，但不清除状态标志。</p>\n<h3 id=\"能停止的线程异常法\">能停止的线程——异常法</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 500000; i ++ ) &#123;</span><br><span class=\"line\">            if (this.isInterrupted()) &#123;</span><br><span class=\"line\">                // 已经是中断状态了，要退出了！</span><br><span class=\"line\">                System.out.println(&quot;已经是中断状态了，要退出了！&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(1000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 117746</span><br><span class=\"line\">i = 117747</span><br><span class=\"line\">i = 117748</span><br><span class=\"line\">i = 117749</span><br><span class=\"line\">i = 117750</span><br><span class=\"line\">i = 117751</span><br><span class=\"line\">i = 117752</span><br><span class=\"line\">i = 117753</span><br><span class=\"line\">已经是中断状态了，要退出了！</span><br></pre></td></tr></table></figure>\n<h3 id=\"在沉睡中停止\">在沉睡中停止</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SleepBeforeInterrupt extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;before:&quot; + this.isInterrupted());</span><br><span class=\"line\">            Thread.sleep(200000);</span><br><span class=\"line\">            System.out.println(&quot;....&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;end:&quot; + this.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SleepBeforeInterrupt sleepBeforeInterrupt = new SleepBeforeInterrupt();</span><br><span class=\"line\">        sleepBeforeInterrupt.start();</span><br><span class=\"line\">        sleepBeforeInterrupt.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat chapter1.SleepBeforeInterrupt.run(SleepBeforeInterrupt.java:10)</span><br><span class=\"line\">before:true</span><br><span class=\"line\">end:false</span><br></pre></td></tr></table></figure>\n<p>分析：如果在sleep状态下停止某一状态，会进入catch语句，并且清除停止状态值，使之变成false。<br>\n简单说：先执行interrupt再运行sleep会出现异常。</p>\n<h3 id=\"能停止的线程暴力停止\">能停止的线程——暴力停止</h3>\n<p>使用stop()停止线程是非常暴力的。</p>\n<h3 id=\"方法stop与javalangthreaddeath异常\">方法stop()与java.lang.ThreadDeath异常</h3>\n<p>stop方法已被作废，强制让线程停止有可能使一些清理性的工作得不到完成。另一情况就是对锁定的对象进行了“解锁”，导致数据得不到同步的处理，出现数据不一致的问题。</p>\n<h3 id=\"释放锁的不良后果\">释放锁的不良后果</h3>\n<p>使用stop()释放锁将会给数据造成不一致性的后果。</p>\n<h3 id=\"使用return停止线程\">使用return停止线程</h3>\n<p>将方法interrupt和return结合使用也能实现停止线程的效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptReturn extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            if (this.isInterrupted()) &#123;</span><br><span class=\"line\">                System.out.println(&quot;执行interrupted了&quot;);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        InterruptReturn interruptReturn = new InterruptReturn();</span><br><span class=\"line\">        interruptReturn.start();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(2000);</span><br><span class=\"line\">            interruptReturn.interrupt();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行interrupted了</span><br></pre></td></tr></table></figure>\n<h1 id=\"暂停线程\">暂停线程</h1>\n<p>暂停线程意味着暂停后还可以恢复运行；<br>\n经常使用suspend()方法暂停，用resume()方法恢复线程的执行。</p>\n<h2 id=\"suspend和resume方法的使用\">suspend和resume方法的使用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SuspendResume extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int i;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            i ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getI() &#123;</span><br><span class=\"line\">        return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setI(int i) &#123;</span><br><span class=\"line\">        this.i = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            SuspendResume suspendResume = new SuspendResume();</span><br><span class=\"line\">            suspendResume.start();</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\"></span><br><span class=\"line\">            suspendResume.suspend();</span><br><span class=\"line\">            System.out.println(&quot;A:&quot; + System.currentTimeMillis() + &quot; i=&quot; + suspendResume.getI());</span><br><span class=\"line\">            suspendResume.resume();</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\"></span><br><span class=\"line\">            suspendResume.suspend();</span><br><span class=\"line\">            System.out.println(&quot;A:&quot; + System.currentTimeMillis() + &quot; i=&quot; + suspendResume.getI());</span><br><span class=\"line\">            suspendResume.resume();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:1555760257178 i=-2049930246</span><br><span class=\"line\">A:1555760262182 i=506892209</span><br></pre></td></tr></table></figure>\n<h2 id=\"suspend和resume方法的缺点独占\">suspend和resume方法的缺点——独占</h2>\n<h2 id=\"suspend和resume方法的缺点不同步\">suspend和resume方法的缺点——不同步</h2>\n<h1 id=\"yield方法\">yield()方法</h1>\n<p>yield方法的作用是放弃当前的CPU资源，让给其他任务区占用CPU执行时间，但放弃的时间不确定，有可能刚放弃又重新获得CPU时间片。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class YieldThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        long begin = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;开始时间：&quot; + begin);</span><br><span class=\"line\">        for (int i = 0; i &lt; 5000000; i++) &#123;</span><br><span class=\"line\">        \t// Thread.yield();</span><br><span class=\"line\">            count = count + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;结束时间：&quot; + end);</span><br><span class=\"line\">        System.out.println(&quot;相差：&quot; + (end - begin));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        YieldThread yieldThread = new YieldThread();</span><br><span class=\"line\">        yieldThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br>\n1⃣️不用yield方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始时间：1555760862508</span><br><span class=\"line\">结束时间：1555760862515</span><br><span class=\"line\">相差：7</span><br></pre></td></tr></table></figure>\n<p>2⃣️用yield，打开注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始时间：1555760940292</span><br><span class=\"line\">结束时间：1555760945941</span><br><span class=\"line\">相差：5649</span><br></pre></td></tr></table></figure>\n<h1 id=\"线程的优先级\">线程的优先级</h1>\n<p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU的资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。<br>\n设置线程的优先级有助于帮“线程规划器”确定下一次选择哪个线程来优先执行。<br>\n设置线程的优先级使用setPriority()方法</p>\n<p>JDK源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void setPriority(int newPriority) &#123;</span><br><span class=\"line\">        ThreadGroup g;</span><br><span class=\"line\">        checkAccess();</span><br><span class=\"line\">        if (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if((g = getThreadGroup()) != null) &#123;</span><br><span class=\"line\">            if (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class=\"line\">                newPriority = g.getMaxPriority();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setPriority0(priority = newPriority);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>优先级分为1-10。</p>\n<h2 id=\"线程优先级的继承特性\">线程优先级的继承特性</h2>\n<p>线程的优先级具有继承性。例如：A线程启动B线程，则B的优先级和A是一样的。</p>\n<h2 id=\"优先级具有规则性\">优先级具有规则性</h2>\n<p>线程的优先级具有规则性，即CPU会尽量将执行资源分配给优先级高的线程。<br>\n高优先级的线程总是大部分执行完，但不保证高优先级的线程全部先执行完。</p>\n<h2 id=\"优先级具有随机性\">优先级具有随机性</h2>\n<p>优先级高的不一定最先执行完。</p>\n<h2 id=\"优先级高的运行得快\">优先级高的运行得快</h2>\n<h1 id=\"守护线程\">守护线程</h1>\n<p>在Java中线程分两种，一种是用户线程，一种是守护线程（daemon）。<br>\n守护线程：是一种特殊的线程，它的特性有陪伴的意思，当进程中不存在非守护线程时，守护线程自动销毁。典型的是垃圾回收线程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>进程和多线程的概念及线程的优点</h1>\n<h2>进程</h2>\n<p>操作系统的基础；是一次程序的执行；是系统进行资源分配和调度的一个独立单位。</p>\n<h2>线程</h2>\n<p>进程中独立运行的子任务。</p>\n<h2>多线程的优点</h2>\n<p>可以极大的利用CPU的空闲时间来处理其他的任务，即同一时间内运行更多不同种类的任务。</p>\n<h1>使用多线程</h1>\n<p>一个进程中至少有一个线程在运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>实现多线程的两种方式</h2>\n<p>1⃣️继承Thread           2⃣️实现Runnable</p>\n<h3>继承Thread类</h3>\n<p>类只能单根继承，不可多继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;MyThread&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MyThread myThread = new MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">        System.out.println(&quot;运行结束！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结束！</span><br><span class=\"line\">MyThread</span><br></pre></td></tr></table></figure>\n<p>结论：在执行多线程时，代码的运行结果与代码执行顺序或调用顺序是无关的。（线程的随机性）</p>\n<h3>实现Runnable接口</h3>\n<p>接口可以多实现<br>\nThread实现了Runnable接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyRunnable implements Runnable &#123;</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;MyRunnable&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new Thread(new MyRunnable()).start();</span><br><span class=\"line\">        System.out.println(&quot;执行了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyRunnable</span><br><span class=\"line\">执行了</span><br></pre></td></tr></table></figure>\n<p>结论：推荐使用Runnable接口，因为Java类只能单继承</p>\n<h3>实例变量和线程安全</h3>\n<p>自定义线程中的实例变量针对其他线程有共享和不共享之分。</p>\n<h4>不共享</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoSharedThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int count = 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    public NoSharedThread(String name) &#123;</span><br><span class=\"line\">        this.setName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        while (count &gt; 0) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\">            count --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new NoSharedThread(&quot;线程1&quot;).start();</span><br><span class=\"line\">        new NoSharedThread(&quot;线程2&quot;).start();</span><br><span class=\"line\">        new NoSharedThread(&quot;线程3&quot;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程1: 5</span><br><span class=\"line\">线程2: 5</span><br><span class=\"line\">线程2: 4</span><br><span class=\"line\">线程2: 3</span><br><span class=\"line\">线程2: 2</span><br><span class=\"line\">线程2: 1</span><br><span class=\"line\">线程1: 4</span><br><span class=\"line\">线程1: 3</span><br><span class=\"line\">线程1: 2</span><br><span class=\"line\">线程1: 1</span><br><span class=\"line\">线程3: 5</span><br><span class=\"line\">线程3: 4</span><br><span class=\"line\">线程3: 3</span><br><span class=\"line\">线程3: 2</span><br><span class=\"line\">线程3: 1</span><br></pre></td></tr></table></figure>\n<p>结论：每个线程使用各自的count变量</p>\n<h4>共享</h4>\n<p>分析 <strong><em>i - -</em></strong> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 取得原有i的值</span><br><span class=\"line\">2. 计算 i - 1</span><br><span class=\"line\">3. 将 i - 1 的值赋给 i</span><br><span class=\"line\"></span><br><span class=\"line\">结论：如果有多个线程同时访问i，那么会垂岸非线程安全问题</span><br></pre></td></tr></table></figure>\n<p>未加锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SharedThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int count = 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        count--;\t\t// 1⃣️ 线程安全出现在这儿！！！</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SharedThread sharedThread = new SharedThread();</span><br><span class=\"line\">        Thread t1 = new Thread(sharedThread, &quot;a&quot;);</span><br><span class=\"line\">        Thread t2 = new Thread(sharedThread, &quot;b&quot;);</span><br><span class=\"line\">        Thread t3 = new Thread(sharedThread, &quot;c&quot;);</span><br><span class=\"line\">        Thread t4 = new Thread(sharedThread, &quot;d&quot;);</span><br><span class=\"line\">        Thread t5 = new Thread(sharedThread, &quot;e&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">        t5.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b: 3</span><br><span class=\"line\">a: 3</span><br><span class=\"line\">c: 2</span><br><span class=\"line\">d: 1</span><br><span class=\"line\">e: 0</span><br></pre></td></tr></table></figure>\n<p>结论： 出现了a、b两个读到相同的值3，造成线程不安全。</p>\n<p>解决方式：</p>\n<p>给 run方法加锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">synchronized  public void run() &#123;</span><br><span class=\"line\">     super.run();</span><br><span class=\"line\">     count--;\t\t// 1⃣️ 线程安全出现在这儿！！！</span><br><span class=\"line\">     System.out.println(Thread.currentThread().getName() + &quot;: &quot; + count);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>分析：多个线程访问run方法时，以排队的方式进行处理，当一个线程调用run方法前，先检查run方法是否被上锁，如果是则等待其他线程执行完释放锁后才能执行。如果否则对run方法加锁，执行结束后释放锁。加锁的这块代码称为<strong>互斥区</strong>或<strong>临界区</strong>。</p>\n<h3>留意i- -与System.out.println()的异常</h3>\n<p>结论：println()方法在内部是同步的，但i- -的操作确实在进入println()之前发生的，所以有发生非线程安全问题的概率。<br>\n所以为了防止发生非线程安全问题，还是应继续使用同步方法。</p>\n<h2>currentThread() 方法</h2>\n<p>currentThread()可返回代码段被哪个线程调用的信息</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class CurrentThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CurrentThread() &#123;</span><br><span class=\"line\">        System.out.println(&quot;构造方法执行：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;run方法执行：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CurrentThread currentThread = new CurrentThread();</span><br><span class=\"line\">        // 自动调用run方法</span><br><span class=\"line\">        currentThread.start();</span><br><span class=\"line\">        // 手动调用run方法</span><br><span class=\"line\">        currentThread.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法执行：main</span><br><span class=\"line\">run方法执行：Thread-0</span><br><span class=\"line\">run方法执行：main</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.构造方法被main线程调用，run方法被Thread-0线程调用，run方法是自动调用的方法，<br>\n如果手动调用run方法，则是被main线程调用的<br>\n2.构造方法优先执行与run方法</p>\n<h2>isAlive()方法</h2>\n<p>isAlive()是检查线程是否处于活动状态<br>\n活动状态指的是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为是“存活的”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsAliveThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        System.out.println(&quot;run:&quot; + Thread.currentThread().isAlive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        IsAliveThread isAliveThread = new IsAliveThread();</span><br><span class=\"line\">        System.out.println(&quot;begin: &quot; + isAliveThread.isAlive());</span><br><span class=\"line\">        isAliveThread.start();</span><br><span class=\"line\">        System.out.println(&quot;end: &quot; + isAliveThread.isAlive());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: false</span><br><span class=\"line\">end: true</span><br><span class=\"line\">run:true</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: false</span><br><span class=\"line\">end: true</span><br><span class=\"line\">run:false</span><br></pre></td></tr></table></figure>\n<p>结论：start方法后线程状态可能存活可能不存活</p>\n<h2>sleep()方法</h2>\n<p>在指定的毫秒数内让当前执行的线程休眠（暂停执行），当前执行的线程是指this.currentThread()返回的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SleepThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;run :&quot; + this.currentThread().getName() + &quot; begin&quot;);</span><br><span class=\"line\">            sleep(10);</span><br><span class=\"line\">            System.out.println(&quot;run :&quot; + this.currentThread().getName() + &quot; end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SleepThread sleepThread = new SleepThread();</span><br><span class=\"line\">        System.out.println(&quot;begin: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        sleepThread.start();</span><br><span class=\"line\">        System.out.println(&quot;end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin: 1555750009067</span><br><span class=\"line\">end: 1555750009074</span><br><span class=\"line\">run :Thread-0 begin</span><br><span class=\"line\">run :Thread-0 end</span><br></pre></td></tr></table></figure>\n<p>分析： 由于main和Thread-0是异步的，所以先打印begin和end，而SleepThread是随后运行的，所以打印出run begin和run end</p>\n<h2>getId() 方法</h2>\n<p>获取线程的唯一标识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; : &quot;+ currentThread().getId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main : 1</span><br></pre></td></tr></table></figure>\n<p>分析：当前线程名为main，id为1。</p>\n<h2>停止线程</h2>\n<p>在线程执行完成之前停止正在做的操作。禁止用Thread.stop()方法，因为是不安全（unsafe）的，并且已经被废弃（deprecated）了。<br>\n大多数停止线程使用Thread.interrupt()方法，但是这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。<br>\nJava中有3个终止线程的方法：<br>\n1.使用退出标志，使线程正常退出，也就是当run方法完成后线程终止<br>\n2.使用stop强行终止，不推荐<br>\n3.使用interrupt方法中断线程</p>\n<h3>停止不了的线程</h3>\n<p>interrupt方法并不像for-break一样马上停止执行，而是仅仅在当前线程中打了一个停止的标记，并不是真正的停止线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 1000000; i ++ ) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(5000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 999990</span><br><span class=\"line\">i = 999991</span><br><span class=\"line\">i = 999992</span><br><span class=\"line\">i = 999993</span><br><span class=\"line\">i = 999994</span><br><span class=\"line\">i = 999995</span><br><span class=\"line\">i = 999996</span><br><span class=\"line\">i = 999997</span><br><span class=\"line\">i = 999998</span><br><span class=\"line\">i = 999999</span><br><span class=\"line\">i = 1000000</span><br></pre></td></tr></table></figure>\n<p>分析：调用interrupt方法并没有让线程停下来！！</p>\n<h3>判断线程是否是停止状态</h3>\n<p>Thread.java类中提供了两种方法<br>\n1.boolean   this.interrupted()：测试当前线程是否已经中断<br>\n2.boolean   this.isInterrupted()：测试线程是否已经中断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 1000; i ++ ) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(1000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot;+ interruptThread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot;+ interruptThread.interrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 994</span><br><span class=\"line\">i = 995</span><br><span class=\"line\">i = 996</span><br><span class=\"line\">i = 997</span><br><span class=\"line\">i = 998</span><br><span class=\"line\">i = 999</span><br><span class=\"line\">i = 1000</span><br><span class=\"line\">是否停止1？false</span><br><span class=\"line\">是否停止2？false</span><br></pre></td></tr></table></figure>\n<p>分析：判断interruptThread对象是否停止，但控制台打印的结果显示，并未停止。验证了interrupted()方法的定义：测试当前线程是否已经中断，而当前线程是 main，从未中断过。所以打印的是两个false。</p>\n<p>如何在当前线程中产生中断效果呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsInterruptThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;begin&quot;);</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot; + Thread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot; + Thread.interrupted());</span><br><span class=\"line\">        System.out.println(&quot;end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">是否停止1？true</span><br><span class=\"line\">是否停止2？false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：interrupted方法的确判断出当前线程是否停止状态。<br>\n为什么第二个会是false呢？因为interrupted有解除功能，线程的中断由interrupted方法解除。所以两次连续调用则第二次返回false。</p>\n<p>isInterrupted()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IsInterruptThread &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;begin&quot;);</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">        System.out.println(&quot;是否停止1？&quot; + Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        System.out.println(&quot;是否停止2？&quot; + Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        System.out.println(&quot;end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">是否停止1？true</span><br><span class=\"line\">是否停止2？true</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：能判断线程是否是中断状态，但连续调用不清除状态标志。</p>\n<p>总结：<br>\ninterrupted方法测试当前线程是否是中断状态，执行后具有将状态标志清除为false的功能；<br>\nisInterrupted方法测试当前线程是否是中断状态，但不清除状态标志。</p>\n<h3>能停止的线程——异常法</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 500000; i ++ ) &#123;</span><br><span class=\"line\">            if (this.isInterrupted()) &#123;</span><br><span class=\"line\">                // 已经是中断状态了，要退出了！</span><br><span class=\"line\">                System.out.println(&quot;已经是中断状态了，要退出了！&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(&quot;i = &quot; + (i + 1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InterruptThread interruptThread = new InterruptThread();</span><br><span class=\"line\">        interruptThread.start();</span><br><span class=\"line\">        sleep(1000);</span><br><span class=\"line\">        interruptThread.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">i = 117746</span><br><span class=\"line\">i = 117747</span><br><span class=\"line\">i = 117748</span><br><span class=\"line\">i = 117749</span><br><span class=\"line\">i = 117750</span><br><span class=\"line\">i = 117751</span><br><span class=\"line\">i = 117752</span><br><span class=\"line\">i = 117753</span><br><span class=\"line\">已经是中断状态了，要退出了！</span><br></pre></td></tr></table></figure>\n<h3>在沉睡中停止</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SleepBeforeInterrupt extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;before:&quot; + this.isInterrupted());</span><br><span class=\"line\">            Thread.sleep(200000);</span><br><span class=\"line\">            System.out.println(&quot;....&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;end:&quot; + this.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SleepBeforeInterrupt sleepBeforeInterrupt = new SleepBeforeInterrupt();</span><br><span class=\"line\">        sleepBeforeInterrupt.start();</span><br><span class=\"line\">        sleepBeforeInterrupt.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat chapter1.SleepBeforeInterrupt.run(SleepBeforeInterrupt.java:10)</span><br><span class=\"line\">before:true</span><br><span class=\"line\">end:false</span><br></pre></td></tr></table></figure>\n<p>分析：如果在sleep状态下停止某一状态，会进入catch语句，并且清除停止状态值，使之变成false。<br>\n简单说：先执行interrupt再运行sleep会出现异常。</p>\n<h3>能停止的线程——暴力停止</h3>\n<p>使用stop()停止线程是非常暴力的。</p>\n<h3>方法stop()与java.lang.ThreadDeath异常</h3>\n<p>stop方法已被作废，强制让线程停止有可能使一些清理性的工作得不到完成。另一情况就是对锁定的对象进行了“解锁”，导致数据得不到同步的处理，出现数据不一致的问题。</p>\n<h3>释放锁的不良后果</h3>\n<p>使用stop()释放锁将会给数据造成不一致性的后果。</p>\n<h3>使用return停止线程</h3>\n<p>将方法interrupt和return结合使用也能实现停止线程的效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InterruptReturn extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            if (this.isInterrupted()) &#123;</span><br><span class=\"line\">                System.out.println(&quot;执行interrupted了&quot;);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        InterruptReturn interruptReturn = new InterruptReturn();</span><br><span class=\"line\">        interruptReturn.start();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(2000);</span><br><span class=\"line\">            interruptReturn.interrupt();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行interrupted了</span><br></pre></td></tr></table></figure>\n<h1>暂停线程</h1>\n<p>暂停线程意味着暂停后还可以恢复运行；<br>\n经常使用suspend()方法暂停，用resume()方法恢复线程的执行。</p>\n<h2>suspend和resume方法的使用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SuspendResume extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int i;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            i ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getI() &#123;</span><br><span class=\"line\">        return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setI(int i) &#123;</span><br><span class=\"line\">        this.i = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            SuspendResume suspendResume = new SuspendResume();</span><br><span class=\"line\">            suspendResume.start();</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\"></span><br><span class=\"line\">            suspendResume.suspend();</span><br><span class=\"line\">            System.out.println(&quot;A:&quot; + System.currentTimeMillis() + &quot; i=&quot; + suspendResume.getI());</span><br><span class=\"line\">            suspendResume.resume();</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\"></span><br><span class=\"line\">            suspendResume.suspend();</span><br><span class=\"line\">            System.out.println(&quot;A:&quot; + System.currentTimeMillis() + &quot; i=&quot; + suspendResume.getI());</span><br><span class=\"line\">            suspendResume.resume();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:1555760257178 i=-2049930246</span><br><span class=\"line\">A:1555760262182 i=506892209</span><br></pre></td></tr></table></figure>\n<h2>suspend和resume方法的缺点——独占</h2>\n<h2>suspend和resume方法的缺点——不同步</h2>\n<h1>yield()方法</h1>\n<p>yield方法的作用是放弃当前的CPU资源，让给其他任务区占用CPU执行时间，但放弃的时间不确定，有可能刚放弃又重新获得CPU时间片。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class YieldThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        long begin = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;开始时间：&quot; + begin);</span><br><span class=\"line\">        for (int i = 0; i &lt; 5000000; i++) &#123;</span><br><span class=\"line\">        \t// Thread.yield();</span><br><span class=\"line\">            count = count + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;结束时间：&quot; + end);</span><br><span class=\"line\">        System.out.println(&quot;相差：&quot; + (end - begin));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        YieldThread yieldThread = new YieldThread();</span><br><span class=\"line\">        yieldThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br>\n1⃣️不用yield方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始时间：1555760862508</span><br><span class=\"line\">结束时间：1555760862515</span><br><span class=\"line\">相差：7</span><br></pre></td></tr></table></figure>\n<p>2⃣️用yield，打开注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始时间：1555760940292</span><br><span class=\"line\">结束时间：1555760945941</span><br><span class=\"line\">相差：5649</span><br></pre></td></tr></table></figure>\n<h1>线程的优先级</h1>\n<p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU的资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。<br>\n设置线程的优先级有助于帮“线程规划器”确定下一次选择哪个线程来优先执行。<br>\n设置线程的优先级使用setPriority()方法</p>\n<p>JDK源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void setPriority(int newPriority) &#123;</span><br><span class=\"line\">        ThreadGroup g;</span><br><span class=\"line\">        checkAccess();</span><br><span class=\"line\">        if (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if((g = getThreadGroup()) != null) &#123;</span><br><span class=\"line\">            if (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class=\"line\">                newPriority = g.getMaxPriority();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setPriority0(priority = newPriority);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>优先级分为1-10。</p>\n<h2>线程优先级的继承特性</h2>\n<p>线程的优先级具有继承性。例如：A线程启动B线程，则B的优先级和A是一样的。</p>\n<h2>优先级具有规则性</h2>\n<p>线程的优先级具有规则性，即CPU会尽量将执行资源分配给优先级高的线程。<br>\n高优先级的线程总是大部分执行完，但不保证高优先级的线程全部先执行完。</p>\n<h2>优先级具有随机性</h2>\n<p>优先级高的不一定最先执行完。</p>\n<h2>优先级高的运行得快</h2>\n<h1>守护线程</h1>\n<p>在Java中线程分两种，一种是用户线程，一种是守护线程（daemon）。<br>\n守护线程：是一种特殊的线程，它的特性有陪伴的意思，当进程中不存在非守护线程时，守护线程自动销毁。典型的是垃圾回收线程。</p>\n"},{"title":"Linux中的快捷键","date":"2019-03-21T14:33:21.000Z","_content":"\n### tab\n> 自动补全\n### ctrl a\n> 光标移到命令行开头\n### ctrl e\n> 光标移到命令行结尾\n### ctrl u\n> 删除光标以前的内容\n<!-- more -->\n### ctrl k\n> 删除光标后的内容\n### ctrl d\n> 删除当前字母\n### ctrl w\n> 删除光标前一个单词\n### ctrl y\n> 恢复ctrl w 或 ctrl u 或ctrl k删掉的单词\n### ctrl l\n> 相当于clear\n### ctrl b\n> 向前移动\n### ctrl f\n> 向后移动\n### ctrl p\n> 向上显示历史的命令\n### ctrl n\n> 向下显示历史的命令\n### ctrl d\n> 关闭终端\n### shift +- \n> 终端页面上下滚动\n\n参考 [https://blog.csdn.net/kyjl888/article/details/70833056](https://blog.csdn.net/kyjl888/article/details/70833056)\n","source":"_posts/Linux中的快捷键.md","raw":"---\ntitle: Linux中的快捷键\ncategories: Linux\ntags: linux\ndate: 2019-03-21 22:33:21\n---\n\n### tab\n> 自动补全\n### ctrl a\n> 光标移到命令行开头\n### ctrl e\n> 光标移到命令行结尾\n### ctrl u\n> 删除光标以前的内容\n<!-- more -->\n### ctrl k\n> 删除光标后的内容\n### ctrl d\n> 删除当前字母\n### ctrl w\n> 删除光标前一个单词\n### ctrl y\n> 恢复ctrl w 或 ctrl u 或ctrl k删掉的单词\n### ctrl l\n> 相当于clear\n### ctrl b\n> 向前移动\n### ctrl f\n> 向后移动\n### ctrl p\n> 向上显示历史的命令\n### ctrl n\n> 向下显示历史的命令\n### ctrl d\n> 关闭终端\n### shift +- \n> 终端页面上下滚动\n\n参考 [https://blog.csdn.net/kyjl888/article/details/70833056](https://blog.csdn.net/kyjl888/article/details/70833056)\n","slug":"Linux中的快捷键","published":1,"updated":"2019-04-20T12:35:07.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xt1001kvq6bvh2ikfp1","content":"<h3 id=\"tab\">tab</h3>\n<blockquote>\n<p>自动补全</p>\n</blockquote>\n<h3 id=\"ctrl-a\">ctrl a</h3>\n<blockquote>\n<p>光标移到命令行开头</p>\n</blockquote>\n<h3 id=\"ctrl-e\">ctrl e</h3>\n<blockquote>\n<p>光标移到命令行结尾</p>\n</blockquote>\n<h3 id=\"ctrl-u\">ctrl u</h3>\n<blockquote>\n<p>删除光标以前的内容</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"ctrl-k\">ctrl k</h3>\n<blockquote>\n<p>删除光标后的内容</p>\n</blockquote>\n<h3 id=\"ctrl-d\">ctrl d</h3>\n<blockquote>\n<p>删除当前字母</p>\n</blockquote>\n<h3 id=\"ctrl-w\">ctrl w</h3>\n<blockquote>\n<p>删除光标前一个单词</p>\n</blockquote>\n<h3 id=\"ctrl-y\">ctrl y</h3>\n<blockquote>\n<p>恢复ctrl w 或 ctrl u 或ctrl k删掉的单词</p>\n</blockquote>\n<h3 id=\"ctrl-l\">ctrl l</h3>\n<blockquote>\n<p>相当于clear</p>\n</blockquote>\n<h3 id=\"ctrl-b\">ctrl b</h3>\n<blockquote>\n<p>向前移动</p>\n</blockquote>\n<h3 id=\"ctrl-f\">ctrl f</h3>\n<blockquote>\n<p>向后移动</p>\n</blockquote>\n<h3 id=\"ctrl-p\">ctrl p</h3>\n<blockquote>\n<p>向上显示历史的命令</p>\n</blockquote>\n<h3 id=\"ctrl-n\">ctrl n</h3>\n<blockquote>\n<p>向下显示历史的命令</p>\n</blockquote>\n<h3 id=\"ctrl-d\">ctrl d</h3>\n<blockquote>\n<p>关闭终端</p>\n</blockquote>\n<h3 id=\"shift\">shift ±</h3>\n<blockquote>\n<p>终端页面上下滚动</p>\n</blockquote>\n<p>参考 <a href=\"https://blog.csdn.net/kyjl888/article/details/70833056\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kyjl888/article/details/70833056</a></p>\n","site":{"data":{}},"excerpt":"<h3>tab</h3>\n<blockquote>\n<p>自动补全</p>\n</blockquote>\n<h3>ctrl a</h3>\n<blockquote>\n<p>光标移到命令行开头</p>\n</blockquote>\n<h3>ctrl e</h3>\n<blockquote>\n<p>光标移到命令行结尾</p>\n</blockquote>\n<h3>ctrl u</h3>\n<blockquote>\n<p>删除光标以前的内容</p>\n</blockquote>","more":"<h3>ctrl k</h3>\n<blockquote>\n<p>删除光标后的内容</p>\n</blockquote>\n<h3>ctrl d</h3>\n<blockquote>\n<p>删除当前字母</p>\n</blockquote>\n<h3>ctrl w</h3>\n<blockquote>\n<p>删除光标前一个单词</p>\n</blockquote>\n<h3>ctrl y</h3>\n<blockquote>\n<p>恢复ctrl w 或 ctrl u 或ctrl k删掉的单词</p>\n</blockquote>\n<h3>ctrl l</h3>\n<blockquote>\n<p>相当于clear</p>\n</blockquote>\n<h3>ctrl b</h3>\n<blockquote>\n<p>向前移动</p>\n</blockquote>\n<h3>ctrl f</h3>\n<blockquote>\n<p>向后移动</p>\n</blockquote>\n<h3>ctrl p</h3>\n<blockquote>\n<p>向上显示历史的命令</p>\n</blockquote>\n<h3>ctrl n</h3>\n<blockquote>\n<p>向下显示历史的命令</p>\n</blockquote>\n<h3>ctrl d</h3>\n<blockquote>\n<p>关闭终端</p>\n</blockquote>\n<h3>shift ±</h3>\n<blockquote>\n<p>终端页面上下滚动</p>\n</blockquote>\n<p>参考 <a href=\"https://blog.csdn.net/kyjl888/article/details/70833056\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kyjl888/article/details/70833056</a></p>"},{"title":"Linux中部署Maven项目, 自定义setting.xml文件","date":"2018-10-11T11:50:21.000Z","_content":"\n* 查看Linux中maven地址\n<!-- more -->\n> [root@iZbp1cj4z3w66bw25x346qZ Portal]# mvn -v\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-14T04:10:27+08:00)\nMaven home: ***/usr/local/maven***\nJava version: 1.8.0_131, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_131/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"2.6.32-642.13.1.el6.x86_64\", arch: \"amd64\", family: \"unix\"\n>\n> [root@iZbp1cj4z3w66bw25x346qZ Portal]# cd  /usr/local/maven\n> drwxr-xr-x 2 root root  4096 Apr 26  2017 logging\n-rw-r--r-- 1 root root 16404 Jul 26 16:52 settings_custom.xml\n-rw-r--r-- 1 root root 16177 Apr 26  2017 settings.xml\n\n```\n/usr/local/maven/conf/settings.xml      -- 默认的setting文件\n\n/usr/local/maven/conf/settings_custom.xml    -- 自定义的setting文件\n```\n* 启动项目, 在脚本中指定自己的setting.xml文件\n> settings /usr/local/maven/conf/settings_custom.xml\n```\nmvn clean compile exec:java --settings /usr/local/maven/conf/\nsettings_custom.xml -Plocal-config > /dev/null 2>&1 &\n```\n\n\n\n\n","source":"_posts/Linux中部署Maven项目, 自定义setting.xml文件.md","raw":"---\ntitle: Linux中部署Maven项目, 自定义setting.xml文件\ncategories: Linux\ntags: linux\ndate: 2018-10-11 19:50:21\n---\n\n* 查看Linux中maven地址\n<!-- more -->\n> [root@iZbp1cj4z3w66bw25x346qZ Portal]# mvn -v\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-14T04:10:27+08:00)\nMaven home: ***/usr/local/maven***\nJava version: 1.8.0_131, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_131/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"2.6.32-642.13.1.el6.x86_64\", arch: \"amd64\", family: \"unix\"\n>\n> [root@iZbp1cj4z3w66bw25x346qZ Portal]# cd  /usr/local/maven\n> drwxr-xr-x 2 root root  4096 Apr 26  2017 logging\n-rw-r--r-- 1 root root 16404 Jul 26 16:52 settings_custom.xml\n-rw-r--r-- 1 root root 16177 Apr 26  2017 settings.xml\n\n```\n/usr/local/maven/conf/settings.xml      -- 默认的setting文件\n\n/usr/local/maven/conf/settings_custom.xml    -- 自定义的setting文件\n```\n* 启动项目, 在脚本中指定自己的setting.xml文件\n> settings /usr/local/maven/conf/settings_custom.xml\n```\nmvn clean compile exec:java --settings /usr/local/maven/conf/\nsettings_custom.xml -Plocal-config > /dev/null 2>&1 &\n```\n\n\n\n\n","slug":"Linux中部署Maven项目, 自定义setting.xml文件","published":1,"updated":"2019-04-20T12:34:41.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xt2001nvq6b00tambmz","content":"<ul>\n<li>查看Linux中maven地址</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>[root@iZbp1cj4z3w66bw25x346qZ Portal]# mvn -v<br>\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-14T04:10:27+08:00)<br>\nMaven home: <strong><em>/usr/local/maven</em></strong><br>\nJava version: 1.8.0_131, vendor: Oracle Corporation<br>\nJava home: /usr/java/jdk1.8.0_131/jre<br>\nDefault locale: en_US, platform encoding: UTF-8<br>\nOS name: “linux”, version: “2.6.32-642.13.1.el6.x86_64”, arch: “amd64”, family: “unix”</p>\n<p>[root@iZbp1cj4z3w66bw25x346qZ Portal]# cd  /usr/local/maven<br>\ndrwxr-xr-x 2 root root  4096 Apr 26  2017 logging<br>\n-rw-r–r-- 1 root root 16404 Jul 26 16:52 settings_custom.xml<br>\n-rw-r–r-- 1 root root 16177 Apr 26  2017 settings.xml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/maven/conf/settings.xml      -- 默认的setting文件</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/maven/conf/settings_custom.xml    -- 自定义的setting文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动项目, 在脚本中指定自己的setting.xml文件</li>\n</ul>\n<blockquote>\n<p>settings /usr/local/maven/conf/settings_custom.xml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean compile exec:java --settings /usr/local/maven/conf/</span><br><span class=\"line\">settings_custom.xml -Plocal-config &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>查看Linux中maven地址</li>\n</ul>","more":"<blockquote>\n<p>[root@iZbp1cj4z3w66bw25x346qZ Portal]# mvn -v<br>\nApache Maven 3.3.1 (cab6659f9874fa96462afef40fcf6bc033d58c1c; 2015-03-14T04:10:27+08:00)<br>\nMaven home: <strong><em>/usr/local/maven</em></strong><br>\nJava version: 1.8.0_131, vendor: Oracle Corporation<br>\nJava home: /usr/java/jdk1.8.0_131/jre<br>\nDefault locale: en_US, platform encoding: UTF-8<br>\nOS name: “linux”, version: “2.6.32-642.13.1.el6.x86_64”, arch: “amd64”, family: “unix”</p>\n<p>[root@iZbp1cj4z3w66bw25x346qZ Portal]# cd  /usr/local/maven<br>\ndrwxr-xr-x 2 root root  4096 Apr 26  2017 logging<br>\n-rw-r–r-- 1 root root 16404 Jul 26 16:52 settings_custom.xml<br>\n-rw-r–r-- 1 root root 16177 Apr 26  2017 settings.xml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/maven/conf/settings.xml      -- 默认的setting文件</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/maven/conf/settings_custom.xml    -- 自定义的setting文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动项目, 在脚本中指定自己的setting.xml文件</li>\n</ul>\n<blockquote>\n<p>settings /usr/local/maven/conf/settings_custom.xml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean compile exec:java --settings /usr/local/maven/conf/</span><br><span class=\"line\">settings_custom.xml -Plocal-config &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>"},{"title":"Linux有趣（无用）的命令","date":"2018-09-04T15:33:21.000Z","_content":"\n### 准备\n更新yum\n```\n> yum update \n```\n安装wget\n\n```\n> yum install wget\n```\n下载EPEL\n```\n> wget http：//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n```\n<!-- more -->\n安装EPEL\n\n```\n> rpm -ivh epel-release-6-8.noarch.rpm\n```\n> 知识点： 什么是EPEL？ \n> [什么是EPEL 及 Centos上安装EPEL](http://www.cnblogs.com/gaoyuechen/p/7683471.html)\n\n### sl 命令\n一列火车呼啸而过\n\n安装sl\n\n```\n> wget install sl\n```\n\n运行sl\n\n```\n> sl\n```\n结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122101424177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n### fortune 命令\n给你一句名言警句\n\n下载 fortune\n```\n> wget http://springdale.math.ias.edu/data/puias/7/x86_64/os/Addons/Packages/fortune-mod-1.99.1-17.sdl7.x86_64.rpm\n```\n安装 fortune\n\n```\n>  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm\n\nwarning: fortune-mod-1.99.1-17.sdl7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 41a40948: NOKEY\nerror: Failed dependencies:\n\tlibrecode.so.0()(64bit) is needed by fortune-mod-1.99.1-17.sdl7.x86_64\n\n```\n如果出现error， 则需要安装依赖\n\n下载librecode([网站传送门](https://altlinux.pkgs.org/sisyphus/classic-x86_64/librecode-3.6-alt11.1.1.x86_64.rpm.html))\n\n```\n> wget http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus/x86_64/RPMS.classic//librecode-3.6-alt11.1.1.x86_64.rpm\n```\n安装 librecode\n```\n> rpm -ivh librecode-3.6-alt11.1.1.x86_64.rpm\nPreparing...                          ################################# [100%]\nUpdating / installing...\n   1:librecode-3.6-alt11.1.1          ################################# [100%]\n```\n重新安装 fortune\n\n```\n>  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm\nPreparing...                          ################################# [100%]\nUpdating / installing...\n   1:fortune-mod-1.99.1-17.sdl7       ################################# [100%]\n```\n效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122104258532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n### cowsay 命令\n一头很好玩的牛\n安装\n\n```\n> yum installl cowsay -y\n```\n运行：\n\n```\n> cowsay \"牛逼浑浑\"\n ______\n< 牛逼浑浑 >\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n查看其它支持的动物\n```\n> cowsay -l\nCow files in /usr/share/cowsay:\nbeavis.zen blowfish bong bud-frogs bunny cheese cower default dragon\ndragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters\nhead-in hellokitty kiss kitty koala kosh luke-koala mech-and-cow meow milk\nmoofasa moose mutilated ren satanic sheep skeleton small sodomized\nstegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle\ntux udder vader vader-koala www\n```\n\n切换其它图案（如下：kiss）\n\n```\n> cowsay -f kiss  \"I LOVE YOU\"\n ____________\n< I LOVE YOU >\n ------------\n     \\\n      \\\n             ,;;;;;;;,\n            ;;;;;;;;;;;,\n           ;;;;;'_____;'\n           ;;;(/))))|((\\\n           _;;((((((|))))\n          / |_\\\\\\\\\\\\\\\\\\\\\\\\\n     .--~(  \\ ~))))))))))))\n    /     \\  `\\-(((((((((((\\\\\n    |    | `\\   ) |\\       /|)\n     |    |  `. _/  \\_____/ |\n      |    , `\\~            /\n       |    \\  \\           /\n      | `.   `\\|          /\n      |   ~-   `\\        /\n       \\____~._/~ -_,   (\\\n        |-----|\\   \\    ';;\n       |      | :;;;'     \\\n      |  /    |            |\n      |       |            |\n\n```\n\n让cowsay说出fortune的内容\n\n```\n> fortune | cowsay -f kiss\n _____________________________________\n/ NEWS FLASH!! Today the East German  \\\n| pole-vault champion became the West |\n\\ German pole-vault champion.         /\n -------------------------------------\n     \\\n      \\\n             ,;;;;;;;,\n            ;;;;;;;;;;;,\n           ;;;;;'_____;'\n           ;;;(/))))|((\\\n           _;;((((((|))))\n          / |_\\\\\\\\\\\\\\\\\\\\\\\\\n     .--~(  \\ ~))))))))))))\n    /     \\  `\\-(((((((((((\\\\\n    |    | `\\   ) |\\       /|)\n     |    |  `. _/  \\_____/ |\n      |    , `\\~            /\n       |    \\  \\           /\n      | `.   `\\|          /\n      |   ~-   `\\        /\n       \\____~._/~ -_,   (\\\n        |-----|\\   \\    ';;\n       |      | :;;;'     \\\n      |  /    |            |\n      |       |            |\n```\n\n### cmatrix 命令\n可以做酷炫的屏保\n\n下载cmatrix\n```\n> wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz\n```\n解压并进入cmatrix\n```\n> tar -zxvf cmatrix-1.2a.tar.gz\n> cd cmatrix-1.2a\n```\n安装依赖\n\n```\n> yum install ncurses-devel\n```\n\n```\n>./configure && make && make install   \n如果出现以下提示，则说明未安装gcc\nloading cache ./config.cache\nchecking for a BSD compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking whether make sets ${MAKE}... yes\nchecking for working aclocal... missing\nchecking for working autoconf... missing\nchecking for working automake... missing\nchecking for working autoheader... missing\nchecking for working makeinfo... missing\nchecking for gcc... no\nchecking for cc... no\nconfigure: error: no acceptable cc found in $PATH\n```\n安装gcc\n```\n> yum -y install gcc\n> yum -y install gcc-c++\n>  yum install make\n```\n\n```\n>./configure && make && make install   \nloading cache ./config.cache\nchecking for a BSD compatible install... (cached) /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking whether make sets ${MAKE}... (cached) yes\nchecking for working aclocal... missing\nchecking for working autoconf... missing\nchecking for working automake... missing\nchecking for working autoheader... missing\nchecking for working makeinfo... missing\nchecking for gcc... (cached) gcc\nchecking whether the C compiler (gcc  ) works... yes\nchecking whether the C compiler (gcc  ) is a cross-compiler... no\nchecking whether we are using GNU C... (cached) yes\nchecking whether gcc accepts -g... (cached) yes\nchecking for a BSD compatible install... /usr/bin/install -c\nchecking whether make sets ${MAKE}... (cached) yes\nchecking for main in -lncurses... (cached) yes\nchecking how to run the C preprocessor... (cached) gcc -E\nchecking for ANSI C header files... (cached) yes\nchecking for fcntl.h... (cached) yes\nchecking for sys/ioctl.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for termios.h... (cached) yes\nchecking for termio.h... (cached) yes\nchecking return type of signal handlers... (cached) void\nchecking for putenv... (cached) yes\nchecking for curses.h... (cached) yes\nchecking for ncurses.h... (cached) yes\nchecking for tgetent in -lncurses... (cached) yes\nUsing ncurses as the termcap library\nchecking for use_default_colors in -lncurses... (cached) yes\nchecking for resizeterm in -lncurses... (cached) yes\nchecking for wresize in -lncurses... (cached) yes\nchecking for consolechars... (cached) no\nchecking for setfont... (cached) /usr/bin/setfont\nchecking for /usr/lib/kbd/consolefonts... (cached) yes\nchecking for /usr/share/consolefonts... (cached) no\nchecking for mkfontdir... (cached) /usr/bin/mkfontdir\nchecking for /usr/lib/X11/fonts/misc... (cached) no\nchecking for /usr/X11R6/lib/X11/fonts/misc... (cached) no\nconfigure: warning:  \n\n*** You do not appear to have an X window fonts directory in the standard\n*** locations (/usr/lib/X11/fonts/misc or /usr/X11R6/lib/X11/fonts/misc). The\n*** mtx.pcf font will not be installed.  This means you will probably not\n*** be able to use the mtx fonts in your x terminals, and hence be unable\n*** to use the -x command line switch.  Sorry about that...\n\ncreating ./config.status\ncreating Makefile\ncreating cmatrix.spec\ncreating config.h\nconfig.h is unchanged\nmake[1]: Entering directory `/root/cmatrix-1.2a'\n/bin/sh ./mkinstalldirs /usr/local/bin\n  /usr/bin/install -c  cmatrix /usr/local/bin/cmatrix\nmake  install-man1\nmake[2]: Entering directory `/root/cmatrix-1.2a'\n/bin/sh ./mkinstalldirs /usr/local/man/man1\n /usr/bin/install -c -m 644 ./cmatrix.1 /usr/local/man/man1/cmatrix.1\nmake[2]: Leaving directory `/root/cmatrix-1.2a'\n Installing matrix fonts in /usr/lib/kbd/consolefonts...\nmake[1]: Leaving directory `/root/cmatrix-1.2a'\n```\n运行\n\n```\n> cmatrix -b\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2018112211354044.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n常用命令\n\n```\ncmatrix-a :异步滚动（默认）\n\ncmatrix-b :随机粗体\n\ncmatrix-B :全部粗体\n\ncmatrix-o :使用旧风格滚动\n\ncmatrix-x :X window 模式\n\ncmatrix-V :显示版本信息\n\ncmatrix-u :刷新频率，0-9，也就是滚动的快慢\n\ncmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan,\n        magenta and black\n\n例如:使用红色\n\ncmatrix -b -C red\n\n使用蓝色\n\ncmatrix -b -C blue\n```\n参考：http://blog.51cto.com/5232821/2146115\n\n### figlet命令\n生成艺术字\n安装\n\n```\n> yum install figlet\n```\n运行\n\n```\n> figlet I MISS YOU\n ___   __  __ ___ ____ ____   __   _____  _   _ \n|_ _| |  \\/  |_ _/ ___/ ___|  \\ \\ / / _ \\| | | |\n | |  | |\\/| || |\\___ \\___ \\   \\ V / | | | | | |\n | |  | |  | || | ___) |__) |   | || |_| | |_| |\n|___| |_|  |_|___|____/____/    |_| \\___/ \\___/ \n                                               \n```\n\n参考：[微信公众号：Java技术栈](https://mp.weixin.qq.com/s/HXJ25E1b3J-zcVeI_Q2E7Q)\n","source":"_posts/Linux有趣（无用）的命令.md","raw":"---\ntitle: Linux有趣（无用）的命令\ncategories: Linux\ntags: linux\ndate: 2018-09-04 23:33:21\n---\n\n### 准备\n更新yum\n```\n> yum update \n```\n安装wget\n\n```\n> yum install wget\n```\n下载EPEL\n```\n> wget http：//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n```\n<!-- more -->\n安装EPEL\n\n```\n> rpm -ivh epel-release-6-8.noarch.rpm\n```\n> 知识点： 什么是EPEL？ \n> [什么是EPEL 及 Centos上安装EPEL](http://www.cnblogs.com/gaoyuechen/p/7683471.html)\n\n### sl 命令\n一列火车呼啸而过\n\n安装sl\n\n```\n> wget install sl\n```\n\n运行sl\n\n```\n> sl\n```\n结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122101424177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n### fortune 命令\n给你一句名言警句\n\n下载 fortune\n```\n> wget http://springdale.math.ias.edu/data/puias/7/x86_64/os/Addons/Packages/fortune-mod-1.99.1-17.sdl7.x86_64.rpm\n```\n安装 fortune\n\n```\n>  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm\n\nwarning: fortune-mod-1.99.1-17.sdl7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 41a40948: NOKEY\nerror: Failed dependencies:\n\tlibrecode.so.0()(64bit) is needed by fortune-mod-1.99.1-17.sdl7.x86_64\n\n```\n如果出现error， 则需要安装依赖\n\n下载librecode([网站传送门](https://altlinux.pkgs.org/sisyphus/classic-x86_64/librecode-3.6-alt11.1.1.x86_64.rpm.html))\n\n```\n> wget http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus/x86_64/RPMS.classic//librecode-3.6-alt11.1.1.x86_64.rpm\n```\n安装 librecode\n```\n> rpm -ivh librecode-3.6-alt11.1.1.x86_64.rpm\nPreparing...                          ################################# [100%]\nUpdating / installing...\n   1:librecode-3.6-alt11.1.1          ################################# [100%]\n```\n重新安装 fortune\n\n```\n>  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm\nPreparing...                          ################################# [100%]\nUpdating / installing...\n   1:fortune-mod-1.99.1-17.sdl7       ################################# [100%]\n```\n效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181122104258532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n### cowsay 命令\n一头很好玩的牛\n安装\n\n```\n> yum installl cowsay -y\n```\n运行：\n\n```\n> cowsay \"牛逼浑浑\"\n ______\n< 牛逼浑浑 >\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n查看其它支持的动物\n```\n> cowsay -l\nCow files in /usr/share/cowsay:\nbeavis.zen blowfish bong bud-frogs bunny cheese cower default dragon\ndragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters\nhead-in hellokitty kiss kitty koala kosh luke-koala mech-and-cow meow milk\nmoofasa moose mutilated ren satanic sheep skeleton small sodomized\nstegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle\ntux udder vader vader-koala www\n```\n\n切换其它图案（如下：kiss）\n\n```\n> cowsay -f kiss  \"I LOVE YOU\"\n ____________\n< I LOVE YOU >\n ------------\n     \\\n      \\\n             ,;;;;;;;,\n            ;;;;;;;;;;;,\n           ;;;;;'_____;'\n           ;;;(/))))|((\\\n           _;;((((((|))))\n          / |_\\\\\\\\\\\\\\\\\\\\\\\\\n     .--~(  \\ ~))))))))))))\n    /     \\  `\\-(((((((((((\\\\\n    |    | `\\   ) |\\       /|)\n     |    |  `. _/  \\_____/ |\n      |    , `\\~            /\n       |    \\  \\           /\n      | `.   `\\|          /\n      |   ~-   `\\        /\n       \\____~._/~ -_,   (\\\n        |-----|\\   \\    ';;\n       |      | :;;;'     \\\n      |  /    |            |\n      |       |            |\n\n```\n\n让cowsay说出fortune的内容\n\n```\n> fortune | cowsay -f kiss\n _____________________________________\n/ NEWS FLASH!! Today the East German  \\\n| pole-vault champion became the West |\n\\ German pole-vault champion.         /\n -------------------------------------\n     \\\n      \\\n             ,;;;;;;;,\n            ;;;;;;;;;;;,\n           ;;;;;'_____;'\n           ;;;(/))))|((\\\n           _;;((((((|))))\n          / |_\\\\\\\\\\\\\\\\\\\\\\\\\n     .--~(  \\ ~))))))))))))\n    /     \\  `\\-(((((((((((\\\\\n    |    | `\\   ) |\\       /|)\n     |    |  `. _/  \\_____/ |\n      |    , `\\~            /\n       |    \\  \\           /\n      | `.   `\\|          /\n      |   ~-   `\\        /\n       \\____~._/~ -_,   (\\\n        |-----|\\   \\    ';;\n       |      | :;;;'     \\\n      |  /    |            |\n      |       |            |\n```\n\n### cmatrix 命令\n可以做酷炫的屏保\n\n下载cmatrix\n```\n> wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz\n```\n解压并进入cmatrix\n```\n> tar -zxvf cmatrix-1.2a.tar.gz\n> cd cmatrix-1.2a\n```\n安装依赖\n\n```\n> yum install ncurses-devel\n```\n\n```\n>./configure && make && make install   \n如果出现以下提示，则说明未安装gcc\nloading cache ./config.cache\nchecking for a BSD compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking whether make sets ${MAKE}... yes\nchecking for working aclocal... missing\nchecking for working autoconf... missing\nchecking for working automake... missing\nchecking for working autoheader... missing\nchecking for working makeinfo... missing\nchecking for gcc... no\nchecking for cc... no\nconfigure: error: no acceptable cc found in $PATH\n```\n安装gcc\n```\n> yum -y install gcc\n> yum -y install gcc-c++\n>  yum install make\n```\n\n```\n>./configure && make && make install   \nloading cache ./config.cache\nchecking for a BSD compatible install... (cached) /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking whether make sets ${MAKE}... (cached) yes\nchecking for working aclocal... missing\nchecking for working autoconf... missing\nchecking for working automake... missing\nchecking for working autoheader... missing\nchecking for working makeinfo... missing\nchecking for gcc... (cached) gcc\nchecking whether the C compiler (gcc  ) works... yes\nchecking whether the C compiler (gcc  ) is a cross-compiler... no\nchecking whether we are using GNU C... (cached) yes\nchecking whether gcc accepts -g... (cached) yes\nchecking for a BSD compatible install... /usr/bin/install -c\nchecking whether make sets ${MAKE}... (cached) yes\nchecking for main in -lncurses... (cached) yes\nchecking how to run the C preprocessor... (cached) gcc -E\nchecking for ANSI C header files... (cached) yes\nchecking for fcntl.h... (cached) yes\nchecking for sys/ioctl.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for termios.h... (cached) yes\nchecking for termio.h... (cached) yes\nchecking return type of signal handlers... (cached) void\nchecking for putenv... (cached) yes\nchecking for curses.h... (cached) yes\nchecking for ncurses.h... (cached) yes\nchecking for tgetent in -lncurses... (cached) yes\nUsing ncurses as the termcap library\nchecking for use_default_colors in -lncurses... (cached) yes\nchecking for resizeterm in -lncurses... (cached) yes\nchecking for wresize in -lncurses... (cached) yes\nchecking for consolechars... (cached) no\nchecking for setfont... (cached) /usr/bin/setfont\nchecking for /usr/lib/kbd/consolefonts... (cached) yes\nchecking for /usr/share/consolefonts... (cached) no\nchecking for mkfontdir... (cached) /usr/bin/mkfontdir\nchecking for /usr/lib/X11/fonts/misc... (cached) no\nchecking for /usr/X11R6/lib/X11/fonts/misc... (cached) no\nconfigure: warning:  \n\n*** You do not appear to have an X window fonts directory in the standard\n*** locations (/usr/lib/X11/fonts/misc or /usr/X11R6/lib/X11/fonts/misc). The\n*** mtx.pcf font will not be installed.  This means you will probably not\n*** be able to use the mtx fonts in your x terminals, and hence be unable\n*** to use the -x command line switch.  Sorry about that...\n\ncreating ./config.status\ncreating Makefile\ncreating cmatrix.spec\ncreating config.h\nconfig.h is unchanged\nmake[1]: Entering directory `/root/cmatrix-1.2a'\n/bin/sh ./mkinstalldirs /usr/local/bin\n  /usr/bin/install -c  cmatrix /usr/local/bin/cmatrix\nmake  install-man1\nmake[2]: Entering directory `/root/cmatrix-1.2a'\n/bin/sh ./mkinstalldirs /usr/local/man/man1\n /usr/bin/install -c -m 644 ./cmatrix.1 /usr/local/man/man1/cmatrix.1\nmake[2]: Leaving directory `/root/cmatrix-1.2a'\n Installing matrix fonts in /usr/lib/kbd/consolefonts...\nmake[1]: Leaving directory `/root/cmatrix-1.2a'\n```\n运行\n\n```\n> cmatrix -b\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2018112211354044.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n常用命令\n\n```\ncmatrix-a :异步滚动（默认）\n\ncmatrix-b :随机粗体\n\ncmatrix-B :全部粗体\n\ncmatrix-o :使用旧风格滚动\n\ncmatrix-x :X window 模式\n\ncmatrix-V :显示版本信息\n\ncmatrix-u :刷新频率，0-9，也就是滚动的快慢\n\ncmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan,\n        magenta and black\n\n例如:使用红色\n\ncmatrix -b -C red\n\n使用蓝色\n\ncmatrix -b -C blue\n```\n参考：http://blog.51cto.com/5232821/2146115\n\n### figlet命令\n生成艺术字\n安装\n\n```\n> yum install figlet\n```\n运行\n\n```\n> figlet I MISS YOU\n ___   __  __ ___ ____ ____   __   _____  _   _ \n|_ _| |  \\/  |_ _/ ___/ ___|  \\ \\ / / _ \\| | | |\n | |  | |\\/| || |\\___ \\___ \\   \\ V / | | | | | |\n | |  | |  | || | ___) |__) |   | || |_| | |_| |\n|___| |_|  |_|___|____/____/    |_| \\___/ \\___/ \n                                               \n```\n\n参考：[微信公众号：Java技术栈](https://mp.weixin.qq.com/s/HXJ25E1b3J-zcVeI_Q2E7Q)\n","slug":"Linux有趣（无用）的命令","published":1,"updated":"2019-04-20T12:34:11.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xt4001svq6bcsqfpdaq","content":"<h3 id=\"准备\">准备</h3>\n<p>更新yum</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum update</span><br></pre></td></tr></table></figure>\n<p>安装wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install wget</span><br></pre></td></tr></table></figure>\n<p>下载EPEL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http：//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>安装EPEL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -ivh epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>知识点： 什么是EPEL？<br>\n<a href=\"http://www.cnblogs.com/gaoyuechen/p/7683471.html\" target=\"_blank\" rel=\"noopener\">什么是EPEL 及 Centos上安装EPEL</a></p>\n</blockquote>\n<h3 id=\"sl-命令\">sl 命令</h3>\n<p>一列火车呼啸而过</p>\n<p>安装sl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget install sl</span><br></pre></td></tr></table></figure>\n<p>运行sl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sl</span><br></pre></td></tr></table></figure>\n<p>结果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181122101424177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"fortune-命令\">fortune 命令</h3>\n<p>给你一句名言警句</p>\n<p>下载 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http://springdale.math.ias.edu/data/puias/7/x86_64/os/Addons/Packages/fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>安装 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">warning: fortune-mod-1.99.1-17.sdl7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 41a40948: NOKEY</span><br><span class=\"line\">error: Failed dependencies:</span><br><span class=\"line\">\tlibrecode.so.0()(64bit) is needed by fortune-mod-1.99.1-17.sdl7.x86_64</span><br></pre></td></tr></table></figure>\n<p>如果出现error， 则需要安装依赖</p>\n<p>下载librecode(<a href=\"https://altlinux.pkgs.org/sisyphus/classic-x86_64/librecode-3.6-alt11.1.1.x86_64.rpm.html\" target=\"_blank\" rel=\"noopener\">网站传送门</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus/x86_64/RPMS.classic//librecode-3.6-alt11.1.1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>安装 librecode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -ivh librecode-3.6-alt11.1.1.x86_64.rpm</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br><span class=\"line\">Updating / installing...</span><br><span class=\"line\">   1:librecode-3.6-alt11.1.1          ################################# [100%]</span><br></pre></td></tr></table></figure>\n<p>重新安装 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br><span class=\"line\">Updating / installing...</span><br><span class=\"line\">   1:fortune-mod-1.99.1-17.sdl7       ################################# [100%]</span><br></pre></td></tr></table></figure>\n<p>效果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181122104258532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"cowsay-命令\">cowsay 命令</h3>\n<p>一头很好玩的牛<br>\n安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum installl cowsay -y</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay &quot;牛逼浑浑&quot;</span><br><span class=\"line\"> ______</span><br><span class=\"line\">&lt; 牛逼浑浑 &gt;</span><br><span class=\"line\"> ------</span><br><span class=\"line\">        \\   ^__^</span><br><span class=\"line\">         \\  (oo)\\_______</span><br><span class=\"line\">            (__)\\       )\\/\\</span><br><span class=\"line\">                ||----w |</span><br><span class=\"line\">                ||     ||</span><br></pre></td></tr></table></figure>\n<p>查看其它支持的动物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay -l</span><br><span class=\"line\">Cow files in /usr/share/cowsay:</span><br><span class=\"line\">beavis.zen blowfish bong bud-frogs bunny cheese cower default dragon</span><br><span class=\"line\">dragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters</span><br><span class=\"line\">head-in hellokitty kiss kitty koala kosh luke-koala mech-and-cow meow milk</span><br><span class=\"line\">moofasa moose mutilated ren satanic sheep skeleton small sodomized</span><br><span class=\"line\">stegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle</span><br><span class=\"line\">tux udder vader vader-koala www</span><br></pre></td></tr></table></figure>\n<p>切换其它图案（如下：kiss）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay -f kiss  &quot;I LOVE YOU&quot;</span><br><span class=\"line\"> ____________</span><br><span class=\"line\">&lt; I LOVE YOU &gt;</span><br><span class=\"line\"> ------------</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\</span><br><span class=\"line\">             ,;;;;;;;,</span><br><span class=\"line\">            ;;;;;;;;;;;,</span><br><span class=\"line\">           ;;;;;&apos;_____;&apos;</span><br><span class=\"line\">           ;;;(/))))|((\\</span><br><span class=\"line\">           _;;((((((|))))</span><br><span class=\"line\">          / |_\\\\\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">     .--~(  \\ ~))))))))))))</span><br><span class=\"line\">    /     \\  `\\-(((((((((((\\\\</span><br><span class=\"line\">    |    | `\\   ) |\\       /|)</span><br><span class=\"line\">     |    |  `. _/  \\_____/ |</span><br><span class=\"line\">      |    , `\\~            /</span><br><span class=\"line\">       |    \\  \\           /</span><br><span class=\"line\">      | `.   `\\|          /</span><br><span class=\"line\">      |   ~-   `\\        /</span><br><span class=\"line\">       \\____~._/~ -_,   (\\</span><br><span class=\"line\">        |-----|\\   \\    &apos;;;</span><br><span class=\"line\">       |      | :;;;&apos;     \\</span><br><span class=\"line\">      |  /    |            |</span><br><span class=\"line\">      |       |            |</span><br></pre></td></tr></table></figure>\n<p>让cowsay说出fortune的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; fortune | cowsay -f kiss</span><br><span class=\"line\"> _____________________________________</span><br><span class=\"line\">/ NEWS FLASH!! Today the East German  \\</span><br><span class=\"line\">| pole-vault champion became the West |</span><br><span class=\"line\">\\ German pole-vault champion.         /</span><br><span class=\"line\"> -------------------------------------</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\</span><br><span class=\"line\">             ,;;;;;;;,</span><br><span class=\"line\">            ;;;;;;;;;;;,</span><br><span class=\"line\">           ;;;;;&apos;_____;&apos;</span><br><span class=\"line\">           ;;;(/))))|((\\</span><br><span class=\"line\">           _;;((((((|))))</span><br><span class=\"line\">          / |_\\\\\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">     .--~(  \\ ~))))))))))))</span><br><span class=\"line\">    /     \\  `\\-(((((((((((\\\\</span><br><span class=\"line\">    |    | `\\   ) |\\       /|)</span><br><span class=\"line\">     |    |  `. _/  \\_____/ |</span><br><span class=\"line\">      |    , `\\~            /</span><br><span class=\"line\">       |    \\  \\           /</span><br><span class=\"line\">      | `.   `\\|          /</span><br><span class=\"line\">      |   ~-   `\\        /</span><br><span class=\"line\">       \\____~._/~ -_,   (\\</span><br><span class=\"line\">        |-----|\\   \\    &apos;;;</span><br><span class=\"line\">       |      | :;;;&apos;     \\</span><br><span class=\"line\">      |  /    |            |</span><br><span class=\"line\">      |       |            |</span><br></pre></td></tr></table></figure>\n<h3 id=\"cmatrix-命令\">cmatrix 命令</h3>\n<p>可以做酷炫的屏保</p>\n<p>下载cmatrix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压并进入cmatrix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; tar -zxvf cmatrix-1.2a.tar.gz</span><br><span class=\"line\">&gt; cd cmatrix-1.2a</span><br></pre></td></tr></table></figure>\n<p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install ncurses-devel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;./configure &amp;&amp; make &amp;&amp; make install   </span><br><span class=\"line\">如果出现以下提示，则说明未安装gcc</span><br><span class=\"line\">loading cache ./config.cache</span><br><span class=\"line\">checking for a BSD compatible install... /usr/bin/install -c</span><br><span class=\"line\">checking whether build environment is sane... yes</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... yes</span><br><span class=\"line\">checking for working aclocal... missing</span><br><span class=\"line\">checking for working autoconf... missing</span><br><span class=\"line\">checking for working automake... missing</span><br><span class=\"line\">checking for working autoheader... missing</span><br><span class=\"line\">checking for working makeinfo... missing</span><br><span class=\"line\">checking for gcc... no</span><br><span class=\"line\">checking for cc... no</span><br><span class=\"line\">configure: error: no acceptable cc found in $PATH</span><br></pre></td></tr></table></figure>\n<p>安装gcc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum -y install gcc</span><br><span class=\"line\">&gt; yum -y install gcc-c++</span><br><span class=\"line\">&gt;  yum install make</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;./configure &amp;&amp; make &amp;&amp; make install   </span><br><span class=\"line\">loading cache ./config.cache</span><br><span class=\"line\">checking for a BSD compatible install... (cached) /usr/bin/install -c</span><br><span class=\"line\">checking whether build environment is sane... yes</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... (cached) yes</span><br><span class=\"line\">checking for working aclocal... missing</span><br><span class=\"line\">checking for working autoconf... missing</span><br><span class=\"line\">checking for working automake... missing</span><br><span class=\"line\">checking for working autoheader... missing</span><br><span class=\"line\">checking for working makeinfo... missing</span><br><span class=\"line\">checking for gcc... (cached) gcc</span><br><span class=\"line\">checking whether the C compiler (gcc  ) works... yes</span><br><span class=\"line\">checking whether the C compiler (gcc  ) is a cross-compiler... no</span><br><span class=\"line\">checking whether we are using GNU C... (cached) yes</span><br><span class=\"line\">checking whether gcc accepts -g... (cached) yes</span><br><span class=\"line\">checking for a BSD compatible install... /usr/bin/install -c</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... (cached) yes</span><br><span class=\"line\">checking for main in -lncurses... (cached) yes</span><br><span class=\"line\">checking how to run the C preprocessor... (cached) gcc -E</span><br><span class=\"line\">checking for ANSI C header files... (cached) yes</span><br><span class=\"line\">checking for fcntl.h... (cached) yes</span><br><span class=\"line\">checking for sys/ioctl.h... (cached) yes</span><br><span class=\"line\">checking for unistd.h... (cached) yes</span><br><span class=\"line\">checking for termios.h... (cached) yes</span><br><span class=\"line\">checking for termio.h... (cached) yes</span><br><span class=\"line\">checking return type of signal handlers... (cached) void</span><br><span class=\"line\">checking for putenv... (cached) yes</span><br><span class=\"line\">checking for curses.h... (cached) yes</span><br><span class=\"line\">checking for ncurses.h... (cached) yes</span><br><span class=\"line\">checking for tgetent in -lncurses... (cached) yes</span><br><span class=\"line\">Using ncurses as the termcap library</span><br><span class=\"line\">checking for use_default_colors in -lncurses... (cached) yes</span><br><span class=\"line\">checking for resizeterm in -lncurses... (cached) yes</span><br><span class=\"line\">checking for wresize in -lncurses... (cached) yes</span><br><span class=\"line\">checking for consolechars... (cached) no</span><br><span class=\"line\">checking for setfont... (cached) /usr/bin/setfont</span><br><span class=\"line\">checking for /usr/lib/kbd/consolefonts... (cached) yes</span><br><span class=\"line\">checking for /usr/share/consolefonts... (cached) no</span><br><span class=\"line\">checking for mkfontdir... (cached) /usr/bin/mkfontdir</span><br><span class=\"line\">checking for /usr/lib/X11/fonts/misc... (cached) no</span><br><span class=\"line\">checking for /usr/X11R6/lib/X11/fonts/misc... (cached) no</span><br><span class=\"line\">configure: warning:  </span><br><span class=\"line\"></span><br><span class=\"line\">*** You do not appear to have an X window fonts directory in the standard</span><br><span class=\"line\">*** locations (/usr/lib/X11/fonts/misc or /usr/X11R6/lib/X11/fonts/misc). The</span><br><span class=\"line\">*** mtx.pcf font will not be installed.  This means you will probably not</span><br><span class=\"line\">*** be able to use the mtx fonts in your x terminals, and hence be unable</span><br><span class=\"line\">*** to use the -x command line switch.  Sorry about that...</span><br><span class=\"line\"></span><br><span class=\"line\">creating ./config.status</span><br><span class=\"line\">creating Makefile</span><br><span class=\"line\">creating cmatrix.spec</span><br><span class=\"line\">creating config.h</span><br><span class=\"line\">config.h is unchanged</span><br><span class=\"line\">make[1]: Entering directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\">/bin/sh ./mkinstalldirs /usr/local/bin</span><br><span class=\"line\">  /usr/bin/install -c  cmatrix /usr/local/bin/cmatrix</span><br><span class=\"line\">make  install-man1</span><br><span class=\"line\">make[2]: Entering directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\">/bin/sh ./mkinstalldirs /usr/local/man/man1</span><br><span class=\"line\"> /usr/bin/install -c -m 644 ./cmatrix.1 /usr/local/man/man1/cmatrix.1</span><br><span class=\"line\">make[2]: Leaving directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\"> Installing matrix fonts in /usr/lib/kbd/consolefonts...</span><br><span class=\"line\">make[1]: Leaving directory `/root/cmatrix-1.2a&apos;</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cmatrix -b</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/2018112211354044.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmatrix-a :异步滚动（默认）</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-b :随机粗体</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-B :全部粗体</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-o :使用旧风格滚动</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-x :X window 模式</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-V :显示版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-u :刷新频率，0-9，也就是滚动的快慢</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan,</span><br><span class=\"line\">        magenta and black</span><br><span class=\"line\"></span><br><span class=\"line\">例如:使用红色</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix -b -C red</span><br><span class=\"line\"></span><br><span class=\"line\">使用蓝色</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix -b -C blue</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://blog.51cto.com/5232821/2146115\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/5232821/2146115</a></p>\n<h3 id=\"figlet命令\">figlet命令</h3>\n<p>生成艺术字<br>\n安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install figlet</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; figlet I MISS YOU</span><br><span class=\"line\"> ___   __  __ ___ ____ ____   __   _____  _   _ </span><br><span class=\"line\">|_ _| |  \\/  |_ _/ ___/ ___|  \\ \\ / / _ \\| | | |</span><br><span class=\"line\"> | |  | |\\/| || |\\___ \\___ \\   \\ V / | | | | | |</span><br><span class=\"line\"> | |  | |  | || | ___) |__) |   | || |_| | |_| |</span><br><span class=\"line\">|___| |_|  |_|___|____/____/    |_| \\___/ \\___/</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://mp.weixin.qq.com/s/HXJ25E1b3J-zcVeI_Q2E7Q\" target=\"_blank\" rel=\"noopener\">微信公众号：Java技术栈</a></p>\n","site":{"data":{}},"excerpt":"<h3>准备</h3>\n<p>更新yum</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum update</span><br></pre></td></tr></table></figure>\n<p>安装wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install wget</span><br></pre></td></tr></table></figure>\n<p>下载EPEL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http：//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>","more":"<p>安装EPEL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -ivh epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>知识点： 什么是EPEL？<br>\n<a href=\"http://www.cnblogs.com/gaoyuechen/p/7683471.html\" target=\"_blank\" rel=\"noopener\">什么是EPEL 及 Centos上安装EPEL</a></p>\n</blockquote>\n<h3>sl 命令</h3>\n<p>一列火车呼啸而过</p>\n<p>安装sl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget install sl</span><br></pre></td></tr></table></figure>\n<p>运行sl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sl</span><br></pre></td></tr></table></figure>\n<p>结果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181122101424177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3>fortune 命令</h3>\n<p>给你一句名言警句</p>\n<p>下载 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http://springdale.math.ias.edu/data/puias/7/x86_64/os/Addons/Packages/fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>安装 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">warning: fortune-mod-1.99.1-17.sdl7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 41a40948: NOKEY</span><br><span class=\"line\">error: Failed dependencies:</span><br><span class=\"line\">\tlibrecode.so.0()(64bit) is needed by fortune-mod-1.99.1-17.sdl7.x86_64</span><br></pre></td></tr></table></figure>\n<p>如果出现error， 则需要安装依赖</p>\n<p>下载librecode(<a href=\"https://altlinux.pkgs.org/sisyphus/classic-x86_64/librecode-3.6-alt11.1.1.x86_64.rpm.html\" target=\"_blank\" rel=\"noopener\">网站传送门</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus/x86_64/RPMS.classic//librecode-3.6-alt11.1.1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>安装 librecode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -ivh librecode-3.6-alt11.1.1.x86_64.rpm</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br><span class=\"line\">Updating / installing...</span><br><span class=\"line\">   1:librecode-3.6-alt11.1.1          ################################# [100%]</span><br></pre></td></tr></table></figure>\n<p>重新安装 fortune</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  rpm -ivh fortune-mod-1.99.1-17.sdl7.x86_64.rpm</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br><span class=\"line\">Updating / installing...</span><br><span class=\"line\">   1:fortune-mod-1.99.1-17.sdl7       ################################# [100%]</span><br></pre></td></tr></table></figure>\n<p>效果：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181122104258532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3>cowsay 命令</h3>\n<p>一头很好玩的牛<br>\n安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum installl cowsay -y</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay &quot;牛逼浑浑&quot;</span><br><span class=\"line\"> ______</span><br><span class=\"line\">&lt; 牛逼浑浑 &gt;</span><br><span class=\"line\"> ------</span><br><span class=\"line\">        \\   ^__^</span><br><span class=\"line\">         \\  (oo)\\_______</span><br><span class=\"line\">            (__)\\       )\\/\\</span><br><span class=\"line\">                ||----w |</span><br><span class=\"line\">                ||     ||</span><br></pre></td></tr></table></figure>\n<p>查看其它支持的动物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay -l</span><br><span class=\"line\">Cow files in /usr/share/cowsay:</span><br><span class=\"line\">beavis.zen blowfish bong bud-frogs bunny cheese cower default dragon</span><br><span class=\"line\">dragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters</span><br><span class=\"line\">head-in hellokitty kiss kitty koala kosh luke-koala mech-and-cow meow milk</span><br><span class=\"line\">moofasa moose mutilated ren satanic sheep skeleton small sodomized</span><br><span class=\"line\">stegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle</span><br><span class=\"line\">tux udder vader vader-koala www</span><br></pre></td></tr></table></figure>\n<p>切换其它图案（如下：kiss）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cowsay -f kiss  &quot;I LOVE YOU&quot;</span><br><span class=\"line\"> ____________</span><br><span class=\"line\">&lt; I LOVE YOU &gt;</span><br><span class=\"line\"> ------------</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\</span><br><span class=\"line\">             ,;;;;;;;,</span><br><span class=\"line\">            ;;;;;;;;;;;,</span><br><span class=\"line\">           ;;;;;&apos;_____;&apos;</span><br><span class=\"line\">           ;;;(/))))|((\\</span><br><span class=\"line\">           _;;((((((|))))</span><br><span class=\"line\">          / |_\\\\\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">     .--~(  \\ ~))))))))))))</span><br><span class=\"line\">    /     \\  `\\-(((((((((((\\\\</span><br><span class=\"line\">    |    | `\\   ) |\\       /|)</span><br><span class=\"line\">     |    |  `. _/  \\_____/ |</span><br><span class=\"line\">      |    , `\\~            /</span><br><span class=\"line\">       |    \\  \\           /</span><br><span class=\"line\">      | `.   `\\|          /</span><br><span class=\"line\">      |   ~-   `\\        /</span><br><span class=\"line\">       \\____~._/~ -_,   (\\</span><br><span class=\"line\">        |-----|\\   \\    &apos;;;</span><br><span class=\"line\">       |      | :;;;&apos;     \\</span><br><span class=\"line\">      |  /    |            |</span><br><span class=\"line\">      |       |            |</span><br></pre></td></tr></table></figure>\n<p>让cowsay说出fortune的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; fortune | cowsay -f kiss</span><br><span class=\"line\"> _____________________________________</span><br><span class=\"line\">/ NEWS FLASH!! Today the East German  \\</span><br><span class=\"line\">| pole-vault champion became the West |</span><br><span class=\"line\">\\ German pole-vault champion.         /</span><br><span class=\"line\"> -------------------------------------</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\</span><br><span class=\"line\">             ,;;;;;;;,</span><br><span class=\"line\">            ;;;;;;;;;;;,</span><br><span class=\"line\">           ;;;;;&apos;_____;&apos;</span><br><span class=\"line\">           ;;;(/))))|((\\</span><br><span class=\"line\">           _;;((((((|))))</span><br><span class=\"line\">          / |_\\\\\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">     .--~(  \\ ~))))))))))))</span><br><span class=\"line\">    /     \\  `\\-(((((((((((\\\\</span><br><span class=\"line\">    |    | `\\   ) |\\       /|)</span><br><span class=\"line\">     |    |  `. _/  \\_____/ |</span><br><span class=\"line\">      |    , `\\~            /</span><br><span class=\"line\">       |    \\  \\           /</span><br><span class=\"line\">      | `.   `\\|          /</span><br><span class=\"line\">      |   ~-   `\\        /</span><br><span class=\"line\">       \\____~._/~ -_,   (\\</span><br><span class=\"line\">        |-----|\\   \\    &apos;;;</span><br><span class=\"line\">       |      | :;;;&apos;     \\</span><br><span class=\"line\">      |  /    |            |</span><br><span class=\"line\">      |       |            |</span><br></pre></td></tr></table></figure>\n<h3>cmatrix 命令</h3>\n<p>可以做酷炫的屏保</p>\n<p>下载cmatrix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压并进入cmatrix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; tar -zxvf cmatrix-1.2a.tar.gz</span><br><span class=\"line\">&gt; cd cmatrix-1.2a</span><br></pre></td></tr></table></figure>\n<p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install ncurses-devel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;./configure &amp;&amp; make &amp;&amp; make install   </span><br><span class=\"line\">如果出现以下提示，则说明未安装gcc</span><br><span class=\"line\">loading cache ./config.cache</span><br><span class=\"line\">checking for a BSD compatible install... /usr/bin/install -c</span><br><span class=\"line\">checking whether build environment is sane... yes</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... yes</span><br><span class=\"line\">checking for working aclocal... missing</span><br><span class=\"line\">checking for working autoconf... missing</span><br><span class=\"line\">checking for working automake... missing</span><br><span class=\"line\">checking for working autoheader... missing</span><br><span class=\"line\">checking for working makeinfo... missing</span><br><span class=\"line\">checking for gcc... no</span><br><span class=\"line\">checking for cc... no</span><br><span class=\"line\">configure: error: no acceptable cc found in $PATH</span><br></pre></td></tr></table></figure>\n<p>安装gcc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum -y install gcc</span><br><span class=\"line\">&gt; yum -y install gcc-c++</span><br><span class=\"line\">&gt;  yum install make</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;./configure &amp;&amp; make &amp;&amp; make install   </span><br><span class=\"line\">loading cache ./config.cache</span><br><span class=\"line\">checking for a BSD compatible install... (cached) /usr/bin/install -c</span><br><span class=\"line\">checking whether build environment is sane... yes</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... (cached) yes</span><br><span class=\"line\">checking for working aclocal... missing</span><br><span class=\"line\">checking for working autoconf... missing</span><br><span class=\"line\">checking for working automake... missing</span><br><span class=\"line\">checking for working autoheader... missing</span><br><span class=\"line\">checking for working makeinfo... missing</span><br><span class=\"line\">checking for gcc... (cached) gcc</span><br><span class=\"line\">checking whether the C compiler (gcc  ) works... yes</span><br><span class=\"line\">checking whether the C compiler (gcc  ) is a cross-compiler... no</span><br><span class=\"line\">checking whether we are using GNU C... (cached) yes</span><br><span class=\"line\">checking whether gcc accepts -g... (cached) yes</span><br><span class=\"line\">checking for a BSD compatible install... /usr/bin/install -c</span><br><span class=\"line\">checking whether make sets $&#123;MAKE&#125;... (cached) yes</span><br><span class=\"line\">checking for main in -lncurses... (cached) yes</span><br><span class=\"line\">checking how to run the C preprocessor... (cached) gcc -E</span><br><span class=\"line\">checking for ANSI C header files... (cached) yes</span><br><span class=\"line\">checking for fcntl.h... (cached) yes</span><br><span class=\"line\">checking for sys/ioctl.h... (cached) yes</span><br><span class=\"line\">checking for unistd.h... (cached) yes</span><br><span class=\"line\">checking for termios.h... (cached) yes</span><br><span class=\"line\">checking for termio.h... (cached) yes</span><br><span class=\"line\">checking return type of signal handlers... (cached) void</span><br><span class=\"line\">checking for putenv... (cached) yes</span><br><span class=\"line\">checking for curses.h... (cached) yes</span><br><span class=\"line\">checking for ncurses.h... (cached) yes</span><br><span class=\"line\">checking for tgetent in -lncurses... (cached) yes</span><br><span class=\"line\">Using ncurses as the termcap library</span><br><span class=\"line\">checking for use_default_colors in -lncurses... (cached) yes</span><br><span class=\"line\">checking for resizeterm in -lncurses... (cached) yes</span><br><span class=\"line\">checking for wresize in -lncurses... (cached) yes</span><br><span class=\"line\">checking for consolechars... (cached) no</span><br><span class=\"line\">checking for setfont... (cached) /usr/bin/setfont</span><br><span class=\"line\">checking for /usr/lib/kbd/consolefonts... (cached) yes</span><br><span class=\"line\">checking for /usr/share/consolefonts... (cached) no</span><br><span class=\"line\">checking for mkfontdir... (cached) /usr/bin/mkfontdir</span><br><span class=\"line\">checking for /usr/lib/X11/fonts/misc... (cached) no</span><br><span class=\"line\">checking for /usr/X11R6/lib/X11/fonts/misc... (cached) no</span><br><span class=\"line\">configure: warning:  </span><br><span class=\"line\"></span><br><span class=\"line\">*** You do not appear to have an X window fonts directory in the standard</span><br><span class=\"line\">*** locations (/usr/lib/X11/fonts/misc or /usr/X11R6/lib/X11/fonts/misc). The</span><br><span class=\"line\">*** mtx.pcf font will not be installed.  This means you will probably not</span><br><span class=\"line\">*** be able to use the mtx fonts in your x terminals, and hence be unable</span><br><span class=\"line\">*** to use the -x command line switch.  Sorry about that...</span><br><span class=\"line\"></span><br><span class=\"line\">creating ./config.status</span><br><span class=\"line\">creating Makefile</span><br><span class=\"line\">creating cmatrix.spec</span><br><span class=\"line\">creating config.h</span><br><span class=\"line\">config.h is unchanged</span><br><span class=\"line\">make[1]: Entering directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\">/bin/sh ./mkinstalldirs /usr/local/bin</span><br><span class=\"line\">  /usr/bin/install -c  cmatrix /usr/local/bin/cmatrix</span><br><span class=\"line\">make  install-man1</span><br><span class=\"line\">make[2]: Entering directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\">/bin/sh ./mkinstalldirs /usr/local/man/man1</span><br><span class=\"line\"> /usr/bin/install -c -m 644 ./cmatrix.1 /usr/local/man/man1/cmatrix.1</span><br><span class=\"line\">make[2]: Leaving directory `/root/cmatrix-1.2a&apos;</span><br><span class=\"line\"> Installing matrix fonts in /usr/lib/kbd/consolefonts...</span><br><span class=\"line\">make[1]: Leaving directory `/root/cmatrix-1.2a&apos;</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cmatrix -b</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/2018112211354044.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmatrix-a :异步滚动（默认）</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-b :随机粗体</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-B :全部粗体</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-o :使用旧风格滚动</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-x :X window 模式</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-V :显示版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-u :刷新频率，0-9，也就是滚动的快慢</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan,</span><br><span class=\"line\">        magenta and black</span><br><span class=\"line\"></span><br><span class=\"line\">例如:使用红色</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix -b -C red</span><br><span class=\"line\"></span><br><span class=\"line\">使用蓝色</span><br><span class=\"line\"></span><br><span class=\"line\">cmatrix -b -C blue</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://blog.51cto.com/5232821/2146115\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/5232821/2146115</a></p>\n<h3>figlet命令</h3>\n<p>生成艺术字<br>\n安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install figlet</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; figlet I MISS YOU</span><br><span class=\"line\"> ___   __  __ ___ ____ ____   __   _____  _   _ </span><br><span class=\"line\">|_ _| |  \\/  |_ _/ ___/ ___|  \\ \\ / / _ \\| | | |</span><br><span class=\"line\"> | |  | |\\/| || |\\___ \\___ \\   \\ V / | | | | | |</span><br><span class=\"line\"> | |  | |  | || | ___) |__) |   | || |_| | |_| |</span><br><span class=\"line\">|___| |_|  |_|___|____/____/    |_| \\___/ \\___/</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://mp.weixin.qq.com/s/HXJ25E1b3J-zcVeI_Q2E7Q\" target=\"_blank\" rel=\"noopener\">微信公众号：Java技术栈</a></p>"},{"title":"Linux命令[系统管理与维护命令]","date":"2018-09-02T12:57:09.000Z","_content":"\n* ls: 列出工作目录所含的文件及子目录,  可以用dir代替ls\n语法:   ***ls [选项] [路径或文件]***\n```[例如]\n-- 注释: 列出mnt目录下的文件及其子目录--\n> ls /mnt\napk-update-service  git-repo-for-redmine  license_capture  lost+found  mysql  newprojects  test\n\n-- 注释: 列出/mnt目录下文件及其子目录的详细信息--\n> ls  -l  /mnt\ntotal 40\ndrwxrwxrwx  2 root root  4096 Jul 22 09:56 apk-update-service\ndrwxr-xr-x  5 root root  4096 Jun 27  2017 git-repo-for-redmine\ndrwxr-xr-x  3 root root  4096 Jul 31  2017 license_capture\ndrwx------  2 root root 16384 Jun  6  2017 lost+found\ndrwxr-xr-x  3 root root  4096 Jun 10  2017 mysql\ndrwxr-xr-x  6 root root  4096 Oct 10  2017 newprojects\ndrwxr-xr-x 10 root root  4096 Nov  6  2017 test\n<!-- more -->\n-- 注释: 显示mnt目录下的所有文件及其目录的详细信息, 并显示文件类型标记--\n> ls -alF /mnt\n ls -alF /mnt \ntotal 48\ndrwxr-xr-x   9 root root  4096 Jul 31  2017 ./\ndr-xr-xr-x. 25 root root  4096 Jun  8 15:30 ../\ndrwxrwxrwx   2 root root  4096 Jul 22 09:56 apk-update-service/\ndrwxr-xr-x   5 root root  4096 Jun 27  2017 git-repo-for-redmine/\ndrwxr-xr-x   3 root root  4096 Jul 31  2017 license_capture/\ndrwx------   2 root root 16384 Jun  6  2017 lost+found/\ndrwxr-xr-x   3 root root  4096 Jun 10  2017 mysql/\ndrwxr-xr-x   6 root root  4096 Oct 10  2017 newprojects/\ndrwxr-xr-x  10 root root  4096 Nov  6  2017 test/\n```\n\n* pwd: 显示当前的工作目录, 即当前所在的工作目录的绝对路径名称\n语法: ***pwd***\n```[例如]\n> pwd\n/root\n```\n\n* cd: 改变当前的工作目录\n语法: cd  [目录名]\n\n```[例如]\n> cd  /mnt\n> pwd\n/mnt\n```\n语法: **cd** 返回根目录中\n语法: **cd - **返回上次调整的目录中\n\n```[例如]\n> pwd    -- 当前目录\n/mnt       \n> cd       -- 跳到根目录\n/root\n> cd -     -- 跳到最近一次跳转的目录中\n/mnt \n```\n* date: 显示或修改系统时间和日期(只有超级用户才能使用date命令修改时间, 一般用户只能用date命令显示时间)\n语法: ***date [选项] '+时间格式'***\n\n```[例如]\n> date '+%y-%m-%d'         \n18-10-08\n```\n语法: ***date '%x' 或  '%X'*** 显示日期/时间\n\n```[显示当前时间]\n> date '+today is %x %X'\ntoday is 10/08/2018 02:21:41 PM\n```\n语法: ***date -s yyyyMMdd HH:mm:ss***或 ***date -s yyyyMMdd*** 或 ***date  -s HH:mm:ss*** 设置系统时间\n\n```[例如]\n> date -s \"20180715 17:25\"\nTue Jul 15 17:25:00 CST 2018\n```\n语法: ***date -d \"num years/months/days ago\" %y-%m-%d***当前时间的前年/月/日的时间\n```[例如]\n> date +%y-%m-%d                 \n18-10-08\n> date -d \"10 days ago\" +%y-%m-%d\n18-09-28\n```\n* clear : 清除屏幕信息\n语法: clear\n\n```[例如]\n> clear\n```\n* man:  显示命令的帮助信息\n语法: ***man [命令名称]***\n```[例如]\n> man  clear\n\nclear(1)                                                              clear(1)\n\nNAME\n       clear - clear the terminal screen\n\nSYNOPSIS\n       clear\n\nDESCRIPTION\n       clear clears your screen if this is possible.  It looks in the environment for the terminal type and then in the terminfo database to figure out how to clear the screen.\n\n       clear ignores any command-line parameters that may be present.\n\nSEE ALSO\n       tput(1), terminfo(5)\n\n       This describes ncurses version 5.7 (patch 20090207).\n\n                                                                      clear(1)\n(END) \n\n```\n\n* who: 显示当前登录到系统的用户\n语法: who\n\n```[例如]\n> who\nroot     pts/0        2018-10-08 13:26 (203.110.178.83)\n-- 注释: 输出格式为\n名称 [状态] 终端 时间 [活动] [进程标识]（主机名）\n    * 名称：用户的登录名。\n    * 状态：表明终端是否对用户都是可写的。\n    * 终端：类似于pts/1、pts/2等，此终端标识在/dev目录中可找到。\n    * 时间：用户登录系统的时间。\n    * 活动：某个用户在自己的终端上最后一次活动发生以来到现在的时间，如果此项是个“.”，就表示一分钟内的终端活动；如果终端保持静止已经超过24小时或自从系统启动以来还没有被使用过，那么此项标记为“old”。\n    * 进程标识：用户登录shell的进程id。\n    * 主机名：登录到Linux系统上的客户端机器标识。\n--\n\n-- 注释: 查看运行级别-- \n> who -r  \n         run-level 3  2017-07-15 15:26\n> who  -w\nroot     + pts/0        2018-10-08 13:26 (203.110.178.83)\n\n>  who -buT\n           system boot  2017-07-15 15:26\nroot     + pts/0        2018-10-08 13:26   .          2887 (203.110.178.83)\n\n```\n* free: 显示内存状态(系统物理内存、虚拟内存、共享内存和系统缓存)\n语法: free [选项] [-s (间隔秒数)]\n```\n> free\n             total       used       free     shared    buffers     cached\nMem:       8061108    7875964     185144     146236     201324     558792\n-/+ buffers/cache:    7115848     945260\nSwap:            0          0          0\n```\n![free参数说明](https://img-blog.csdn.net/20181008150804369?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n * ps: 系统进程瞬间的运行状态, 非常常用, 可通过组合选项(-ef、aux)准确定位系统运行的状态\n 语法: ***ps [选项]***\n![ps参数](https://img-blog.csdn.net/20181008151130846?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n```[例如]\n> ps\n  PID TTY          TIME CMD\n 2887 pts/0    00:00:00 zsh\n24884 pts/0    00:00:00 ps\n\n-- 注释: (输出说明)\npid: 进程的标识符\ntty: 进程所属的终端控制台\ntime: 进程所使用的总的cpu时间\ncmd: 列出正在执行的命令行\n-- \n\n> ps -aux \n> ps -ef \n```\n\n* top: 类型windows中的任务管理器, 能够实时显示进程的资源占用情况, 可以按照cpu使用情况或内存占用情况进行排序\n![top参数](https://img-blog.csdn.net/20181008152506209?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n```[例如]\n> top\ntop - 15:31:25 up 450 days, 4 min,  1 user,  load average: 0.00, 0.00, 0.00\nTasks: 403 total,   1 running, 402 sleeping,   0 stopped,   0 zombie\nCpu(s):  0.9%us,  0.4%sy,  0.0%ni, 98.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:   8061108k total,  7873600k used,   187508k free,   201444k buffers\nSwap:        0k total,        0k used,        0k free,   538576k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                           \n 3687 git       20   0 1460m 760m  11m S  1.0  9.7 509:44.69 bundle                                                                                                                                                             \n15635 gitlab-r  20   0  241m  12m  912 S  1.0  0.2 366:27.19 redis-server \n\n-- 注释: \n> 第一行:  \n15:31:25 当前系统的时间；\nup 450 days 表示系统已启动450天4分钟；\n1 user当前在线的用户数为1人；\nload average:0.00,0.00,0.00表示系统平均负载,3个数分别为1分钟/5分钟/15分钟前到现在的系统平均负载.\n\n> 第二、三行\nTasks：403 total总共有403个进程；\n1 running： 1个运行\n402 sleeping：402个处于休眠状态\n0 stopped：0个停止\n0 zombie：0个僵死\nCpu(s)：0.9% us：表示用戶進程占用CPU的百分比。\n0.1% sy：系统进程占用CPU的百分比。\n0.0% ni：用户进程空间內改变过优先级的进程占用CPU的百分比。\n99.3% id：空闲CPU占用的百分比。\n0.2% wa：等待输入、输出的进程占用CPU的百分比。\n\n> 最后两行\nMem：4059952k total：系統的物理內存大小。\n4009540k used：已經使用的物理內存大小。\n50412k free：目前空余內存大小。\n468964k buffers：用作內核緩沖區的內存大小。\nSwap：8193108k total：交換分區內存大小。\n0k used：已經使用的交換分區大小。\n8193108k free：空閑的交換分區大小。\n2320396k cached：緩存大小。\n\n> 进程信息区\n進程信息區\n\n進程信息區顯示了每個進程的運行狀態，我們先來看一下每列輸出的含義。\n\nPID：进程的id。\nUSER：进程所有者的用户名。\npr：进程优先级。\nNI：nice值。负值表示高优先级，正值表示低优先级。\nVIRT：进程使用的虚拟内存总量，单位KB。VIRT=SWAP+RES。\nRES：进程使用的、未被换出的物理內存大小，单位KB。RES=CODE+DATA，其中，CODE为执行代码占用的物理內存大小，DATA为数据占用的內存大小。\nSHR：共享內存大小，单位KB。\nS：进程状态，D表示不可中断的睡眠状态，R表示运行状态，S表示睡眠状态，T表示跟踪/停止，Z表示僵死进程。\n%CPU：上次更新到现在的CPU时间占用百分比。\n%MEM：进程占用的物理內存百分比。\nTIME+：进程總計使用的CPU时间，单位为1/100秒。\nCOMMAND：正在运行进程的命令名或者命令路经。\n--\n```\n\n* find: 查找文件\n语法: find [路径]  \n\n```[例如]\n-- 注释: 查找大于100M的文件, 但是这样无法看文件的大小/属性等 --\n> find . -type f -size +100M\n./Downloads/root@cq.hbjk.com.cn\n./Downloads/jdk-8u131-linux-x64.rpm\n\n-- 注释: 查找大于100M的文件, 可以看到文件的大小/属性 --\n>  find . -type f -size +100M -print0 | xargs -0 ls -l\n-rw-r--r-- 1 root root 169983496 Mar 16  2017 ./Downloads/jdk-8u131-linux-x64.rpm\n-rw-r--r-- 1 root root 169983496 Oct 18  2017 ./Downloads/root@cq.hbjk.com.cn\n\n-- 注释: 查找大于100M的文件, 只看大小 --\n> find . -type f -size +100M  -print0 | xargs -0 du -h\n163M\t./Downloads/root@cq.hbjk.com.cn\n163M\t./Downloads/jdk-8u131-linux-x64.rpm\n\n-- 注释: 查找大于100M的文件, 只看大小,  并排序 --\n> find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr\n163M\t./Downloads/root@cq.hbjk.com.cn\n163M\t./Downloads/jdk-8u131-linux-x64.rpm\n\n```\n\n* du: 查看当前指定文件或目录(会递归显示子目录)占用磁盘空间大小\n\n```[例如]\n-- 注释: 查询depth为1的所有文件, 并显示文件大小--\n> du -h --max-depth=1\n69M\t./.m2\n60K\t./.cache\n1.4G\t./Downloads\n12K\t./.oracle_jre_usage\n8.0K\t./.pki\n170M\t./.nvm\n208M\t./.npm\n3.6M\t./.gem\n8.0K\t./.pip\n112K\t./tmp\n28M\t./.bundle\n56K\t./.java\n276K\t./.ssh\n4.9M\t./.oh-my-zsh\n296K\t./.vue-templates\n1.9G\t.\n\n-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 并排序 --\n> du -hm --max-depth=1 | sort -n\n1\t./.cache\n1\t./.java\n1\t./.oracle_jre_usage\n1\t./.pip\n1\t./.pki\n1\t./.ssh\n1\t./tmp\n1\t./.vue-templates\n4\t./.gem\n5\t./.oh-my-zsh\n28\t./.bundle\n69\t./.m2\n170\t./.nvm\n208\t./.npm\n1400\t./Downloads\n1883\t.\n\n-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 排序, 取前12个--\n>du -hm --max-depth=2 | sort -nr | head -12\n1883\t.\n1400\t./Downloads\n383\t./Downloads/ruby-2.3.3\n377\t./Downloads/ruby-2.4.1\n208\t./.npm\n170\t./.nvm\n167\t./.nvm/versions\n73\t./Downloads/redis-4.0.1\n69\t./.m2/repository\n69\t./.m2\n47\t./Downloads/zookeeper-3.4.9\n45\t./Downloads/kafka_2.11-0.11.0.0\n\n\n```\n\n","source":"_posts/Linux命令[系统管理与维护命令].md","raw":"---\ntitle: Linux命令[系统管理与维护命令]\ncategories: Linux\ntags: linux\ndate: 2018-09-02 20:57:09\n---\n\n* ls: 列出工作目录所含的文件及子目录,  可以用dir代替ls\n语法:   ***ls [选项] [路径或文件]***\n```[例如]\n-- 注释: 列出mnt目录下的文件及其子目录--\n> ls /mnt\napk-update-service  git-repo-for-redmine  license_capture  lost+found  mysql  newprojects  test\n\n-- 注释: 列出/mnt目录下文件及其子目录的详细信息--\n> ls  -l  /mnt\ntotal 40\ndrwxrwxrwx  2 root root  4096 Jul 22 09:56 apk-update-service\ndrwxr-xr-x  5 root root  4096 Jun 27  2017 git-repo-for-redmine\ndrwxr-xr-x  3 root root  4096 Jul 31  2017 license_capture\ndrwx------  2 root root 16384 Jun  6  2017 lost+found\ndrwxr-xr-x  3 root root  4096 Jun 10  2017 mysql\ndrwxr-xr-x  6 root root  4096 Oct 10  2017 newprojects\ndrwxr-xr-x 10 root root  4096 Nov  6  2017 test\n<!-- more -->\n-- 注释: 显示mnt目录下的所有文件及其目录的详细信息, 并显示文件类型标记--\n> ls -alF /mnt\n ls -alF /mnt \ntotal 48\ndrwxr-xr-x   9 root root  4096 Jul 31  2017 ./\ndr-xr-xr-x. 25 root root  4096 Jun  8 15:30 ../\ndrwxrwxrwx   2 root root  4096 Jul 22 09:56 apk-update-service/\ndrwxr-xr-x   5 root root  4096 Jun 27  2017 git-repo-for-redmine/\ndrwxr-xr-x   3 root root  4096 Jul 31  2017 license_capture/\ndrwx------   2 root root 16384 Jun  6  2017 lost+found/\ndrwxr-xr-x   3 root root  4096 Jun 10  2017 mysql/\ndrwxr-xr-x   6 root root  4096 Oct 10  2017 newprojects/\ndrwxr-xr-x  10 root root  4096 Nov  6  2017 test/\n```\n\n* pwd: 显示当前的工作目录, 即当前所在的工作目录的绝对路径名称\n语法: ***pwd***\n```[例如]\n> pwd\n/root\n```\n\n* cd: 改变当前的工作目录\n语法: cd  [目录名]\n\n```[例如]\n> cd  /mnt\n> pwd\n/mnt\n```\n语法: **cd** 返回根目录中\n语法: **cd - **返回上次调整的目录中\n\n```[例如]\n> pwd    -- 当前目录\n/mnt       \n> cd       -- 跳到根目录\n/root\n> cd -     -- 跳到最近一次跳转的目录中\n/mnt \n```\n* date: 显示或修改系统时间和日期(只有超级用户才能使用date命令修改时间, 一般用户只能用date命令显示时间)\n语法: ***date [选项] '+时间格式'***\n\n```[例如]\n> date '+%y-%m-%d'         \n18-10-08\n```\n语法: ***date '%x' 或  '%X'*** 显示日期/时间\n\n```[显示当前时间]\n> date '+today is %x %X'\ntoday is 10/08/2018 02:21:41 PM\n```\n语法: ***date -s yyyyMMdd HH:mm:ss***或 ***date -s yyyyMMdd*** 或 ***date  -s HH:mm:ss*** 设置系统时间\n\n```[例如]\n> date -s \"20180715 17:25\"\nTue Jul 15 17:25:00 CST 2018\n```\n语法: ***date -d \"num years/months/days ago\" %y-%m-%d***当前时间的前年/月/日的时间\n```[例如]\n> date +%y-%m-%d                 \n18-10-08\n> date -d \"10 days ago\" +%y-%m-%d\n18-09-28\n```\n* clear : 清除屏幕信息\n语法: clear\n\n```[例如]\n> clear\n```\n* man:  显示命令的帮助信息\n语法: ***man [命令名称]***\n```[例如]\n> man  clear\n\nclear(1)                                                              clear(1)\n\nNAME\n       clear - clear the terminal screen\n\nSYNOPSIS\n       clear\n\nDESCRIPTION\n       clear clears your screen if this is possible.  It looks in the environment for the terminal type and then in the terminfo database to figure out how to clear the screen.\n\n       clear ignores any command-line parameters that may be present.\n\nSEE ALSO\n       tput(1), terminfo(5)\n\n       This describes ncurses version 5.7 (patch 20090207).\n\n                                                                      clear(1)\n(END) \n\n```\n\n* who: 显示当前登录到系统的用户\n语法: who\n\n```[例如]\n> who\nroot     pts/0        2018-10-08 13:26 (203.110.178.83)\n-- 注释: 输出格式为\n名称 [状态] 终端 时间 [活动] [进程标识]（主机名）\n    * 名称：用户的登录名。\n    * 状态：表明终端是否对用户都是可写的。\n    * 终端：类似于pts/1、pts/2等，此终端标识在/dev目录中可找到。\n    * 时间：用户登录系统的时间。\n    * 活动：某个用户在自己的终端上最后一次活动发生以来到现在的时间，如果此项是个“.”，就表示一分钟内的终端活动；如果终端保持静止已经超过24小时或自从系统启动以来还没有被使用过，那么此项标记为“old”。\n    * 进程标识：用户登录shell的进程id。\n    * 主机名：登录到Linux系统上的客户端机器标识。\n--\n\n-- 注释: 查看运行级别-- \n> who -r  \n         run-level 3  2017-07-15 15:26\n> who  -w\nroot     + pts/0        2018-10-08 13:26 (203.110.178.83)\n\n>  who -buT\n           system boot  2017-07-15 15:26\nroot     + pts/0        2018-10-08 13:26   .          2887 (203.110.178.83)\n\n```\n* free: 显示内存状态(系统物理内存、虚拟内存、共享内存和系统缓存)\n语法: free [选项] [-s (间隔秒数)]\n```\n> free\n             total       used       free     shared    buffers     cached\nMem:       8061108    7875964     185144     146236     201324     558792\n-/+ buffers/cache:    7115848     945260\nSwap:            0          0          0\n```\n![free参数说明](https://img-blog.csdn.net/20181008150804369?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n * ps: 系统进程瞬间的运行状态, 非常常用, 可通过组合选项(-ef、aux)准确定位系统运行的状态\n 语法: ***ps [选项]***\n![ps参数](https://img-blog.csdn.net/20181008151130846?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n```[例如]\n> ps\n  PID TTY          TIME CMD\n 2887 pts/0    00:00:00 zsh\n24884 pts/0    00:00:00 ps\n\n-- 注释: (输出说明)\npid: 进程的标识符\ntty: 进程所属的终端控制台\ntime: 进程所使用的总的cpu时间\ncmd: 列出正在执行的命令行\n-- \n\n> ps -aux \n> ps -ef \n```\n\n* top: 类型windows中的任务管理器, 能够实时显示进程的资源占用情况, 可以按照cpu使用情况或内存占用情况进行排序\n![top参数](https://img-blog.csdn.net/20181008152506209?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n```[例如]\n> top\ntop - 15:31:25 up 450 days, 4 min,  1 user,  load average: 0.00, 0.00, 0.00\nTasks: 403 total,   1 running, 402 sleeping,   0 stopped,   0 zombie\nCpu(s):  0.9%us,  0.4%sy,  0.0%ni, 98.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:   8061108k total,  7873600k used,   187508k free,   201444k buffers\nSwap:        0k total,        0k used,        0k free,   538576k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                           \n 3687 git       20   0 1460m 760m  11m S  1.0  9.7 509:44.69 bundle                                                                                                                                                             \n15635 gitlab-r  20   0  241m  12m  912 S  1.0  0.2 366:27.19 redis-server \n\n-- 注释: \n> 第一行:  \n15:31:25 当前系统的时间；\nup 450 days 表示系统已启动450天4分钟；\n1 user当前在线的用户数为1人；\nload average:0.00,0.00,0.00表示系统平均负载,3个数分别为1分钟/5分钟/15分钟前到现在的系统平均负载.\n\n> 第二、三行\nTasks：403 total总共有403个进程；\n1 running： 1个运行\n402 sleeping：402个处于休眠状态\n0 stopped：0个停止\n0 zombie：0个僵死\nCpu(s)：0.9% us：表示用戶進程占用CPU的百分比。\n0.1% sy：系统进程占用CPU的百分比。\n0.0% ni：用户进程空间內改变过优先级的进程占用CPU的百分比。\n99.3% id：空闲CPU占用的百分比。\n0.2% wa：等待输入、输出的进程占用CPU的百分比。\n\n> 最后两行\nMem：4059952k total：系統的物理內存大小。\n4009540k used：已經使用的物理內存大小。\n50412k free：目前空余內存大小。\n468964k buffers：用作內核緩沖區的內存大小。\nSwap：8193108k total：交換分區內存大小。\n0k used：已經使用的交換分區大小。\n8193108k free：空閑的交換分區大小。\n2320396k cached：緩存大小。\n\n> 进程信息区\n進程信息區\n\n進程信息區顯示了每個進程的運行狀態，我們先來看一下每列輸出的含義。\n\nPID：进程的id。\nUSER：进程所有者的用户名。\npr：进程优先级。\nNI：nice值。负值表示高优先级，正值表示低优先级。\nVIRT：进程使用的虚拟内存总量，单位KB。VIRT=SWAP+RES。\nRES：进程使用的、未被换出的物理內存大小，单位KB。RES=CODE+DATA，其中，CODE为执行代码占用的物理內存大小，DATA为数据占用的內存大小。\nSHR：共享內存大小，单位KB。\nS：进程状态，D表示不可中断的睡眠状态，R表示运行状态，S表示睡眠状态，T表示跟踪/停止，Z表示僵死进程。\n%CPU：上次更新到现在的CPU时间占用百分比。\n%MEM：进程占用的物理內存百分比。\nTIME+：进程總計使用的CPU时间，单位为1/100秒。\nCOMMAND：正在运行进程的命令名或者命令路经。\n--\n```\n\n* find: 查找文件\n语法: find [路径]  \n\n```[例如]\n-- 注释: 查找大于100M的文件, 但是这样无法看文件的大小/属性等 --\n> find . -type f -size +100M\n./Downloads/root@cq.hbjk.com.cn\n./Downloads/jdk-8u131-linux-x64.rpm\n\n-- 注释: 查找大于100M的文件, 可以看到文件的大小/属性 --\n>  find . -type f -size +100M -print0 | xargs -0 ls -l\n-rw-r--r-- 1 root root 169983496 Mar 16  2017 ./Downloads/jdk-8u131-linux-x64.rpm\n-rw-r--r-- 1 root root 169983496 Oct 18  2017 ./Downloads/root@cq.hbjk.com.cn\n\n-- 注释: 查找大于100M的文件, 只看大小 --\n> find . -type f -size +100M  -print0 | xargs -0 du -h\n163M\t./Downloads/root@cq.hbjk.com.cn\n163M\t./Downloads/jdk-8u131-linux-x64.rpm\n\n-- 注释: 查找大于100M的文件, 只看大小,  并排序 --\n> find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr\n163M\t./Downloads/root@cq.hbjk.com.cn\n163M\t./Downloads/jdk-8u131-linux-x64.rpm\n\n```\n\n* du: 查看当前指定文件或目录(会递归显示子目录)占用磁盘空间大小\n\n```[例如]\n-- 注释: 查询depth为1的所有文件, 并显示文件大小--\n> du -h --max-depth=1\n69M\t./.m2\n60K\t./.cache\n1.4G\t./Downloads\n12K\t./.oracle_jre_usage\n8.0K\t./.pki\n170M\t./.nvm\n208M\t./.npm\n3.6M\t./.gem\n8.0K\t./.pip\n112K\t./tmp\n28M\t./.bundle\n56K\t./.java\n276K\t./.ssh\n4.9M\t./.oh-my-zsh\n296K\t./.vue-templates\n1.9G\t.\n\n-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 并排序 --\n> du -hm --max-depth=1 | sort -n\n1\t./.cache\n1\t./.java\n1\t./.oracle_jre_usage\n1\t./.pip\n1\t./.pki\n1\t./.ssh\n1\t./tmp\n1\t./.vue-templates\n4\t./.gem\n5\t./.oh-my-zsh\n28\t./.bundle\n69\t./.m2\n170\t./.nvm\n208\t./.npm\n1400\t./Downloads\n1883\t.\n\n-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 排序, 取前12个--\n>du -hm --max-depth=2 | sort -nr | head -12\n1883\t.\n1400\t./Downloads\n383\t./Downloads/ruby-2.3.3\n377\t./Downloads/ruby-2.4.1\n208\t./.npm\n170\t./.nvm\n167\t./.nvm/versions\n73\t./Downloads/redis-4.0.1\n69\t./.m2/repository\n69\t./.m2\n47\t./Downloads/zookeeper-3.4.9\n45\t./Downloads/kafka_2.11-0.11.0.0\n\n\n```\n\n","slug":"Linux命令[系统管理与维护命令]","published":1,"updated":"2019-04-20T12:33:33.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xt6001vvq6buug06w72","content":"<ul>\n<li>ls: 列出工作目录所含的文件及子目录,  可以用dir代替ls<br>\n语法:   <strong><em>ls [选项] [路径或文件]</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 列出mnt目录下的文件及其子目录--</span><br><span class=\"line\">&gt; ls /mnt</span><br><span class=\"line\">apk-update-service  git-repo-for-redmine  license_capture  lost+found  mysql  newprojects  test</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 列出/mnt目录下文件及其子目录的详细信息--</span><br><span class=\"line\">&gt; ls  -l  /mnt</span><br><span class=\"line\">total 40</span><br><span class=\"line\">drwxrwxrwx  2 root root  4096 Jul 22 09:56 apk-update-service</span><br><span class=\"line\">drwxr-xr-x  5 root root  4096 Jun 27  2017 git-repo-for-redmine</span><br><span class=\"line\">drwxr-xr-x  3 root root  4096 Jul 31  2017 license_capture</span><br><span class=\"line\">drwx------  2 root root 16384 Jun  6  2017 lost+found</span><br><span class=\"line\">drwxr-xr-x  3 root root  4096 Jun 10  2017 mysql</span><br><span class=\"line\">drwxr-xr-x  6 root root  4096 Oct 10  2017 newprojects</span><br><span class=\"line\">drwxr-xr-x 10 root root  4096 Nov  6  2017 test</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">-- 注释: 显示mnt目录下的所有文件及其目录的详细信息, 并显示文件类型标记--</span><br><span class=\"line\">&gt; ls -alF /mnt</span><br><span class=\"line\"> ls -alF /mnt </span><br><span class=\"line\">total 48</span><br><span class=\"line\">drwxr-xr-x   9 root root  4096 Jul 31  2017 ./</span><br><span class=\"line\">dr-xr-xr-x. 25 root root  4096 Jun  8 15:30 ../</span><br><span class=\"line\">drwxrwxrwx   2 root root  4096 Jul 22 09:56 apk-update-service/</span><br><span class=\"line\">drwxr-xr-x   5 root root  4096 Jun 27  2017 git-repo-for-redmine/</span><br><span class=\"line\">drwxr-xr-x   3 root root  4096 Jul 31  2017 license_capture/</span><br><span class=\"line\">drwx------   2 root root 16384 Jun  6  2017 lost+found/</span><br><span class=\"line\">drwxr-xr-x   3 root root  4096 Jun 10  2017 mysql/</span><br><span class=\"line\">drwxr-xr-x   6 root root  4096 Oct 10  2017 newprojects/</span><br><span class=\"line\">drwxr-xr-x  10 root root  4096 Nov  6  2017 test/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pwd: 显示当前的工作目录, 即当前所在的工作目录的绝对路径名称<br>\n语法: <strong><em>pwd</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd: 改变当前的工作目录<br>\n语法: cd  [目录名]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd  /mnt</span><br><span class=\"line\">&gt; pwd</span><br><span class=\"line\">/mnt</span><br></pre></td></tr></table></figure>\n<p>语法: <strong>cd</strong> 返回根目录中<br>\n语法: **cd - **返回上次调整的目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pwd    -- 当前目录</span><br><span class=\"line\">/mnt       </span><br><span class=\"line\">&gt; cd       -- 跳到根目录</span><br><span class=\"line\">/root</span><br><span class=\"line\">&gt; cd -     -- 跳到最近一次跳转的目录中</span><br><span class=\"line\">/mnt</span><br></pre></td></tr></table></figure>\n<ul>\n<li>date: 显示或修改系统时间和日期(只有超级用户才能使用date命令修改时间, 一般用户只能用date命令显示时间)<br>\n语法: <strong><em>date [选项] '+时间格式’</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date &apos;+%y-%m-%d&apos;         </span><br><span class=\"line\">18-10-08</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date ‘%x’ 或  '%X’</em></strong> 显示日期/时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date &apos;+today is %x %X&apos;</span><br><span class=\"line\">today is 10/08/2018 02:21:41 PM</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date -s yyyyMMdd HH:mm:ss</em></strong>或 <strong><em>date -s yyyyMMdd</em></strong> 或 <strong><em>date  -s HH:mm:ss</em></strong> 设置系统时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date -s &quot;20180715 17:25&quot;</span><br><span class=\"line\">Tue Jul 15 17:25:00 CST 2018</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date -d “num years/months/days ago” %y-%m-%d</em></strong>当前时间的前年/月/日的时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date +%y-%m-%d                 </span><br><span class=\"line\">18-10-08</span><br><span class=\"line\">&gt; date -d &quot;10 days ago&quot; +%y-%m-%d</span><br><span class=\"line\">18-09-28</span><br></pre></td></tr></table></figure>\n<ul>\n<li>clear : 清除屏幕信息<br>\n语法: clear</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; clear</span><br></pre></td></tr></table></figure>\n<ul>\n<li>man:  显示命令的帮助信息<br>\n语法: <strong><em>man [命令名称]</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; man  clear</span><br><span class=\"line\"></span><br><span class=\"line\">clear(1)                                                              clear(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">       clear - clear the terminal screen</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">       clear</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">       clear clears your screen if this is possible.  It looks in the environment for the terminal type and then in the terminfo database to figure out how to clear the screen.</span><br><span class=\"line\"></span><br><span class=\"line\">       clear ignores any command-line parameters that may be present.</span><br><span class=\"line\"></span><br><span class=\"line\">SEE ALSO</span><br><span class=\"line\">       tput(1), terminfo(5)</span><br><span class=\"line\"></span><br><span class=\"line\">       This describes ncurses version 5.7 (patch 20090207).</span><br><span class=\"line\"></span><br><span class=\"line\">                                                                      clear(1)</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>who: 显示当前登录到系统的用户<br>\n语法: who</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who</span><br><span class=\"line\">root     pts/0        2018-10-08 13:26 (203.110.178.83)</span><br><span class=\"line\">-- 注释: 输出格式为</span><br><span class=\"line\">名称 [状态] 终端 时间 [活动] [进程标识]（主机名）</span><br><span class=\"line\">    * 名称：用户的登录名。</span><br><span class=\"line\">    * 状态：表明终端是否对用户都是可写的。</span><br><span class=\"line\">    * 终端：类似于pts/1、pts/2等，此终端标识在/dev目录中可找到。</span><br><span class=\"line\">    * 时间：用户登录系统的时间。</span><br><span class=\"line\">    * 活动：某个用户在自己的终端上最后一次活动发生以来到现在的时间，如果此项是个“.”，就表示一分钟内的终端活动；如果终端保持静止已经超过24小时或自从系统启动以来还没有被使用过，那么此项标记为“old”。</span><br><span class=\"line\">    * 进程标识：用户登录shell的进程id。</span><br><span class=\"line\">    * 主机名：登录到Linux系统上的客户端机器标识。</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查看运行级别-- </span><br><span class=\"line\">&gt; who -r  </span><br><span class=\"line\">         run-level 3  2017-07-15 15:26</span><br><span class=\"line\">&gt; who  -w</span><br><span class=\"line\">root     + pts/0        2018-10-08 13:26 (203.110.178.83)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  who -buT</span><br><span class=\"line\">           system boot  2017-07-15 15:26</span><br><span class=\"line\">root     + pts/0        2018-10-08 13:26   .          2887 (203.110.178.83)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>free: 显示内存状态(系统物理内存、虚拟内存、共享内存和系统缓存)<br>\n语法: free [选项] [-s (间隔秒数)]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; free</span><br><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:       8061108    7875964     185144     146236     201324     558792</span><br><span class=\"line\">-/+ buffers/cache:    7115848     945260</span><br><span class=\"line\">Swap:            0          0          0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdn.net/20181008150804369?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"free参数说明\"></p>\n<ul>\n<li>ps: 系统进程瞬间的运行状态, 非常常用, 可通过组合选项(-ef、aux)准确定位系统运行的状态<br>\n语法: <strong><em>ps [选项]</em></strong><br>\n<img src=\"https://img-blog.csdn.net/20181008151130846?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"ps参数\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ps</span><br><span class=\"line\">  PID TTY          TIME CMD</span><br><span class=\"line\"> 2887 pts/0    00:00:00 zsh</span><br><span class=\"line\">24884 pts/0    00:00:00 ps</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: (输出说明)</span><br><span class=\"line\">pid: 进程的标识符</span><br><span class=\"line\">tty: 进程所属的终端控制台</span><br><span class=\"line\">time: 进程所使用的总的cpu时间</span><br><span class=\"line\">cmd: 列出正在执行的命令行</span><br><span class=\"line\">-- </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ps -aux </span><br><span class=\"line\">&gt; ps -ef</span><br></pre></td></tr></table></figure>\n<ul>\n<li>top: 类型windows中的任务管理器, 能够实时显示进程的资源占用情况, 可以按照cpu使用情况或内存占用情况进行排序<br>\n<img src=\"https://img-blog.csdn.net/20181008152506209?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"top参数\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; top</span><br><span class=\"line\">top - 15:31:25 up 450 days, 4 min,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class=\"line\">Tasks: 403 total,   1 running, 402 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">Cpu(s):  0.9%us,  0.4%sy,  0.0%ni, 98.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class=\"line\">Mem:   8061108k total,  7873600k used,   187508k free,   201444k buffers</span><br><span class=\"line\">Swap:        0k total,        0k used,        0k free,   538576k cached</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                           </span><br><span class=\"line\"> 3687 git       20   0 1460m 760m  11m S  1.0  9.7 509:44.69 bundle                                                                                                                                                             </span><br><span class=\"line\">15635 gitlab-r  20   0  241m  12m  912 S  1.0  0.2 366:27.19 redis-server </span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: </span><br><span class=\"line\">&gt; 第一行:  </span><br><span class=\"line\">15:31:25 当前系统的时间；</span><br><span class=\"line\">up 450 days 表示系统已启动450天4分钟；</span><br><span class=\"line\">1 user当前在线的用户数为1人；</span><br><span class=\"line\">load average:0.00,0.00,0.00表示系统平均负载,3个数分别为1分钟/5分钟/15分钟前到现在的系统平均负载.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 第二、三行</span><br><span class=\"line\">Tasks：403 total总共有403个进程；</span><br><span class=\"line\">1 running： 1个运行</span><br><span class=\"line\">402 sleeping：402个处于休眠状态</span><br><span class=\"line\">0 stopped：0个停止</span><br><span class=\"line\">0 zombie：0个僵死</span><br><span class=\"line\">Cpu(s)：0.9% us：表示用戶進程占用CPU的百分比。</span><br><span class=\"line\">0.1% sy：系统进程占用CPU的百分比。</span><br><span class=\"line\">0.0% ni：用户进程空间內改变过优先级的进程占用CPU的百分比。</span><br><span class=\"line\">99.3% id：空闲CPU占用的百分比。</span><br><span class=\"line\">0.2% wa：等待输入、输出的进程占用CPU的百分比。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 最后两行</span><br><span class=\"line\">Mem：4059952k total：系統的物理內存大小。</span><br><span class=\"line\">4009540k used：已經使用的物理內存大小。</span><br><span class=\"line\">50412k free：目前空余內存大小。</span><br><span class=\"line\">468964k buffers：用作內核緩沖區的內存大小。</span><br><span class=\"line\">Swap：8193108k total：交換分區內存大小。</span><br><span class=\"line\">0k used：已經使用的交換分區大小。</span><br><span class=\"line\">8193108k free：空閑的交換分區大小。</span><br><span class=\"line\">2320396k cached：緩存大小。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 进程信息区</span><br><span class=\"line\">進程信息區</span><br><span class=\"line\"></span><br><span class=\"line\">進程信息區顯示了每個進程的運行狀態，我們先來看一下每列輸出的含義。</span><br><span class=\"line\"></span><br><span class=\"line\">PID：进程的id。</span><br><span class=\"line\">USER：进程所有者的用户名。</span><br><span class=\"line\">pr：进程优先级。</span><br><span class=\"line\">NI：nice值。负值表示高优先级，正值表示低优先级。</span><br><span class=\"line\">VIRT：进程使用的虚拟内存总量，单位KB。VIRT=SWAP+RES。</span><br><span class=\"line\">RES：进程使用的、未被换出的物理內存大小，单位KB。RES=CODE+DATA，其中，CODE为执行代码占用的物理內存大小，DATA为数据占用的內存大小。</span><br><span class=\"line\">SHR：共享內存大小，单位KB。</span><br><span class=\"line\">S：进程状态，D表示不可中断的睡眠状态，R表示运行状态，S表示睡眠状态，T表示跟踪/停止，Z表示僵死进程。</span><br><span class=\"line\">%CPU：上次更新到现在的CPU时间占用百分比。</span><br><span class=\"line\">%MEM：进程占用的物理內存百分比。</span><br><span class=\"line\">TIME+：进程總計使用的CPU时间，单位为1/100秒。</span><br><span class=\"line\">COMMAND：正在运行进程的命令名或者命令路经。</span><br><span class=\"line\">--</span><br></pre></td></tr></table></figure>\n<ul>\n<li>find: 查找文件<br>\n语法: find [路径]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 查找大于100M的文件, 但是这样无法看文件的大小/属性等 --</span><br><span class=\"line\">&gt; find . -type f -size +100M</span><br><span class=\"line\">./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 可以看到文件的大小/属性 --</span><br><span class=\"line\">&gt;  find . -type f -size +100M -print0 | xargs -0 ls -l</span><br><span class=\"line\">-rw-r--r-- 1 root root 169983496 Mar 16  2017 ./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\">-rw-r--r-- 1 root root 169983496 Oct 18  2017 ./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 只看大小 --</span><br><span class=\"line\">&gt; find . -type f -size +100M  -print0 | xargs -0 du -h</span><br><span class=\"line\">163M\t./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">163M\t./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 只看大小,  并排序 --</span><br><span class=\"line\">&gt; find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr</span><br><span class=\"line\">163M\t./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">163M\t./Downloads/jdk-8u131-linux-x64.rpm</span><br></pre></td></tr></table></figure>\n<ul>\n<li>du: 查看当前指定文件或目录(会递归显示子目录)占用磁盘空间大小</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并显示文件大小--</span><br><span class=\"line\">&gt; du -h --max-depth=1</span><br><span class=\"line\">69M\t./.m2</span><br><span class=\"line\">60K\t./.cache</span><br><span class=\"line\">1.4G\t./Downloads</span><br><span class=\"line\">12K\t./.oracle_jre_usage</span><br><span class=\"line\">8.0K\t./.pki</span><br><span class=\"line\">170M\t./.nvm</span><br><span class=\"line\">208M\t./.npm</span><br><span class=\"line\">3.6M\t./.gem</span><br><span class=\"line\">8.0K\t./.pip</span><br><span class=\"line\">112K\t./tmp</span><br><span class=\"line\">28M\t./.bundle</span><br><span class=\"line\">56K\t./.java</span><br><span class=\"line\">276K\t./.ssh</span><br><span class=\"line\">4.9M\t./.oh-my-zsh</span><br><span class=\"line\">296K\t./.vue-templates</span><br><span class=\"line\">1.9G\t.</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 并排序 --</span><br><span class=\"line\">&gt; du -hm --max-depth=1 | sort -n</span><br><span class=\"line\">1\t./.cache</span><br><span class=\"line\">1\t./.java</span><br><span class=\"line\">1\t./.oracle_jre_usage</span><br><span class=\"line\">1\t./.pip</span><br><span class=\"line\">1\t./.pki</span><br><span class=\"line\">1\t./.ssh</span><br><span class=\"line\">1\t./tmp</span><br><span class=\"line\">1\t./.vue-templates</span><br><span class=\"line\">4\t./.gem</span><br><span class=\"line\">5\t./.oh-my-zsh</span><br><span class=\"line\">28\t./.bundle</span><br><span class=\"line\">69\t./.m2</span><br><span class=\"line\">170\t./.nvm</span><br><span class=\"line\">208\t./.npm</span><br><span class=\"line\">1400\t./Downloads</span><br><span class=\"line\">1883\t.</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 排序, 取前12个--</span><br><span class=\"line\">&gt;du -hm --max-depth=2 | sort -nr | head -12</span><br><span class=\"line\">1883\t.</span><br><span class=\"line\">1400\t./Downloads</span><br><span class=\"line\">383\t./Downloads/ruby-2.3.3</span><br><span class=\"line\">377\t./Downloads/ruby-2.4.1</span><br><span class=\"line\">208\t./.npm</span><br><span class=\"line\">170\t./.nvm</span><br><span class=\"line\">167\t./.nvm/versions</span><br><span class=\"line\">73\t./Downloads/redis-4.0.1</span><br><span class=\"line\">69\t./.m2/repository</span><br><span class=\"line\">69\t./.m2</span><br><span class=\"line\">47\t./Downloads/zookeeper-3.4.9</span><br><span class=\"line\">45\t./Downloads/kafka_2.11-0.11.0.0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>ls: 列出工作目录所含的文件及子目录,  可以用dir代替ls<br>\n语法:   <strong><em>ls [选项] [路径或文件]</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 列出mnt目录下的文件及其子目录--</span><br><span class=\"line\">&gt; ls /mnt</span><br><span class=\"line\">apk-update-service  git-repo-for-redmine  license_capture  lost+found  mysql  newprojects  test</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 列出/mnt目录下文件及其子目录的详细信息--</span><br><span class=\"line\">&gt; ls  -l  /mnt</span><br><span class=\"line\">total 40</span><br><span class=\"line\">drwxrwxrwx  2 root root  4096 Jul 22 09:56 apk-update-service</span><br><span class=\"line\">drwxr-xr-x  5 root root  4096 Jun 27  2017 git-repo-for-redmine</span><br><span class=\"line\">drwxr-xr-x  3 root root  4096 Jul 31  2017 license_capture</span><br><span class=\"line\">drwx------  2 root root 16384 Jun  6  2017 lost+found</span><br><span class=\"line\">drwxr-xr-x  3 root root  4096 Jun 10  2017 mysql</span><br><span class=\"line\">drwxr-xr-x  6 root root  4096 Oct 10  2017 newprojects</span><br><span class=\"line\">drwxr-xr-x 10 root root  4096 Nov  6  2017 test</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">-- 注释: 显示mnt目录下的所有文件及其目录的详细信息, 并显示文件类型标记--</span><br><span class=\"line\">&gt; ls -alF /mnt</span><br><span class=\"line\"> ls -alF /mnt </span><br><span class=\"line\">total 48</span><br><span class=\"line\">drwxr-xr-x   9 root root  4096 Jul 31  2017 ./</span><br><span class=\"line\">dr-xr-xr-x. 25 root root  4096 Jun  8 15:30 ../</span><br><span class=\"line\">drwxrwxrwx   2 root root  4096 Jul 22 09:56 apk-update-service/</span><br><span class=\"line\">drwxr-xr-x   5 root root  4096 Jun 27  2017 git-repo-for-redmine/</span><br><span class=\"line\">drwxr-xr-x   3 root root  4096 Jul 31  2017 license_capture/</span><br><span class=\"line\">drwx------   2 root root 16384 Jun  6  2017 lost+found/</span><br><span class=\"line\">drwxr-xr-x   3 root root  4096 Jun 10  2017 mysql/</span><br><span class=\"line\">drwxr-xr-x   6 root root  4096 Oct 10  2017 newprojects/</span><br><span class=\"line\">drwxr-xr-x  10 root root  4096 Nov  6  2017 test/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pwd: 显示当前的工作目录, 即当前所在的工作目录的绝对路径名称<br>\n语法: <strong><em>pwd</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd: 改变当前的工作目录<br>\n语法: cd  [目录名]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd  /mnt</span><br><span class=\"line\">&gt; pwd</span><br><span class=\"line\">/mnt</span><br></pre></td></tr></table></figure>\n<p>语法: <strong>cd</strong> 返回根目录中<br>\n语法: **cd - **返回上次调整的目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pwd    -- 当前目录</span><br><span class=\"line\">/mnt       </span><br><span class=\"line\">&gt; cd       -- 跳到根目录</span><br><span class=\"line\">/root</span><br><span class=\"line\">&gt; cd -     -- 跳到最近一次跳转的目录中</span><br><span class=\"line\">/mnt</span><br></pre></td></tr></table></figure>\n<ul>\n<li>date: 显示或修改系统时间和日期(只有超级用户才能使用date命令修改时间, 一般用户只能用date命令显示时间)<br>\n语法: <strong><em>date [选项] '+时间格式’</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date &apos;+%y-%m-%d&apos;         </span><br><span class=\"line\">18-10-08</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date ‘%x’ 或  '%X’</em></strong> 显示日期/时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date &apos;+today is %x %X&apos;</span><br><span class=\"line\">today is 10/08/2018 02:21:41 PM</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date -s yyyyMMdd HH:mm:ss</em></strong>或 <strong><em>date -s yyyyMMdd</em></strong> 或 <strong><em>date  -s HH:mm:ss</em></strong> 设置系统时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date -s &quot;20180715 17:25&quot;</span><br><span class=\"line\">Tue Jul 15 17:25:00 CST 2018</span><br></pre></td></tr></table></figure>\n<p>语法: <strong><em>date -d “num years/months/days ago” %y-%m-%d</em></strong>当前时间的前年/月/日的时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date +%y-%m-%d                 </span><br><span class=\"line\">18-10-08</span><br><span class=\"line\">&gt; date -d &quot;10 days ago&quot; +%y-%m-%d</span><br><span class=\"line\">18-09-28</span><br></pre></td></tr></table></figure>\n<ul>\n<li>clear : 清除屏幕信息<br>\n语法: clear</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; clear</span><br></pre></td></tr></table></figure>\n<ul>\n<li>man:  显示命令的帮助信息<br>\n语法: <strong><em>man [命令名称]</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; man  clear</span><br><span class=\"line\"></span><br><span class=\"line\">clear(1)                                                              clear(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">       clear - clear the terminal screen</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">       clear</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">       clear clears your screen if this is possible.  It looks in the environment for the terminal type and then in the terminfo database to figure out how to clear the screen.</span><br><span class=\"line\"></span><br><span class=\"line\">       clear ignores any command-line parameters that may be present.</span><br><span class=\"line\"></span><br><span class=\"line\">SEE ALSO</span><br><span class=\"line\">       tput(1), terminfo(5)</span><br><span class=\"line\"></span><br><span class=\"line\">       This describes ncurses version 5.7 (patch 20090207).</span><br><span class=\"line\"></span><br><span class=\"line\">                                                                      clear(1)</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>who: 显示当前登录到系统的用户<br>\n语法: who</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who</span><br><span class=\"line\">root     pts/0        2018-10-08 13:26 (203.110.178.83)</span><br><span class=\"line\">-- 注释: 输出格式为</span><br><span class=\"line\">名称 [状态] 终端 时间 [活动] [进程标识]（主机名）</span><br><span class=\"line\">    * 名称：用户的登录名。</span><br><span class=\"line\">    * 状态：表明终端是否对用户都是可写的。</span><br><span class=\"line\">    * 终端：类似于pts/1、pts/2等，此终端标识在/dev目录中可找到。</span><br><span class=\"line\">    * 时间：用户登录系统的时间。</span><br><span class=\"line\">    * 活动：某个用户在自己的终端上最后一次活动发生以来到现在的时间，如果此项是个“.”，就表示一分钟内的终端活动；如果终端保持静止已经超过24小时或自从系统启动以来还没有被使用过，那么此项标记为“old”。</span><br><span class=\"line\">    * 进程标识：用户登录shell的进程id。</span><br><span class=\"line\">    * 主机名：登录到Linux系统上的客户端机器标识。</span><br><span class=\"line\">--</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查看运行级别-- </span><br><span class=\"line\">&gt; who -r  </span><br><span class=\"line\">         run-level 3  2017-07-15 15:26</span><br><span class=\"line\">&gt; who  -w</span><br><span class=\"line\">root     + pts/0        2018-10-08 13:26 (203.110.178.83)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  who -buT</span><br><span class=\"line\">           system boot  2017-07-15 15:26</span><br><span class=\"line\">root     + pts/0        2018-10-08 13:26   .          2887 (203.110.178.83)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>free: 显示内存状态(系统物理内存、虚拟内存、共享内存和系统缓存)<br>\n语法: free [选项] [-s (间隔秒数)]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; free</span><br><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:       8061108    7875964     185144     146236     201324     558792</span><br><span class=\"line\">-/+ buffers/cache:    7115848     945260</span><br><span class=\"line\">Swap:            0          0          0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdn.net/20181008150804369?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"free参数说明\"></p>\n<ul>\n<li>ps: 系统进程瞬间的运行状态, 非常常用, 可通过组合选项(-ef、aux)准确定位系统运行的状态<br>\n语法: <strong><em>ps [选项]</em></strong><br>\n<img src=\"https://img-blog.csdn.net/20181008151130846?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"ps参数\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ps</span><br><span class=\"line\">  PID TTY          TIME CMD</span><br><span class=\"line\"> 2887 pts/0    00:00:00 zsh</span><br><span class=\"line\">24884 pts/0    00:00:00 ps</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: (输出说明)</span><br><span class=\"line\">pid: 进程的标识符</span><br><span class=\"line\">tty: 进程所属的终端控制台</span><br><span class=\"line\">time: 进程所使用的总的cpu时间</span><br><span class=\"line\">cmd: 列出正在执行的命令行</span><br><span class=\"line\">-- </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ps -aux </span><br><span class=\"line\">&gt; ps -ef</span><br></pre></td></tr></table></figure>\n<ul>\n<li>top: 类型windows中的任务管理器, 能够实时显示进程的资源占用情况, 可以按照cpu使用情况或内存占用情况进行排序<br>\n<img src=\"https://img-blog.csdn.net/20181008152506209?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"top参数\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; top</span><br><span class=\"line\">top - 15:31:25 up 450 days, 4 min,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class=\"line\">Tasks: 403 total,   1 running, 402 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">Cpu(s):  0.9%us,  0.4%sy,  0.0%ni, 98.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class=\"line\">Mem:   8061108k total,  7873600k used,   187508k free,   201444k buffers</span><br><span class=\"line\">Swap:        0k total,        0k used,        0k free,   538576k cached</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                           </span><br><span class=\"line\"> 3687 git       20   0 1460m 760m  11m S  1.0  9.7 509:44.69 bundle                                                                                                                                                             </span><br><span class=\"line\">15635 gitlab-r  20   0  241m  12m  912 S  1.0  0.2 366:27.19 redis-server </span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: </span><br><span class=\"line\">&gt; 第一行:  </span><br><span class=\"line\">15:31:25 当前系统的时间；</span><br><span class=\"line\">up 450 days 表示系统已启动450天4分钟；</span><br><span class=\"line\">1 user当前在线的用户数为1人；</span><br><span class=\"line\">load average:0.00,0.00,0.00表示系统平均负载,3个数分别为1分钟/5分钟/15分钟前到现在的系统平均负载.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 第二、三行</span><br><span class=\"line\">Tasks：403 total总共有403个进程；</span><br><span class=\"line\">1 running： 1个运行</span><br><span class=\"line\">402 sleeping：402个处于休眠状态</span><br><span class=\"line\">0 stopped：0个停止</span><br><span class=\"line\">0 zombie：0个僵死</span><br><span class=\"line\">Cpu(s)：0.9% us：表示用戶進程占用CPU的百分比。</span><br><span class=\"line\">0.1% sy：系统进程占用CPU的百分比。</span><br><span class=\"line\">0.0% ni：用户进程空间內改变过优先级的进程占用CPU的百分比。</span><br><span class=\"line\">99.3% id：空闲CPU占用的百分比。</span><br><span class=\"line\">0.2% wa：等待输入、输出的进程占用CPU的百分比。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 最后两行</span><br><span class=\"line\">Mem：4059952k total：系統的物理內存大小。</span><br><span class=\"line\">4009540k used：已經使用的物理內存大小。</span><br><span class=\"line\">50412k free：目前空余內存大小。</span><br><span class=\"line\">468964k buffers：用作內核緩沖區的內存大小。</span><br><span class=\"line\">Swap：8193108k total：交換分區內存大小。</span><br><span class=\"line\">0k used：已經使用的交換分區大小。</span><br><span class=\"line\">8193108k free：空閑的交換分區大小。</span><br><span class=\"line\">2320396k cached：緩存大小。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 进程信息区</span><br><span class=\"line\">進程信息區</span><br><span class=\"line\"></span><br><span class=\"line\">進程信息區顯示了每個進程的運行狀態，我們先來看一下每列輸出的含義。</span><br><span class=\"line\"></span><br><span class=\"line\">PID：进程的id。</span><br><span class=\"line\">USER：进程所有者的用户名。</span><br><span class=\"line\">pr：进程优先级。</span><br><span class=\"line\">NI：nice值。负值表示高优先级，正值表示低优先级。</span><br><span class=\"line\">VIRT：进程使用的虚拟内存总量，单位KB。VIRT=SWAP+RES。</span><br><span class=\"line\">RES：进程使用的、未被换出的物理內存大小，单位KB。RES=CODE+DATA，其中，CODE为执行代码占用的物理內存大小，DATA为数据占用的內存大小。</span><br><span class=\"line\">SHR：共享內存大小，单位KB。</span><br><span class=\"line\">S：进程状态，D表示不可中断的睡眠状态，R表示运行状态，S表示睡眠状态，T表示跟踪/停止，Z表示僵死进程。</span><br><span class=\"line\">%CPU：上次更新到现在的CPU时间占用百分比。</span><br><span class=\"line\">%MEM：进程占用的物理內存百分比。</span><br><span class=\"line\">TIME+：进程總計使用的CPU时间，单位为1/100秒。</span><br><span class=\"line\">COMMAND：正在运行进程的命令名或者命令路经。</span><br><span class=\"line\">--</span><br></pre></td></tr></table></figure>\n<ul>\n<li>find: 查找文件<br>\n语法: find [路径]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 查找大于100M的文件, 但是这样无法看文件的大小/属性等 --</span><br><span class=\"line\">&gt; find . -type f -size +100M</span><br><span class=\"line\">./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 可以看到文件的大小/属性 --</span><br><span class=\"line\">&gt;  find . -type f -size +100M -print0 | xargs -0 ls -l</span><br><span class=\"line\">-rw-r--r-- 1 root root 169983496 Mar 16  2017 ./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\">-rw-r--r-- 1 root root 169983496 Oct 18  2017 ./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 只看大小 --</span><br><span class=\"line\">&gt; find . -type f -size +100M  -print0 | xargs -0 du -h</span><br><span class=\"line\">163M\t./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">163M\t./Downloads/jdk-8u131-linux-x64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查找大于100M的文件, 只看大小,  并排序 --</span><br><span class=\"line\">&gt; find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr</span><br><span class=\"line\">163M\t./Downloads/root@cq.hbjk.com.cn</span><br><span class=\"line\">163M\t./Downloads/jdk-8u131-linux-x64.rpm</span><br></pre></td></tr></table></figure>\n<ul>\n<li>du: 查看当前指定文件或目录(会递归显示子目录)占用磁盘空间大小</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并显示文件大小--</span><br><span class=\"line\">&gt; du -h --max-depth=1</span><br><span class=\"line\">69M\t./.m2</span><br><span class=\"line\">60K\t./.cache</span><br><span class=\"line\">1.4G\t./Downloads</span><br><span class=\"line\">12K\t./.oracle_jre_usage</span><br><span class=\"line\">8.0K\t./.pki</span><br><span class=\"line\">170M\t./.nvm</span><br><span class=\"line\">208M\t./.npm</span><br><span class=\"line\">3.6M\t./.gem</span><br><span class=\"line\">8.0K\t./.pip</span><br><span class=\"line\">112K\t./tmp</span><br><span class=\"line\">28M\t./.bundle</span><br><span class=\"line\">56K\t./.java</span><br><span class=\"line\">276K\t./.ssh</span><br><span class=\"line\">4.9M\t./.oh-my-zsh</span><br><span class=\"line\">296K\t./.vue-templates</span><br><span class=\"line\">1.9G\t.</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 并排序 --</span><br><span class=\"line\">&gt; du -hm --max-depth=1 | sort -n</span><br><span class=\"line\">1\t./.cache</span><br><span class=\"line\">1\t./.java</span><br><span class=\"line\">1\t./.oracle_jre_usage</span><br><span class=\"line\">1\t./.pip</span><br><span class=\"line\">1\t./.pki</span><br><span class=\"line\">1\t./.ssh</span><br><span class=\"line\">1\t./tmp</span><br><span class=\"line\">1\t./.vue-templates</span><br><span class=\"line\">4\t./.gem</span><br><span class=\"line\">5\t./.oh-my-zsh</span><br><span class=\"line\">28\t./.bundle</span><br><span class=\"line\">69\t./.m2</span><br><span class=\"line\">170\t./.nvm</span><br><span class=\"line\">208\t./.npm</span><br><span class=\"line\">1400\t./Downloads</span><br><span class=\"line\">1883\t.</span><br><span class=\"line\"></span><br><span class=\"line\">-- 注释: 查询depth为1的所有文件, 并将文件大小单位用M, 排序, 取前12个--</span><br><span class=\"line\">&gt;du -hm --max-depth=2 | sort -nr | head -12</span><br><span class=\"line\">1883\t.</span><br><span class=\"line\">1400\t./Downloads</span><br><span class=\"line\">383\t./Downloads/ruby-2.3.3</span><br><span class=\"line\">377\t./Downloads/ruby-2.4.1</span><br><span class=\"line\">208\t./.npm</span><br><span class=\"line\">170\t./.nvm</span><br><span class=\"line\">167\t./.nvm/versions</span><br><span class=\"line\">73\t./Downloads/redis-4.0.1</span><br><span class=\"line\">69\t./.m2/repository</span><br><span class=\"line\">69\t./.m2</span><br><span class=\"line\">47\t./Downloads/zookeeper-3.4.9</span><br><span class=\"line\">45\t./Downloads/kafka_2.11-0.11.0.0</span><br></pre></td></tr></table></figure>\n"},{"title":"Modbus协议服务端（Netty）","date":"2018-08-15T15:01:55.000Z","_content":"\n<!-- more -->\n\n## pom.xml\n\n```\n\n<dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-all</artifactId>\n            <version>4.0.21.Final</version>\n            <scope>compile</scope>\n</dependency>\n\n<dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.7</version>\n<dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n</dependency>\n```\n## Listener\n\n```\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.FixedLengthFrameDecoder;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\nimport util.Consts;\n\npublic class PortalSomCommunicationListener implements Runnable{\n    private int port;\n\n    public PortalSomCommunicationListener(int port) {\n        this.port = port;\n    }\n\n    @Override\n    public void run() {\n        startNettyServer(port);\n    }\n\n    private void startNettyServer(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);\n        try {\n            // 配置服务器的NIO线程租\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer() {\n                        @Override\n                        protected void initChannel(Channel channel) throws Exception {\n                            channel.pipeline().addLast(new FixedLengthFrameDecoder(12));\n                            // 设置超时时间，防止连接过多。\n                            channel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(5));\n                            channel.pipeline().addLast(businessGroup, \"executer\", new SomCommunicationHandler());\n                        }\n                    });\n            // 绑定端口，同步等待成功\n            ChannelFuture f = b.bind(port).sync();\n            // 等待服务端监听端口关闭\n            f.channel().closeFuture().sync();\n        } catch(Exception e) {\n        } finally {\n            // 优雅退出，释放线程池资源\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        // 异味MODBUS协议\n        new Thread(new PortalSomCommunicationListener(Consts.YIWEI_PORT)).start();\n    }\n}\n\n```\n\n## Handler\n\n```\n\nimport domain.YiWeiSample;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport net.Client;\nimport org.apache.commons.codec.binary.Hex;\nimport util.Consts;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 请求：\n *  00 00   00 00   00 06      FF          03      00 01       00 00\n * | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|\n *\n * 响应：\n *  00 00   00 00   00 06       FF           03     00 01      00 00\n * | 事务 |协议标识| 长度 | 单元标识 |功能码|字节个数|请求的数据|\n */\npublic class SomCommunicationHandler extends ChannelInboundHandlerAdapter {\n    // 请求指令的长度，此协议指定12个字节长度\n    private static final int commandSize = 12;\n    private ByteBuf readBuf;\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n\n        ByteBuf m = (ByteBuf) msg;\n        Consts.logger.info(\"SomCommunicationHandler收到SOM的二进制形式指令： \" + ByteBufUtil.hexDump(m));\n        Consts.logger.info(\"SomCommunicationHandler收到SOM的ASCII形式指令： \" + m.toString(Charset.forName(\"US-ASCII\")));\n        readBuf.writeBytes(m);\n        m.release();\n        byte[] bytes = handleData();\n        if (bytes == null) return;\n        ctx.channel().writeAndFlush(Unpooled.wrappedBuffer(bytes))\n                .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)\n                .addListener((ChannelFutureListener) channelFuture -> Consts.logger.info(\n                        \"SomCommunicationHandler \"\n                                + this.getClass().getName()\n                                + \"成功发送指令:\"\n                                + Hex.encodeHexString(bytes)));\n    }\n\n    private byte[] handleData() {\n        while (readBuf.readableBytes() >= commandSize) {\n            List<Byte> result = new ArrayList<>();\n            byte[] bytes = new byte[commandSize];\n            readBuf.readBytes(bytes);\n            // 事务\n            result.add(bytes[0]);\n            result.add(bytes[1]);\n            // 协议标识\n            result.add(bytes[2]);\n            result.add(bytes[3]);\n            // 起始地址\n            float startIndex = ByteBuffer.wrap(bytes, 8, 2).getShort();\n            // 寄存器个数\n            float numberRegister = ByteBuffer.wrap(bytes, 10, 2).getShort();\n\n            // 发送指令\n            try {\n                // 数据包 AI + DI\n                byte[] dataBytes = getData((int) startIndex, (int) numberRegister);\n                // Length 长度:长度字段以字节计数，包括单元标识和数据字段。\n                int length = 3 + (dataBytes != null ? dataBytes.length : 0);\n                byte[] len = numToBytes(length);\n                addBytes(result, len);\n                //Unit Identifier 单元标识\n                result.add((byte) 0xFF);\n                // Function Code 功能码\n                result.add((byte) 0x04);\n                //Byte Count 字节个数\n//                result.add(numToBytes(dataBytes != null ? dataBytes.length : 0));\n                byte[] len2 = numToHex8((dataBytes != null ? dataBytes.length : 0));\n                addBytes(result, len2);\n\n                addBytes(result, dataBytes);\n\n                return list2byte(result);\n            } catch (UnsupportedEncodingException e) {\n                Consts.logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    private byte[] list2byte(List<Byte> list) {\n        if (list == null || list.size() < 0)\n            return null;\n        byte[] bytes = new byte[list.size()];\n        int i = 0;\n        for (Byte aList : list) {\n            bytes[i] = aList;\n            i++;\n        }\n        return bytes;\n    }\n\n    /**\n     * @param startIndex 起始地址是指从数据的第几个字段开始, 1：系统报警， 2。。。12 数据\n     * @param size 寄存器的个数 = DI + AI， DI有1个，AI有11个\n     */\n    private byte[] getData(int startIndex, int size) throws UnsupportedEncodingException {\n        // TODO: demo数据。\n        YiWeiSample sample = new YiWeiSample(\n                20,\n                70,\n                50,\n                12,\n                1,\n                25,\n                70,\n                20,\n                18,\n                40,\n                10\n        );\n        //                                                  // 寄存器地址\n        // DI：系统报警值，0,1,2,3,4， 1为正常\n        byte [] di = numToBytes(1);                         // 1\n        // AI 请求的数据data，\n        List<Byte> bytes = new ArrayList<>();\n        addBytes(bytes, numToBytes(sample.getAvgTemp()));   // 2\n        addBytes(bytes, numToBytes(sample.getAvgHumid()));  // 3\n        addBytes(bytes, numToBytes(sample.getAvgPm10()));   // 4\n        addBytes(bytes, numToBytes(sample.getAvgCo2()));    // 5\n        addBytes(bytes, numToBytes(sample.getInYiwei()));   // 6\n        addBytes(bytes, numToBytes(sample.getInTemp()));    // 7\n        addBytes(bytes, numToBytes(sample.getInPm10()));    // 8\n        addBytes(bytes, numToBytes(sample.getInCo2()));     // 9\n        addBytes(bytes, numToBytes(sample.getOutTemp()));   // 10\n        addBytes(bytes, numToBytes(sample.getOutPm10()));   // 11\n        addBytes(bytes, numToBytes(sample.getOutCo2()));    // 12\n\n        // 处理一下startIndex, startIndex默认在区间[1,12]，1为DI，AI[2,12]\n        if (startIndex == 1) {\n            startIndex = 0;\n        } else if (startIndex >= 2 && startIndex <= 12) {\n            startIndex = (startIndex - 2) * 2;\n        } else {\n            Consts.logger.error(\"Data (as requested)获取请求数据失败， Starting Address 起始地址小于2或大于12，为：\" + size);\n            return null;\n        }\n\n        // 寄存器个数\n        if (size < 0 || size > bytes.size()) {\n            Consts.logger.error(\"Data (as requested)获取请求数据失败， Number of Registers 寄存器个数错误，个数为：\" + size);\n            return null;\n        }\n\n        bytes = bytes.subList(startIndex, (size - 1) * 2);\n\n        List<Byte> result = new ArrayList<>();\n        addBytes(result, di);\n        result.addAll(bytes);\n        return list2byte(result);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n            throws Exception {\n        Consts.logger.error(\"DTUHandler exception: \" + cause.toString());\n        ctx.close();\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) {\n        readBuf = ctx.alloc().buffer();\n    }\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) {\n        readBuf.release();\n        readBuf = null;\n        Client.disconnect(ctx.channel());\n    }\n\n    private void addBytes(List<Byte> list, byte[] arr) {\n        if (arr == null || arr.length == 0) return;\n        for (byte b : arr) {\n            list.add(b);\n        }\n    }\n\n    private static byte[] numToHex8(int b) {\n        return hexStringToBytes(String.format(\"%02x\", b));\n    }\n\n    private static byte[] numToBytes(int b) {\n        String hex = String.format(\"%04x\", b);\n        return hexStringToBytes(hex);\n    }\n\n    private static byte[] hexStringToBytes(String hexString) {\n        if (hexString == null || hexString.equals(\"\")) {\n            return null;\n        }\n        hexString = hexString.toUpperCase();\n        int length = hexString.length() / 2;\n        char[] hexChars = hexString.toCharArray();\n        byte[] d = new byte[length];\n        for (int i = 0; i < length; i++) {\n            int pos = i * 2;\n            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n        }\n        return d;\n    }\n\n    private static byte charToByte(char c) {\n        return (byte) \"0123456789ABCDEF\".indexOf(c);\n    }\n}\n```\n## Consts.java\n\n```\nimport org.apache.log4j.Logger;\n\npublic class Consts {\n\n\tpublic static final int YIWEI_PORT = 10000;\n\tpublic static Logger logger = Logger.getRootLogger();\n\t\n}\n\n```\n## Client.java\n\n```\n\nimport io.netty.channel.Channel;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class Client {\n    private static final Map<String, Client> devCode2Client;\n\n    static {\n        devCode2Client = new ConcurrentHashMap<>();\n    }\n\n    private static final Map<Channel, String> channel2DevCode = new ConcurrentHashMap<>();\n\n\n    public static void disconnect(Channel channel) {\n\n        if (channel2DevCode.containsKey(channel)) {\n            String devCode = channel2DevCode.get(channel);\n            devCode2Client.remove(devCode);\n            channel2DevCode.remove(channel);\n        }\n    }\n\n}\n```\n\n## YiWeiSample.java\n\n```\npublic class YiWeiSample {\n\n    private int avgTemp;\n    private int avgHumid;\n    private int avgPm10;\n    private int avgCo2;\n    private int inYiwei;\n    private int inTemp;\n    private int inPm10;\n    private int inCo2;\n    private int outTemp;\n    private int outPm10;\n    private int outCo2;\n    private int warnData;\n\n    public YiWeiSample(int avgTemp, int avgHumid, int avgPm10, int avgCo2, int inYiwei, int inTemp, int inPm10, int inCo2, int outTemp, int outPm10, int outCo2) {\n        this.avgTemp = avgTemp;\n        this.avgHumid = avgHumid;\n        this.avgPm10 = avgPm10;\n        this.avgCo2 = avgCo2;\n        this.inYiwei = inYiwei;\n        this.inTemp = inTemp;\n        this.inPm10 = inPm10;\n        this.inCo2 = inCo2;\n        this.outTemp = outTemp;\n        this.outPm10 = outPm10;\n        this.outCo2 = outCo2;\n    }\n\n    public int getAvgTemp() {\n        return avgTemp;\n    }\n\n    public void setAvgTemp(int avgTemp) {\n        this.avgTemp = avgTemp;\n    }\n\n    public int getAvgHumid() {\n        return avgHumid;\n    }\n\n    public void setAvgHumid(int avgHumid) {\n        this.avgHumid = avgHumid;\n    }\n\n    public int getAvgPm10() {\n        return avgPm10;\n    }\n\n    public void setAvgPm10(int avgPm10) {\n        this.avgPm10 = avgPm10;\n    }\n\n    public int getAvgCo2() {\n        return avgCo2;\n    }\n\n    public void setAvgCo2(int avgCo2) {\n        this.avgCo2 = avgCo2;\n    }\n\n    public int getInYiwei() {\n        return inYiwei;\n    }\n\n    public void setInYiwei(int inYiwei) {\n        this.inYiwei = inYiwei;\n    }\n\n    public int getInTemp() {\n        return inTemp;\n    }\n\n    public void setInTemp(int inTemp) {\n        this.inTemp = inTemp;\n    }\n\n    public int getInPm10() {\n        return inPm10;\n    }\n\n    public void setInPm10(int inPm10) {\n        this.inPm10 = inPm10;\n    }\n\n    public int getInCo2() {\n        return inCo2;\n    }\n\n    public void setInCo2(int inCo2) {\n        this.inCo2 = inCo2;\n    }\n\n    public int getOutTemp() {\n        return outTemp;\n    }\n\n    public void setOutTemp(int outTemp) {\n        this.outTemp = outTemp;\n    }\n\n    public int getOutPm10() {\n        return outPm10;\n    }\n\n    public void setOutPm10(int outPm10) {\n        this.outPm10 = outPm10;\n    }\n\n    public int getOutCo2() {\n        return outCo2;\n    }\n\n    public void setOutCo2(int outCo2) {\n        this.outCo2 = outCo2;\n    }\n\n    public int getWarnData() {\n        return warnData;\n    }\n\n    public void setWarnData(int warnData) {\n        this.warnData = warnData;\n    }\n}\n```\n\n","source":"_posts/Modbus协议服务端（Netty）.md","raw":"---\ntitle: Modbus协议服务端（Netty）\ncategories: Linux\ntags: linux\ndate: 2018-08-15 23:01:55\n---\n\n<!-- more -->\n\n## pom.xml\n\n```\n\n<dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-all</artifactId>\n            <version>4.0.21.Final</version>\n            <scope>compile</scope>\n</dependency>\n\n<dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.7</version>\n<dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n</dependency>\n```\n## Listener\n\n```\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.FixedLengthFrameDecoder;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\nimport util.Consts;\n\npublic class PortalSomCommunicationListener implements Runnable{\n    private int port;\n\n    public PortalSomCommunicationListener(int port) {\n        this.port = port;\n    }\n\n    @Override\n    public void run() {\n        startNettyServer(port);\n    }\n\n    private void startNettyServer(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);\n        try {\n            // 配置服务器的NIO线程租\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer() {\n                        @Override\n                        protected void initChannel(Channel channel) throws Exception {\n                            channel.pipeline().addLast(new FixedLengthFrameDecoder(12));\n                            // 设置超时时间，防止连接过多。\n                            channel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(5));\n                            channel.pipeline().addLast(businessGroup, \"executer\", new SomCommunicationHandler());\n                        }\n                    });\n            // 绑定端口，同步等待成功\n            ChannelFuture f = b.bind(port).sync();\n            // 等待服务端监听端口关闭\n            f.channel().closeFuture().sync();\n        } catch(Exception e) {\n        } finally {\n            // 优雅退出，释放线程池资源\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        // 异味MODBUS协议\n        new Thread(new PortalSomCommunicationListener(Consts.YIWEI_PORT)).start();\n    }\n}\n\n```\n\n## Handler\n\n```\n\nimport domain.YiWeiSample;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport net.Client;\nimport org.apache.commons.codec.binary.Hex;\nimport util.Consts;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 请求：\n *  00 00   00 00   00 06      FF          03      00 01       00 00\n * | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|\n *\n * 响应：\n *  00 00   00 00   00 06       FF           03     00 01      00 00\n * | 事务 |协议标识| 长度 | 单元标识 |功能码|字节个数|请求的数据|\n */\npublic class SomCommunicationHandler extends ChannelInboundHandlerAdapter {\n    // 请求指令的长度，此协议指定12个字节长度\n    private static final int commandSize = 12;\n    private ByteBuf readBuf;\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n\n        ByteBuf m = (ByteBuf) msg;\n        Consts.logger.info(\"SomCommunicationHandler收到SOM的二进制形式指令： \" + ByteBufUtil.hexDump(m));\n        Consts.logger.info(\"SomCommunicationHandler收到SOM的ASCII形式指令： \" + m.toString(Charset.forName(\"US-ASCII\")));\n        readBuf.writeBytes(m);\n        m.release();\n        byte[] bytes = handleData();\n        if (bytes == null) return;\n        ctx.channel().writeAndFlush(Unpooled.wrappedBuffer(bytes))\n                .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)\n                .addListener((ChannelFutureListener) channelFuture -> Consts.logger.info(\n                        \"SomCommunicationHandler \"\n                                + this.getClass().getName()\n                                + \"成功发送指令:\"\n                                + Hex.encodeHexString(bytes)));\n    }\n\n    private byte[] handleData() {\n        while (readBuf.readableBytes() >= commandSize) {\n            List<Byte> result = new ArrayList<>();\n            byte[] bytes = new byte[commandSize];\n            readBuf.readBytes(bytes);\n            // 事务\n            result.add(bytes[0]);\n            result.add(bytes[1]);\n            // 协议标识\n            result.add(bytes[2]);\n            result.add(bytes[3]);\n            // 起始地址\n            float startIndex = ByteBuffer.wrap(bytes, 8, 2).getShort();\n            // 寄存器个数\n            float numberRegister = ByteBuffer.wrap(bytes, 10, 2).getShort();\n\n            // 发送指令\n            try {\n                // 数据包 AI + DI\n                byte[] dataBytes = getData((int) startIndex, (int) numberRegister);\n                // Length 长度:长度字段以字节计数，包括单元标识和数据字段。\n                int length = 3 + (dataBytes != null ? dataBytes.length : 0);\n                byte[] len = numToBytes(length);\n                addBytes(result, len);\n                //Unit Identifier 单元标识\n                result.add((byte) 0xFF);\n                // Function Code 功能码\n                result.add((byte) 0x04);\n                //Byte Count 字节个数\n//                result.add(numToBytes(dataBytes != null ? dataBytes.length : 0));\n                byte[] len2 = numToHex8((dataBytes != null ? dataBytes.length : 0));\n                addBytes(result, len2);\n\n                addBytes(result, dataBytes);\n\n                return list2byte(result);\n            } catch (UnsupportedEncodingException e) {\n                Consts.logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    private byte[] list2byte(List<Byte> list) {\n        if (list == null || list.size() < 0)\n            return null;\n        byte[] bytes = new byte[list.size()];\n        int i = 0;\n        for (Byte aList : list) {\n            bytes[i] = aList;\n            i++;\n        }\n        return bytes;\n    }\n\n    /**\n     * @param startIndex 起始地址是指从数据的第几个字段开始, 1：系统报警， 2。。。12 数据\n     * @param size 寄存器的个数 = DI + AI， DI有1个，AI有11个\n     */\n    private byte[] getData(int startIndex, int size) throws UnsupportedEncodingException {\n        // TODO: demo数据。\n        YiWeiSample sample = new YiWeiSample(\n                20,\n                70,\n                50,\n                12,\n                1,\n                25,\n                70,\n                20,\n                18,\n                40,\n                10\n        );\n        //                                                  // 寄存器地址\n        // DI：系统报警值，0,1,2,3,4， 1为正常\n        byte [] di = numToBytes(1);                         // 1\n        // AI 请求的数据data，\n        List<Byte> bytes = new ArrayList<>();\n        addBytes(bytes, numToBytes(sample.getAvgTemp()));   // 2\n        addBytes(bytes, numToBytes(sample.getAvgHumid()));  // 3\n        addBytes(bytes, numToBytes(sample.getAvgPm10()));   // 4\n        addBytes(bytes, numToBytes(sample.getAvgCo2()));    // 5\n        addBytes(bytes, numToBytes(sample.getInYiwei()));   // 6\n        addBytes(bytes, numToBytes(sample.getInTemp()));    // 7\n        addBytes(bytes, numToBytes(sample.getInPm10()));    // 8\n        addBytes(bytes, numToBytes(sample.getInCo2()));     // 9\n        addBytes(bytes, numToBytes(sample.getOutTemp()));   // 10\n        addBytes(bytes, numToBytes(sample.getOutPm10()));   // 11\n        addBytes(bytes, numToBytes(sample.getOutCo2()));    // 12\n\n        // 处理一下startIndex, startIndex默认在区间[1,12]，1为DI，AI[2,12]\n        if (startIndex == 1) {\n            startIndex = 0;\n        } else if (startIndex >= 2 && startIndex <= 12) {\n            startIndex = (startIndex - 2) * 2;\n        } else {\n            Consts.logger.error(\"Data (as requested)获取请求数据失败， Starting Address 起始地址小于2或大于12，为：\" + size);\n            return null;\n        }\n\n        // 寄存器个数\n        if (size < 0 || size > bytes.size()) {\n            Consts.logger.error(\"Data (as requested)获取请求数据失败， Number of Registers 寄存器个数错误，个数为：\" + size);\n            return null;\n        }\n\n        bytes = bytes.subList(startIndex, (size - 1) * 2);\n\n        List<Byte> result = new ArrayList<>();\n        addBytes(result, di);\n        result.addAll(bytes);\n        return list2byte(result);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n            throws Exception {\n        Consts.logger.error(\"DTUHandler exception: \" + cause.toString());\n        ctx.close();\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) {\n        readBuf = ctx.alloc().buffer();\n    }\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) {\n        readBuf.release();\n        readBuf = null;\n        Client.disconnect(ctx.channel());\n    }\n\n    private void addBytes(List<Byte> list, byte[] arr) {\n        if (arr == null || arr.length == 0) return;\n        for (byte b : arr) {\n            list.add(b);\n        }\n    }\n\n    private static byte[] numToHex8(int b) {\n        return hexStringToBytes(String.format(\"%02x\", b));\n    }\n\n    private static byte[] numToBytes(int b) {\n        String hex = String.format(\"%04x\", b);\n        return hexStringToBytes(hex);\n    }\n\n    private static byte[] hexStringToBytes(String hexString) {\n        if (hexString == null || hexString.equals(\"\")) {\n            return null;\n        }\n        hexString = hexString.toUpperCase();\n        int length = hexString.length() / 2;\n        char[] hexChars = hexString.toCharArray();\n        byte[] d = new byte[length];\n        for (int i = 0; i < length; i++) {\n            int pos = i * 2;\n            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n        }\n        return d;\n    }\n\n    private static byte charToByte(char c) {\n        return (byte) \"0123456789ABCDEF\".indexOf(c);\n    }\n}\n```\n## Consts.java\n\n```\nimport org.apache.log4j.Logger;\n\npublic class Consts {\n\n\tpublic static final int YIWEI_PORT = 10000;\n\tpublic static Logger logger = Logger.getRootLogger();\n\t\n}\n\n```\n## Client.java\n\n```\n\nimport io.netty.channel.Channel;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class Client {\n    private static final Map<String, Client> devCode2Client;\n\n    static {\n        devCode2Client = new ConcurrentHashMap<>();\n    }\n\n    private static final Map<Channel, String> channel2DevCode = new ConcurrentHashMap<>();\n\n\n    public static void disconnect(Channel channel) {\n\n        if (channel2DevCode.containsKey(channel)) {\n            String devCode = channel2DevCode.get(channel);\n            devCode2Client.remove(devCode);\n            channel2DevCode.remove(channel);\n        }\n    }\n\n}\n```\n\n## YiWeiSample.java\n\n```\npublic class YiWeiSample {\n\n    private int avgTemp;\n    private int avgHumid;\n    private int avgPm10;\n    private int avgCo2;\n    private int inYiwei;\n    private int inTemp;\n    private int inPm10;\n    private int inCo2;\n    private int outTemp;\n    private int outPm10;\n    private int outCo2;\n    private int warnData;\n\n    public YiWeiSample(int avgTemp, int avgHumid, int avgPm10, int avgCo2, int inYiwei, int inTemp, int inPm10, int inCo2, int outTemp, int outPm10, int outCo2) {\n        this.avgTemp = avgTemp;\n        this.avgHumid = avgHumid;\n        this.avgPm10 = avgPm10;\n        this.avgCo2 = avgCo2;\n        this.inYiwei = inYiwei;\n        this.inTemp = inTemp;\n        this.inPm10 = inPm10;\n        this.inCo2 = inCo2;\n        this.outTemp = outTemp;\n        this.outPm10 = outPm10;\n        this.outCo2 = outCo2;\n    }\n\n    public int getAvgTemp() {\n        return avgTemp;\n    }\n\n    public void setAvgTemp(int avgTemp) {\n        this.avgTemp = avgTemp;\n    }\n\n    public int getAvgHumid() {\n        return avgHumid;\n    }\n\n    public void setAvgHumid(int avgHumid) {\n        this.avgHumid = avgHumid;\n    }\n\n    public int getAvgPm10() {\n        return avgPm10;\n    }\n\n    public void setAvgPm10(int avgPm10) {\n        this.avgPm10 = avgPm10;\n    }\n\n    public int getAvgCo2() {\n        return avgCo2;\n    }\n\n    public void setAvgCo2(int avgCo2) {\n        this.avgCo2 = avgCo2;\n    }\n\n    public int getInYiwei() {\n        return inYiwei;\n    }\n\n    public void setInYiwei(int inYiwei) {\n        this.inYiwei = inYiwei;\n    }\n\n    public int getInTemp() {\n        return inTemp;\n    }\n\n    public void setInTemp(int inTemp) {\n        this.inTemp = inTemp;\n    }\n\n    public int getInPm10() {\n        return inPm10;\n    }\n\n    public void setInPm10(int inPm10) {\n        this.inPm10 = inPm10;\n    }\n\n    public int getInCo2() {\n        return inCo2;\n    }\n\n    public void setInCo2(int inCo2) {\n        this.inCo2 = inCo2;\n    }\n\n    public int getOutTemp() {\n        return outTemp;\n    }\n\n    public void setOutTemp(int outTemp) {\n        this.outTemp = outTemp;\n    }\n\n    public int getOutPm10() {\n        return outPm10;\n    }\n\n    public void setOutPm10(int outPm10) {\n        this.outPm10 = outPm10;\n    }\n\n    public int getOutCo2() {\n        return outCo2;\n    }\n\n    public void setOutCo2(int outCo2) {\n        this.outCo2 = outCo2;\n    }\n\n    public int getWarnData() {\n        return warnData;\n    }\n\n    public void setWarnData(int warnData) {\n        this.warnData = warnData;\n    }\n}\n```\n\n","slug":"Modbus协议服务端（Netty）","published":1,"updated":"2019-04-20T12:35:40.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xt80020vq6b9t2tccld","content":"<a id=\"more\"></a>\n<h2 id=\"pomxml\">pom.xml</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.0.21.Final&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7&lt;/version&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"listener\">Listener</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.codec.FixedLengthFrameDecoder;</span><br><span class=\"line\">import io.netty.handler.timeout.ReadTimeoutHandler;</span><br><span class=\"line\">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class=\"line\">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PortalSomCommunicationListener implements Runnable&#123;</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PortalSomCommunicationListener(int port) &#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        startNettyServer(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void startNettyServer(int port) &#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 配置服务器的NIO线程租</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, 1024)</span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(Channel channel) throws Exception &#123;</span><br><span class=\"line\">                            channel.pipeline().addLast(new FixedLengthFrameDecoder(12));</span><br><span class=\"line\">                            // 设置超时时间，防止连接过多。</span><br><span class=\"line\">                            channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(5));</span><br><span class=\"line\">                            channel.pipeline().addLast(businessGroup, &quot;executer&quot;, new SomCommunicationHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            // 绑定端口，同步等待成功</span><br><span class=\"line\">            ChannelFuture f = b.bind(port).sync();</span><br><span class=\"line\">            // 等待服务端监听端口关闭</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch(Exception e) &#123;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            // 优雅退出，释放线程池资源</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 异味MODBUS协议</span><br><span class=\"line\">        new Thread(new PortalSomCommunicationListener(Consts.YIWEI_PORT)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"handler\">Handler</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import domain.YiWeiSample;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelFutureListener;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import net.Client;</span><br><span class=\"line\">import org.apache.commons.codec.binary.Hex;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 请求：</span><br><span class=\"line\"> *  00 00   00 00   00 06      FF          03      00 01       00 00</span><br><span class=\"line\"> * | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 响应：</span><br><span class=\"line\"> *  00 00   00 00   00 06       FF           03     00 01      00 00</span><br><span class=\"line\"> * | 事务 |协议标识| 长度 | 单元标识 |功能码|字节个数|请求的数据|</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SomCommunicationHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    // 请求指令的长度，此协议指定12个字节长度</span><br><span class=\"line\">    private static final int commandSize = 12;</span><br><span class=\"line\">    private ByteBuf readBuf;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf m = (ByteBuf) msg;</span><br><span class=\"line\">        Consts.logger.info(&quot;SomCommunicationHandler收到SOM的二进制形式指令： &quot; + ByteBufUtil.hexDump(m));</span><br><span class=\"line\">        Consts.logger.info(&quot;SomCommunicationHandler收到SOM的ASCII形式指令： &quot; + m.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        readBuf.writeBytes(m);</span><br><span class=\"line\">        m.release();</span><br><span class=\"line\">        byte[] bytes = handleData();</span><br><span class=\"line\">        if (bytes == null) return;</span><br><span class=\"line\">        ctx.channel().writeAndFlush(Unpooled.wrappedBuffer(bytes))</span><br><span class=\"line\">                .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)</span><br><span class=\"line\">                .addListener((ChannelFutureListener) channelFuture -&gt; Consts.logger.info(</span><br><span class=\"line\">                        &quot;SomCommunicationHandler &quot;</span><br><span class=\"line\">                                + this.getClass().getName()</span><br><span class=\"line\">                                + &quot;成功发送指令:&quot;</span><br><span class=\"line\">                                + Hex.encodeHexString(bytes)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] handleData() &#123;</span><br><span class=\"line\">        while (readBuf.readableBytes() &gt;= commandSize) &#123;</span><br><span class=\"line\">            List&lt;Byte&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            byte[] bytes = new byte[commandSize];</span><br><span class=\"line\">            readBuf.readBytes(bytes);</span><br><span class=\"line\">            // 事务</span><br><span class=\"line\">            result.add(bytes[0]);</span><br><span class=\"line\">            result.add(bytes[1]);</span><br><span class=\"line\">            // 协议标识</span><br><span class=\"line\">            result.add(bytes[2]);</span><br><span class=\"line\">            result.add(bytes[3]);</span><br><span class=\"line\">            // 起始地址</span><br><span class=\"line\">            float startIndex = ByteBuffer.wrap(bytes, 8, 2).getShort();</span><br><span class=\"line\">            // 寄存器个数</span><br><span class=\"line\">            float numberRegister = ByteBuffer.wrap(bytes, 10, 2).getShort();</span><br><span class=\"line\"></span><br><span class=\"line\">            // 发送指令</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 数据包 AI + DI</span><br><span class=\"line\">                byte[] dataBytes = getData((int) startIndex, (int) numberRegister);</span><br><span class=\"line\">                // Length 长度:长度字段以字节计数，包括单元标识和数据字段。</span><br><span class=\"line\">                int length = 3 + (dataBytes != null ? dataBytes.length : 0);</span><br><span class=\"line\">                byte[] len = numToBytes(length);</span><br><span class=\"line\">                addBytes(result, len);</span><br><span class=\"line\">                //Unit Identifier 单元标识</span><br><span class=\"line\">                result.add((byte) 0xFF);</span><br><span class=\"line\">                // Function Code 功能码</span><br><span class=\"line\">                result.add((byte) 0x04);</span><br><span class=\"line\">                //Byte Count 字节个数</span><br><span class=\"line\">//                result.add(numToBytes(dataBytes != null ? dataBytes.length : 0));</span><br><span class=\"line\">                byte[] len2 = numToHex8((dataBytes != null ? dataBytes.length : 0));</span><br><span class=\"line\">                addBytes(result, len2);</span><br><span class=\"line\"></span><br><span class=\"line\">                addBytes(result, dataBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                return list2byte(result);</span><br><span class=\"line\">            &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                Consts.logger.error(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] list2byte(List&lt;Byte&gt; list) &#123;</span><br><span class=\"line\">        if (list == null || list.size() &lt; 0)</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        byte[] bytes = new byte[list.size()];</span><br><span class=\"line\">        int i = 0;</span><br><span class=\"line\">        for (Byte aList : list) &#123;</span><br><span class=\"line\">            bytes[i] = aList;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param startIndex 起始地址是指从数据的第几个字段开始, 1：系统报警， 2。。。12 数据</span><br><span class=\"line\">     * @param size 寄存器的个数 = DI + AI， DI有1个，AI有11个</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private byte[] getData(int startIndex, int size) throws UnsupportedEncodingException &#123;</span><br><span class=\"line\">        // TODO: demo数据。</span><br><span class=\"line\">        YiWeiSample sample = new YiWeiSample(</span><br><span class=\"line\">                20,</span><br><span class=\"line\">                70,</span><br><span class=\"line\">                50,</span><br><span class=\"line\">                12,</span><br><span class=\"line\">                1,</span><br><span class=\"line\">                25,</span><br><span class=\"line\">                70,</span><br><span class=\"line\">                20,</span><br><span class=\"line\">                18,</span><br><span class=\"line\">                40,</span><br><span class=\"line\">                10</span><br><span class=\"line\">        );</span><br><span class=\"line\">        //                                                  // 寄存器地址</span><br><span class=\"line\">        // DI：系统报警值，0,1,2,3,4， 1为正常</span><br><span class=\"line\">        byte [] di = numToBytes(1);                         // 1</span><br><span class=\"line\">        // AI 请求的数据data，</span><br><span class=\"line\">        List&lt;Byte&gt; bytes = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgTemp()));   // 2</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgHumid()));  // 3</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgPm10()));   // 4</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgCo2()));    // 5</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInYiwei()));   // 6</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInTemp()));    // 7</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInPm10()));    // 8</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInCo2()));     // 9</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutTemp()));   // 10</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutPm10()));   // 11</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutCo2()));    // 12</span><br><span class=\"line\"></span><br><span class=\"line\">        // 处理一下startIndex, startIndex默认在区间[1,12]，1为DI，AI[2,12]</span><br><span class=\"line\">        if (startIndex == 1) &#123;</span><br><span class=\"line\">            startIndex = 0;</span><br><span class=\"line\">        &#125; else if (startIndex &gt;= 2 &amp;&amp; startIndex &lt;= 12) &#123;</span><br><span class=\"line\">            startIndex = (startIndex - 2) * 2;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Consts.logger.error(&quot;Data (as requested)获取请求数据失败， Starting Address 起始地址小于2或大于12，为：&quot; + size);</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 寄存器个数</span><br><span class=\"line\">        if (size &lt; 0 || size &gt; bytes.size()) &#123;</span><br><span class=\"line\">            Consts.logger.error(&quot;Data (as requested)获取请求数据失败， Number of Registers 寄存器个数错误，个数为：&quot; + size);</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes = bytes.subList(startIndex, (size - 1) * 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Byte&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        addBytes(result, di);</span><br><span class=\"line\">        result.addAll(bytes);</span><br><span class=\"line\">        return list2byte(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        Consts.logger.error(&quot;DTUHandler exception: &quot; + cause.toString());</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        readBuf = ctx.alloc().buffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerRemoved(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        readBuf.release();</span><br><span class=\"line\">        readBuf = null;</span><br><span class=\"line\">        Client.disconnect(ctx.channel());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void addBytes(List&lt;Byte&gt; list, byte[] arr) &#123;</span><br><span class=\"line\">        if (arr == null || arr.length == 0) return;</span><br><span class=\"line\">        for (byte b : arr) &#123;</span><br><span class=\"line\">            list.add(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] numToHex8(int b) &#123;</span><br><span class=\"line\">        return hexStringToBytes(String.format(&quot;%02x&quot;, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] numToBytes(int b) &#123;</span><br><span class=\"line\">        String hex = String.format(&quot;%04x&quot;, b);</span><br><span class=\"line\">        return hexStringToBytes(hex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] hexStringToBytes(String hexString) &#123;</span><br><span class=\"line\">        if (hexString == null || hexString.equals(&quot;&quot;)) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hexString = hexString.toUpperCase();</span><br><span class=\"line\">        int length = hexString.length() / 2;</span><br><span class=\"line\">        char[] hexChars = hexString.toCharArray();</span><br><span class=\"line\">        byte[] d = new byte[length];</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            int pos = i * 2;</span><br><span class=\"line\">            d[i] = (byte) (charToByte(hexChars[pos]) &lt;&lt; 4 | charToByte(hexChars[pos + 1]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte charToByte(char c) &#123;</span><br><span class=\"line\">        return (byte) &quot;0123456789ABCDEF&quot;.indexOf(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"constsjava\">Consts.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Consts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static final int YIWEI_PORT = 10000;</span><br><span class=\"line\">\tpublic static Logger logger = Logger.getRootLogger();</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"clientjava\">Client.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.channel.Channel;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    private static final Map&lt;String, Client&gt; devCode2Client;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        devCode2Client = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Map&lt;Channel, String&gt; channel2DevCode = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void disconnect(Channel channel) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (channel2DevCode.containsKey(channel)) &#123;</span><br><span class=\"line\">            String devCode = channel2DevCode.get(channel);</span><br><span class=\"line\">            devCode2Client.remove(devCode);</span><br><span class=\"line\">            channel2DevCode.remove(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yiweisamplejava\">YiWeiSample.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class YiWeiSample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int avgTemp;</span><br><span class=\"line\">    private int avgHumid;</span><br><span class=\"line\">    private int avgPm10;</span><br><span class=\"line\">    private int avgCo2;</span><br><span class=\"line\">    private int inYiwei;</span><br><span class=\"line\">    private int inTemp;</span><br><span class=\"line\">    private int inPm10;</span><br><span class=\"line\">    private int inCo2;</span><br><span class=\"line\">    private int outTemp;</span><br><span class=\"line\">    private int outPm10;</span><br><span class=\"line\">    private int outCo2;</span><br><span class=\"line\">    private int warnData;</span><br><span class=\"line\"></span><br><span class=\"line\">    public YiWeiSample(int avgTemp, int avgHumid, int avgPm10, int avgCo2, int inYiwei, int inTemp, int inPm10, int inCo2, int outTemp, int outPm10, int outCo2) &#123;</span><br><span class=\"line\">        this.avgTemp = avgTemp;</span><br><span class=\"line\">        this.avgHumid = avgHumid;</span><br><span class=\"line\">        this.avgPm10 = avgPm10;</span><br><span class=\"line\">        this.avgCo2 = avgCo2;</span><br><span class=\"line\">        this.inYiwei = inYiwei;</span><br><span class=\"line\">        this.inTemp = inTemp;</span><br><span class=\"line\">        this.inPm10 = inPm10;</span><br><span class=\"line\">        this.inCo2 = inCo2;</span><br><span class=\"line\">        this.outTemp = outTemp;</span><br><span class=\"line\">        this.outPm10 = outPm10;</span><br><span class=\"line\">        this.outCo2 = outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgTemp() &#123;</span><br><span class=\"line\">        return avgTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgTemp(int avgTemp) &#123;</span><br><span class=\"line\">        this.avgTemp = avgTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgHumid() &#123;</span><br><span class=\"line\">        return avgHumid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgHumid(int avgHumid) &#123;</span><br><span class=\"line\">        this.avgHumid = avgHumid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgPm10() &#123;</span><br><span class=\"line\">        return avgPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgPm10(int avgPm10) &#123;</span><br><span class=\"line\">        this.avgPm10 = avgPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgCo2() &#123;</span><br><span class=\"line\">        return avgCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgCo2(int avgCo2) &#123;</span><br><span class=\"line\">        this.avgCo2 = avgCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInYiwei() &#123;</span><br><span class=\"line\">        return inYiwei;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInYiwei(int inYiwei) &#123;</span><br><span class=\"line\">        this.inYiwei = inYiwei;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInTemp() &#123;</span><br><span class=\"line\">        return inTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInTemp(int inTemp) &#123;</span><br><span class=\"line\">        this.inTemp = inTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInPm10() &#123;</span><br><span class=\"line\">        return inPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInPm10(int inPm10) &#123;</span><br><span class=\"line\">        this.inPm10 = inPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInCo2() &#123;</span><br><span class=\"line\">        return inCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInCo2(int inCo2) &#123;</span><br><span class=\"line\">        this.inCo2 = inCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutTemp() &#123;</span><br><span class=\"line\">        return outTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutTemp(int outTemp) &#123;</span><br><span class=\"line\">        this.outTemp = outTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutPm10() &#123;</span><br><span class=\"line\">        return outPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutPm10(int outPm10) &#123;</span><br><span class=\"line\">        this.outPm10 = outPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutCo2() &#123;</span><br><span class=\"line\">        return outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutCo2(int outCo2) &#123;</span><br><span class=\"line\">        this.outCo2 = outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getWarnData() &#123;</span><br><span class=\"line\">        return warnData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWarnData(int warnData) &#123;</span><br><span class=\"line\">        this.warnData = warnData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>pom.xml</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.0.21.Final&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7&lt;/version&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2>Listener</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.codec.FixedLengthFrameDecoder;</span><br><span class=\"line\">import io.netty.handler.timeout.ReadTimeoutHandler;</span><br><span class=\"line\">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class=\"line\">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PortalSomCommunicationListener implements Runnable&#123;</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PortalSomCommunicationListener(int port) &#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        startNettyServer(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void startNettyServer(int port) &#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 配置服务器的NIO线程租</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, 1024)</span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(Channel channel) throws Exception &#123;</span><br><span class=\"line\">                            channel.pipeline().addLast(new FixedLengthFrameDecoder(12));</span><br><span class=\"line\">                            // 设置超时时间，防止连接过多。</span><br><span class=\"line\">                            channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(5));</span><br><span class=\"line\">                            channel.pipeline().addLast(businessGroup, &quot;executer&quot;, new SomCommunicationHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            // 绑定端口，同步等待成功</span><br><span class=\"line\">            ChannelFuture f = b.bind(port).sync();</span><br><span class=\"line\">            // 等待服务端监听端口关闭</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch(Exception e) &#123;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            // 优雅退出，释放线程池资源</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 异味MODBUS协议</span><br><span class=\"line\">        new Thread(new PortalSomCommunicationListener(Consts.YIWEI_PORT)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>Handler</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import domain.YiWeiSample;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelFutureListener;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import net.Client;</span><br><span class=\"line\">import org.apache.commons.codec.binary.Hex;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 请求：</span><br><span class=\"line\"> *  00 00   00 00   00 06      FF          03      00 01       00 00</span><br><span class=\"line\"> * | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 响应：</span><br><span class=\"line\"> *  00 00   00 00   00 06       FF           03     00 01      00 00</span><br><span class=\"line\"> * | 事务 |协议标识| 长度 | 单元标识 |功能码|字节个数|请求的数据|</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SomCommunicationHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    // 请求指令的长度，此协议指定12个字节长度</span><br><span class=\"line\">    private static final int commandSize = 12;</span><br><span class=\"line\">    private ByteBuf readBuf;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf m = (ByteBuf) msg;</span><br><span class=\"line\">        Consts.logger.info(&quot;SomCommunicationHandler收到SOM的二进制形式指令： &quot; + ByteBufUtil.hexDump(m));</span><br><span class=\"line\">        Consts.logger.info(&quot;SomCommunicationHandler收到SOM的ASCII形式指令： &quot; + m.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        readBuf.writeBytes(m);</span><br><span class=\"line\">        m.release();</span><br><span class=\"line\">        byte[] bytes = handleData();</span><br><span class=\"line\">        if (bytes == null) return;</span><br><span class=\"line\">        ctx.channel().writeAndFlush(Unpooled.wrappedBuffer(bytes))</span><br><span class=\"line\">                .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)</span><br><span class=\"line\">                .addListener((ChannelFutureListener) channelFuture -&gt; Consts.logger.info(</span><br><span class=\"line\">                        &quot;SomCommunicationHandler &quot;</span><br><span class=\"line\">                                + this.getClass().getName()</span><br><span class=\"line\">                                + &quot;成功发送指令:&quot;</span><br><span class=\"line\">                                + Hex.encodeHexString(bytes)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] handleData() &#123;</span><br><span class=\"line\">        while (readBuf.readableBytes() &gt;= commandSize) &#123;</span><br><span class=\"line\">            List&lt;Byte&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            byte[] bytes = new byte[commandSize];</span><br><span class=\"line\">            readBuf.readBytes(bytes);</span><br><span class=\"line\">            // 事务</span><br><span class=\"line\">            result.add(bytes[0]);</span><br><span class=\"line\">            result.add(bytes[1]);</span><br><span class=\"line\">            // 协议标识</span><br><span class=\"line\">            result.add(bytes[2]);</span><br><span class=\"line\">            result.add(bytes[3]);</span><br><span class=\"line\">            // 起始地址</span><br><span class=\"line\">            float startIndex = ByteBuffer.wrap(bytes, 8, 2).getShort();</span><br><span class=\"line\">            // 寄存器个数</span><br><span class=\"line\">            float numberRegister = ByteBuffer.wrap(bytes, 10, 2).getShort();</span><br><span class=\"line\"></span><br><span class=\"line\">            // 发送指令</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 数据包 AI + DI</span><br><span class=\"line\">                byte[] dataBytes = getData((int) startIndex, (int) numberRegister);</span><br><span class=\"line\">                // Length 长度:长度字段以字节计数，包括单元标识和数据字段。</span><br><span class=\"line\">                int length = 3 + (dataBytes != null ? dataBytes.length : 0);</span><br><span class=\"line\">                byte[] len = numToBytes(length);</span><br><span class=\"line\">                addBytes(result, len);</span><br><span class=\"line\">                //Unit Identifier 单元标识</span><br><span class=\"line\">                result.add((byte) 0xFF);</span><br><span class=\"line\">                // Function Code 功能码</span><br><span class=\"line\">                result.add((byte) 0x04);</span><br><span class=\"line\">                //Byte Count 字节个数</span><br><span class=\"line\">//                result.add(numToBytes(dataBytes != null ? dataBytes.length : 0));</span><br><span class=\"line\">                byte[] len2 = numToHex8((dataBytes != null ? dataBytes.length : 0));</span><br><span class=\"line\">                addBytes(result, len2);</span><br><span class=\"line\"></span><br><span class=\"line\">                addBytes(result, dataBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                return list2byte(result);</span><br><span class=\"line\">            &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                Consts.logger.error(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] list2byte(List&lt;Byte&gt; list) &#123;</span><br><span class=\"line\">        if (list == null || list.size() &lt; 0)</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        byte[] bytes = new byte[list.size()];</span><br><span class=\"line\">        int i = 0;</span><br><span class=\"line\">        for (Byte aList : list) &#123;</span><br><span class=\"line\">            bytes[i] = aList;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param startIndex 起始地址是指从数据的第几个字段开始, 1：系统报警， 2。。。12 数据</span><br><span class=\"line\">     * @param size 寄存器的个数 = DI + AI， DI有1个，AI有11个</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private byte[] getData(int startIndex, int size) throws UnsupportedEncodingException &#123;</span><br><span class=\"line\">        // TODO: demo数据。</span><br><span class=\"line\">        YiWeiSample sample = new YiWeiSample(</span><br><span class=\"line\">                20,</span><br><span class=\"line\">                70,</span><br><span class=\"line\">                50,</span><br><span class=\"line\">                12,</span><br><span class=\"line\">                1,</span><br><span class=\"line\">                25,</span><br><span class=\"line\">                70,</span><br><span class=\"line\">                20,</span><br><span class=\"line\">                18,</span><br><span class=\"line\">                40,</span><br><span class=\"line\">                10</span><br><span class=\"line\">        );</span><br><span class=\"line\">        //                                                  // 寄存器地址</span><br><span class=\"line\">        // DI：系统报警值，0,1,2,3,4， 1为正常</span><br><span class=\"line\">        byte [] di = numToBytes(1);                         // 1</span><br><span class=\"line\">        // AI 请求的数据data，</span><br><span class=\"line\">        List&lt;Byte&gt; bytes = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgTemp()));   // 2</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgHumid()));  // 3</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgPm10()));   // 4</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getAvgCo2()));    // 5</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInYiwei()));   // 6</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInTemp()));    // 7</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInPm10()));    // 8</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getInCo2()));     // 9</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutTemp()));   // 10</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutPm10()));   // 11</span><br><span class=\"line\">        addBytes(bytes, numToBytes(sample.getOutCo2()));    // 12</span><br><span class=\"line\"></span><br><span class=\"line\">        // 处理一下startIndex, startIndex默认在区间[1,12]，1为DI，AI[2,12]</span><br><span class=\"line\">        if (startIndex == 1) &#123;</span><br><span class=\"line\">            startIndex = 0;</span><br><span class=\"line\">        &#125; else if (startIndex &gt;= 2 &amp;&amp; startIndex &lt;= 12) &#123;</span><br><span class=\"line\">            startIndex = (startIndex - 2) * 2;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Consts.logger.error(&quot;Data (as requested)获取请求数据失败， Starting Address 起始地址小于2或大于12，为：&quot; + size);</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 寄存器个数</span><br><span class=\"line\">        if (size &lt; 0 || size &gt; bytes.size()) &#123;</span><br><span class=\"line\">            Consts.logger.error(&quot;Data (as requested)获取请求数据失败， Number of Registers 寄存器个数错误，个数为：&quot; + size);</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes = bytes.subList(startIndex, (size - 1) * 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Byte&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        addBytes(result, di);</span><br><span class=\"line\">        result.addAll(bytes);</span><br><span class=\"line\">        return list2byte(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        Consts.logger.error(&quot;DTUHandler exception: &quot; + cause.toString());</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        readBuf = ctx.alloc().buffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerRemoved(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        readBuf.release();</span><br><span class=\"line\">        readBuf = null;</span><br><span class=\"line\">        Client.disconnect(ctx.channel());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void addBytes(List&lt;Byte&gt; list, byte[] arr) &#123;</span><br><span class=\"line\">        if (arr == null || arr.length == 0) return;</span><br><span class=\"line\">        for (byte b : arr) &#123;</span><br><span class=\"line\">            list.add(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] numToHex8(int b) &#123;</span><br><span class=\"line\">        return hexStringToBytes(String.format(&quot;%02x&quot;, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] numToBytes(int b) &#123;</span><br><span class=\"line\">        String hex = String.format(&quot;%04x&quot;, b);</span><br><span class=\"line\">        return hexStringToBytes(hex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte[] hexStringToBytes(String hexString) &#123;</span><br><span class=\"line\">        if (hexString == null || hexString.equals(&quot;&quot;)) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hexString = hexString.toUpperCase();</span><br><span class=\"line\">        int length = hexString.length() / 2;</span><br><span class=\"line\">        char[] hexChars = hexString.toCharArray();</span><br><span class=\"line\">        byte[] d = new byte[length];</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            int pos = i * 2;</span><br><span class=\"line\">            d[i] = (byte) (charToByte(hexChars[pos]) &lt;&lt; 4 | charToByte(hexChars[pos + 1]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte charToByte(char c) &#123;</span><br><span class=\"line\">        return (byte) &quot;0123456789ABCDEF&quot;.indexOf(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>Consts.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Consts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static final int YIWEI_PORT = 10000;</span><br><span class=\"line\">\tpublic static Logger logger = Logger.getRootLogger();</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>Client.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.channel.Channel;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    private static final Map&lt;String, Client&gt; devCode2Client;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        devCode2Client = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Map&lt;Channel, String&gt; channel2DevCode = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void disconnect(Channel channel) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (channel2DevCode.containsKey(channel)) &#123;</span><br><span class=\"line\">            String devCode = channel2DevCode.get(channel);</span><br><span class=\"line\">            devCode2Client.remove(devCode);</span><br><span class=\"line\">            channel2DevCode.remove(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>YiWeiSample.java</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class YiWeiSample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int avgTemp;</span><br><span class=\"line\">    private int avgHumid;</span><br><span class=\"line\">    private int avgPm10;</span><br><span class=\"line\">    private int avgCo2;</span><br><span class=\"line\">    private int inYiwei;</span><br><span class=\"line\">    private int inTemp;</span><br><span class=\"line\">    private int inPm10;</span><br><span class=\"line\">    private int inCo2;</span><br><span class=\"line\">    private int outTemp;</span><br><span class=\"line\">    private int outPm10;</span><br><span class=\"line\">    private int outCo2;</span><br><span class=\"line\">    private int warnData;</span><br><span class=\"line\"></span><br><span class=\"line\">    public YiWeiSample(int avgTemp, int avgHumid, int avgPm10, int avgCo2, int inYiwei, int inTemp, int inPm10, int inCo2, int outTemp, int outPm10, int outCo2) &#123;</span><br><span class=\"line\">        this.avgTemp = avgTemp;</span><br><span class=\"line\">        this.avgHumid = avgHumid;</span><br><span class=\"line\">        this.avgPm10 = avgPm10;</span><br><span class=\"line\">        this.avgCo2 = avgCo2;</span><br><span class=\"line\">        this.inYiwei = inYiwei;</span><br><span class=\"line\">        this.inTemp = inTemp;</span><br><span class=\"line\">        this.inPm10 = inPm10;</span><br><span class=\"line\">        this.inCo2 = inCo2;</span><br><span class=\"line\">        this.outTemp = outTemp;</span><br><span class=\"line\">        this.outPm10 = outPm10;</span><br><span class=\"line\">        this.outCo2 = outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgTemp() &#123;</span><br><span class=\"line\">        return avgTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgTemp(int avgTemp) &#123;</span><br><span class=\"line\">        this.avgTemp = avgTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgHumid() &#123;</span><br><span class=\"line\">        return avgHumid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgHumid(int avgHumid) &#123;</span><br><span class=\"line\">        this.avgHumid = avgHumid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgPm10() &#123;</span><br><span class=\"line\">        return avgPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgPm10(int avgPm10) &#123;</span><br><span class=\"line\">        this.avgPm10 = avgPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAvgCo2() &#123;</span><br><span class=\"line\">        return avgCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAvgCo2(int avgCo2) &#123;</span><br><span class=\"line\">        this.avgCo2 = avgCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInYiwei() &#123;</span><br><span class=\"line\">        return inYiwei;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInYiwei(int inYiwei) &#123;</span><br><span class=\"line\">        this.inYiwei = inYiwei;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInTemp() &#123;</span><br><span class=\"line\">        return inTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInTemp(int inTemp) &#123;</span><br><span class=\"line\">        this.inTemp = inTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInPm10() &#123;</span><br><span class=\"line\">        return inPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInPm10(int inPm10) &#123;</span><br><span class=\"line\">        this.inPm10 = inPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getInCo2() &#123;</span><br><span class=\"line\">        return inCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setInCo2(int inCo2) &#123;</span><br><span class=\"line\">        this.inCo2 = inCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutTemp() &#123;</span><br><span class=\"line\">        return outTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutTemp(int outTemp) &#123;</span><br><span class=\"line\">        this.outTemp = outTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutPm10() &#123;</span><br><span class=\"line\">        return outPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutPm10(int outPm10) &#123;</span><br><span class=\"line\">        this.outPm10 = outPm10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getOutCo2() &#123;</span><br><span class=\"line\">        return outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setOutCo2(int outCo2) &#123;</span><br><span class=\"line\">        this.outCo2 = outCo2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getWarnData() &#123;</span><br><span class=\"line\">        return warnData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWarnData(int warnData) &#123;</span><br><span class=\"line\">        this.warnData = warnData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux简单命令","date":"2018-08-30T06:01:00.000Z","_content":"\n## 查看磁盘量 du\n参数\n> -a或-all 显示目录中个别文件的大小。\n-b或-bytes 显示目录或文件大小时，以byte为单位。\n-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。\n-k或--kilobytes 以KB(1024bytes)为单位输出。\n-m或--megabytes 以MB为单位输出。\n-s或--summarize 仅显示总计，只列出最后加总的值。\n-h或--human-readable 以K，M，G为单位，提高信息的可读性。\n-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。\n-L<符号链接>或--dereference<符号链接> 显示选项中所指定符号链接的源文件大小。\n-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。\n-X<文件>或--exclude-from=<文件> 在<文件>指定目录或文件。\n--exclude=<目录或文件> 略过指定的目录或文件。\n-D或--dereference-args 显示指定符号链接的源文件大小。\n-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。\n-l或--count-links 重复计算硬件链接的文件。\n<!-- more -->\n示例\n\n查看当前目录中文件或目录所占空间\n```\ndu\n```\n以指定单位显示，不加任何参数则为k(1k = 1024byte)， -m 兆\n\n```\ndu -m\n```\n输出，最下面的一行是当前目录的总大小\n```\n2\t./.openoffice/4/user\n2\t./.openoffice/4\n2\t./.openoffice\n1\t./.pki/nssdb\n1\t./.pki\n1\t./.ure\n506\t.\n```\n指定目录\n```\ndu etc\n```\n指定多个文件, 并以兆显示\n```\ndu file1 file2  -m\n```\n只显示总和的大小\n\n```\ndu -s\n```\n## 文件权限 chmod \nchmod [cfvR] [--help] [--version] [ugoa] [+-] [rwxX][...]\n> -c : 若该档案权限确实已经更改，才显示其更改动作\n-f : 若该档案权限无法被更改也不要显示错误讯息\n-v : 显示权限变更的详细资料\n-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) \n--help : 显示辅助说明\n--version : 显示版本 \nu 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 \n+-增加或减去权限\nr 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。 \n\n示例\n将 text.txt 设为所有人可读\n\n```\nchmod a+r text.txt\n```\n或\n\n```\nchmod ugo+r text.txt\n```\n将text1.txt、text2.txt设为拥有者和同一组的人可写，其他人不可写\n\n```\nchmod ug+w,o-w text1.txt text2.txt \n```\n将当前目录下的所有文件及子文件设为所有人可读\n\n```\nchmod -R a+w *\n```\n用数字表示\n```\n-rw------- (600) -- 只有属主有读写权限。 \n-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 \n-rwx------ (700) -- 只有属主有读、写、执行权限。 \n-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 \n-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 \n-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 \n-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。  \n```\n\n可执行文件\n\n```\nchmod -x deploy.sh\n\n./deploy.sh\n```\n\n## 探测给定文件的类型 file\n> -b：列出辨识结果时，不显示文件名称；\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；\n-f<名称文件>：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；\n-L：直接显示符号连接所指向的文件类别；\n-m<魔法数字文件>：指定魔法数字文件；\n-v：显示版本信息；\n-z：尝试去解读压缩文件的内容。\n\n## 查找文件 find\n> -amin<分钟>：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；\n-anewer<参考文件或目录>：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；\n-atime<24小时数>：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；\n-cmin<分钟>：查找在指定时间之时被更改过的文件或目录；\n-cnewer<参考文件或目录>查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-ctime<24小时数>：查找在指定时间之时被更改的文件或目录，单位以24小时计算；\n-daystart：从本日开始计算时间；\n-depth：从指定目录下最深层的子目录开始查找；\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；\n-exec<执行指令>：假设find指令的回传值为True，就执行该指令；\n-false：将find指令的回传值皆设为False；\n-fls<列表文件>：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；\n-follow：排除符号连接；\n-fprint<列表文件>：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；\n-fprint0<列表文件>：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；\n-fprintf<列表文件><输出格式>：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；\n-fstype<文件系统类型>：只寻找该文件系统类型下的文件或目录；\n-gid<群组识别码>：查找符合指定之群组识别码的文件或目录；\n-group<群组名称>：查找符合指定之群组名称的文件或目录；\n-help或——help：在线帮助；\n-ilname<范本样式>：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；\n-iname<范本样式>：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；\n-inum<inode编号>：查找符合指定的inode编号的文件或目录；\n-ipath<范本样式>：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；\n-iregex<范本样式>：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；\n-links<连接数目>：查找符合指定的硬连接数目的文件或目录；\n-iname<范本样式>：指定字符串作为寻找符号连接的范本样式；\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；\n-maxdepth<目录层级>：设置最大目录层级；\n-mindepth<目录层级>：设置最小目录层级；\n-mmin<分钟>：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；\n-mount：此参数的效果和指定“-xdev”相同；\n-mtime<24小时数>：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；\n-name<范本样式>：指定字符串作为寻找文件或目录的范本样式；\n-newer<参考文件或目录>：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-nogroup：找出不属于本地主机群组识别码的文件或目录；\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；\n-nouser：找出不属于本地主机用户识别码的文件或目录；\n-ok<执行指令>：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；\n-path<范本样式>：指定字符串作为寻找目录的范本样式；\n-perm<权限数值>：查找符合指定的权限数值的文件或目录；\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；\n-printf<输出格式>：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；\n-prune：不寻找字符串作为寻找文件或目录的范本样式;\n-regex<范本样式>：指定字符串作为寻找文件或目录的范本样式；\n-size<文件大小>：查找符合指定的文件大小的文件；\n-true：将find指令的回传值皆设为True；\n-typ<文件类型>：只寻找符合指定的文件类型的文件；\n-uid<用户识别码>：查找符合指定的用户识别码的文件或目录；\n-used<日数>：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；\n-user<拥有者名称>：查找符和指定的拥有者名称的文件或目录；\n-version或——version：显示版本信息；\n-xdev：将范围局限在先行的文件系统中；\n-xtype<文件类型>：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。\n\n示例\n查找当前文件夹及子文件夹下的所有文件和文件夹\n\n```\nfind .\n```\n\n查找 /etc下文件后缀为 **.conf** 的文件\n\n```\nfind /etc -name '*.conf'\n```\n忽略大小写\n\n```\nfind /etc -iname '*.conf'\n```\n查找当前文件夹及子文件夹下后缀名为 **.conf** 或 **.txt** 的文件，（**括号两边有空格哦**）\n```\nfind . \\( -name \"*.conf\" -o -name \"*.txt\" \\)\n```\n匹配路径或文件（路径中有local或文件名含local）\n\n```\nfind /usr/ -path \"*local\"\n```\n正则表达式匹配路径\n\n```\nfind . -regex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n同上，忽略大小写\n\n```\nfind . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n查询 **/etc** 下不是以 **.conf** 结尾的文件\n\n```\nfind /etc ! -name \"*.conf\"\n```\n根据文件类型查找\n\n```\nfind -type 类型参数\n```\n类型参数：\n>  f 普通文件\n    l 符号连接\n    d 目录\n    c 字符设备\n    b 块设备\n    s 套接字\n    p Fifo\n\n列出所有文件\n```\nfind -type f  \n```\n向下最大深度限制为3\n\n```\nfind -maxdepth 3 -type f\n```\n搜索出深度距离当前目录至少2个子目录的所有文件\n\n```\nfind -mindepth -type f\n```\n\n#### 根据时间戳查找文件\n\n UNIX/Linux文件系统每个文件都有三种时间戳：\n\n    访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\n    修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n    变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n\n查找7天内修改过的文件\n\n```\nfind -type f -atime -7\n```\n修改时间正好是7天的文件\n\n```\nfind -type f -atime 7\n```\n\n查找修改时间大于7天的所有文件\n\n```\nfind -type f atime +7\n```\n\n查找访问时间在60分钟以内的文件\n\n```\nfind -type f -amin -60\n```\n#### 根据文件大小匹配\n\n```\nfind . -type f size 文件大小\n```\n 文件大小单元：\n\n    b —— 块（512字节）\n    c —— 字节\n    w —— 字（2字节）\n    k —— 千字节\n    M —— 兆字节\n    G —— 吉字节\n\n搜索大于10k的所有文件\n\n```\nfind -type f -size 10k\n```\n\n#### 删除匹配文件\n\n```\nfind -type f -name '*.txt' -delete\n```\n#### 根据文件权限/所有权匹配\n\n```\nfind -type f -perm 777\n```\n找出当前目录下权限 **不是** 644的sh文件\n```\nfind -type f  -name '*.sh' ! -perm 644\n```\n找出当前目录用户root拥有的所有文件\n\n```\nfind . -type f -user root\n```\n找出当前目录用户组sunk拥有的所有文件\n\n```\nfind . -type f -group sunk\n```\n\n## 过滤 grep\n过滤出 /etc/passwd 文件中包含 root 的记录\n```\ngrep 'root' /etc/passwd\n```\n递归地过滤出 /var/log/ 目录中包含 linux 的记录\n\n```\ngrep -r 'linux' /var/log/\n```\n## 管道 |\n> 简单来说, Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |\n\n比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起\n\n```\ncat /etc/passwd | grep 'root'\n```\n过滤出 /etc 目录中名字包含 ssh 的目录(不包括子目录)\n\n```\nls /etc | grep 'ssh'\n```\n\n### 重定向 > <\n> 可以使用 > 或 < 将命令的输出重定向到一个文件中\n\n```\necho 'Hello World' > ~/test.txt\n```\n\n## 运维常用命令\n### ping\n对 cloud.tencent.com 发送 4 个 ping 包, 检查与其是否联通\n```\nping -c 4 www.baidu.com\n```\n### netstat 命令\n> netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等\n\n列出所有处于监听状态的tcp端口\n\n```\nnetstat -lt\n```\n查看所有的端口信息, 包括 PID 和进程名称\n\n```\nnetstat -tulpn\n```\n\n","source":"_posts/Linux简单命令.md","raw":"---\ntitle: Linux简单命令\ncategories: Linux\ntags: linux\ndate: 2018-08-30 14:01:00\n---\n\n## 查看磁盘量 du\n参数\n> -a或-all 显示目录中个别文件的大小。\n-b或-bytes 显示目录或文件大小时，以byte为单位。\n-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。\n-k或--kilobytes 以KB(1024bytes)为单位输出。\n-m或--megabytes 以MB为单位输出。\n-s或--summarize 仅显示总计，只列出最后加总的值。\n-h或--human-readable 以K，M，G为单位，提高信息的可读性。\n-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。\n-L<符号链接>或--dereference<符号链接> 显示选项中所指定符号链接的源文件大小。\n-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。\n-X<文件>或--exclude-from=<文件> 在<文件>指定目录或文件。\n--exclude=<目录或文件> 略过指定的目录或文件。\n-D或--dereference-args 显示指定符号链接的源文件大小。\n-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。\n-l或--count-links 重复计算硬件链接的文件。\n<!-- more -->\n示例\n\n查看当前目录中文件或目录所占空间\n```\ndu\n```\n以指定单位显示，不加任何参数则为k(1k = 1024byte)， -m 兆\n\n```\ndu -m\n```\n输出，最下面的一行是当前目录的总大小\n```\n2\t./.openoffice/4/user\n2\t./.openoffice/4\n2\t./.openoffice\n1\t./.pki/nssdb\n1\t./.pki\n1\t./.ure\n506\t.\n```\n指定目录\n```\ndu etc\n```\n指定多个文件, 并以兆显示\n```\ndu file1 file2  -m\n```\n只显示总和的大小\n\n```\ndu -s\n```\n## 文件权限 chmod \nchmod [cfvR] [--help] [--version] [ugoa] [+-] [rwxX][...]\n> -c : 若该档案权限确实已经更改，才显示其更改动作\n-f : 若该档案权限无法被更改也不要显示错误讯息\n-v : 显示权限变更的详细资料\n-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) \n--help : 显示辅助说明\n--version : 显示版本 \nu 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 \n+-增加或减去权限\nr 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。 \n\n示例\n将 text.txt 设为所有人可读\n\n```\nchmod a+r text.txt\n```\n或\n\n```\nchmod ugo+r text.txt\n```\n将text1.txt、text2.txt设为拥有者和同一组的人可写，其他人不可写\n\n```\nchmod ug+w,o-w text1.txt text2.txt \n```\n将当前目录下的所有文件及子文件设为所有人可读\n\n```\nchmod -R a+w *\n```\n用数字表示\n```\n-rw------- (600) -- 只有属主有读写权限。 \n-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 \n-rwx------ (700) -- 只有属主有读、写、执行权限。 \n-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 \n-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 \n-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 \n-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。  \n```\n\n可执行文件\n\n```\nchmod -x deploy.sh\n\n./deploy.sh\n```\n\n## 探测给定文件的类型 file\n> -b：列出辨识结果时，不显示文件名称；\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；\n-f<名称文件>：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；\n-L：直接显示符号连接所指向的文件类别；\n-m<魔法数字文件>：指定魔法数字文件；\n-v：显示版本信息；\n-z：尝试去解读压缩文件的内容。\n\n## 查找文件 find\n> -amin<分钟>：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；\n-anewer<参考文件或目录>：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；\n-atime<24小时数>：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；\n-cmin<分钟>：查找在指定时间之时被更改过的文件或目录；\n-cnewer<参考文件或目录>查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-ctime<24小时数>：查找在指定时间之时被更改的文件或目录，单位以24小时计算；\n-daystart：从本日开始计算时间；\n-depth：从指定目录下最深层的子目录开始查找；\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；\n-exec<执行指令>：假设find指令的回传值为True，就执行该指令；\n-false：将find指令的回传值皆设为False；\n-fls<列表文件>：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；\n-follow：排除符号连接；\n-fprint<列表文件>：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；\n-fprint0<列表文件>：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；\n-fprintf<列表文件><输出格式>：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；\n-fstype<文件系统类型>：只寻找该文件系统类型下的文件或目录；\n-gid<群组识别码>：查找符合指定之群组识别码的文件或目录；\n-group<群组名称>：查找符合指定之群组名称的文件或目录；\n-help或——help：在线帮助；\n-ilname<范本样式>：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；\n-iname<范本样式>：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；\n-inum<inode编号>：查找符合指定的inode编号的文件或目录；\n-ipath<范本样式>：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；\n-iregex<范本样式>：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；\n-links<连接数目>：查找符合指定的硬连接数目的文件或目录；\n-iname<范本样式>：指定字符串作为寻找符号连接的范本样式；\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；\n-maxdepth<目录层级>：设置最大目录层级；\n-mindepth<目录层级>：设置最小目录层级；\n-mmin<分钟>：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；\n-mount：此参数的效果和指定“-xdev”相同；\n-mtime<24小时数>：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；\n-name<范本样式>：指定字符串作为寻找文件或目录的范本样式；\n-newer<参考文件或目录>：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-nogroup：找出不属于本地主机群组识别码的文件或目录；\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；\n-nouser：找出不属于本地主机用户识别码的文件或目录；\n-ok<执行指令>：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；\n-path<范本样式>：指定字符串作为寻找目录的范本样式；\n-perm<权限数值>：查找符合指定的权限数值的文件或目录；\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；\n-printf<输出格式>：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；\n-prune：不寻找字符串作为寻找文件或目录的范本样式;\n-regex<范本样式>：指定字符串作为寻找文件或目录的范本样式；\n-size<文件大小>：查找符合指定的文件大小的文件；\n-true：将find指令的回传值皆设为True；\n-typ<文件类型>：只寻找符合指定的文件类型的文件；\n-uid<用户识别码>：查找符合指定的用户识别码的文件或目录；\n-used<日数>：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；\n-user<拥有者名称>：查找符和指定的拥有者名称的文件或目录；\n-version或——version：显示版本信息；\n-xdev：将范围局限在先行的文件系统中；\n-xtype<文件类型>：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。\n\n示例\n查找当前文件夹及子文件夹下的所有文件和文件夹\n\n```\nfind .\n```\n\n查找 /etc下文件后缀为 **.conf** 的文件\n\n```\nfind /etc -name '*.conf'\n```\n忽略大小写\n\n```\nfind /etc -iname '*.conf'\n```\n查找当前文件夹及子文件夹下后缀名为 **.conf** 或 **.txt** 的文件，（**括号两边有空格哦**）\n```\nfind . \\( -name \"*.conf\" -o -name \"*.txt\" \\)\n```\n匹配路径或文件（路径中有local或文件名含local）\n\n```\nfind /usr/ -path \"*local\"\n```\n正则表达式匹配路径\n\n```\nfind . -regex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n同上，忽略大小写\n\n```\nfind . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n查询 **/etc** 下不是以 **.conf** 结尾的文件\n\n```\nfind /etc ! -name \"*.conf\"\n```\n根据文件类型查找\n\n```\nfind -type 类型参数\n```\n类型参数：\n>  f 普通文件\n    l 符号连接\n    d 目录\n    c 字符设备\n    b 块设备\n    s 套接字\n    p Fifo\n\n列出所有文件\n```\nfind -type f  \n```\n向下最大深度限制为3\n\n```\nfind -maxdepth 3 -type f\n```\n搜索出深度距离当前目录至少2个子目录的所有文件\n\n```\nfind -mindepth -type f\n```\n\n#### 根据时间戳查找文件\n\n UNIX/Linux文件系统每个文件都有三种时间戳：\n\n    访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\n    修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n    变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n\n查找7天内修改过的文件\n\n```\nfind -type f -atime -7\n```\n修改时间正好是7天的文件\n\n```\nfind -type f -atime 7\n```\n\n查找修改时间大于7天的所有文件\n\n```\nfind -type f atime +7\n```\n\n查找访问时间在60分钟以内的文件\n\n```\nfind -type f -amin -60\n```\n#### 根据文件大小匹配\n\n```\nfind . -type f size 文件大小\n```\n 文件大小单元：\n\n    b —— 块（512字节）\n    c —— 字节\n    w —— 字（2字节）\n    k —— 千字节\n    M —— 兆字节\n    G —— 吉字节\n\n搜索大于10k的所有文件\n\n```\nfind -type f -size 10k\n```\n\n#### 删除匹配文件\n\n```\nfind -type f -name '*.txt' -delete\n```\n#### 根据文件权限/所有权匹配\n\n```\nfind -type f -perm 777\n```\n找出当前目录下权限 **不是** 644的sh文件\n```\nfind -type f  -name '*.sh' ! -perm 644\n```\n找出当前目录用户root拥有的所有文件\n\n```\nfind . -type f -user root\n```\n找出当前目录用户组sunk拥有的所有文件\n\n```\nfind . -type f -group sunk\n```\n\n## 过滤 grep\n过滤出 /etc/passwd 文件中包含 root 的记录\n```\ngrep 'root' /etc/passwd\n```\n递归地过滤出 /var/log/ 目录中包含 linux 的记录\n\n```\ngrep -r 'linux' /var/log/\n```\n## 管道 |\n> 简单来说, Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |\n\n比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起\n\n```\ncat /etc/passwd | grep 'root'\n```\n过滤出 /etc 目录中名字包含 ssh 的目录(不包括子目录)\n\n```\nls /etc | grep 'ssh'\n```\n\n### 重定向 > <\n> 可以使用 > 或 < 将命令的输出重定向到一个文件中\n\n```\necho 'Hello World' > ~/test.txt\n```\n\n## 运维常用命令\n### ping\n对 cloud.tencent.com 发送 4 个 ping 包, 检查与其是否联通\n```\nping -c 4 www.baidu.com\n```\n### netstat 命令\n> netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等\n\n列出所有处于监听状态的tcp端口\n\n```\nnetstat -lt\n```\n查看所有的端口信息, 包括 PID 和进程名称\n\n```\nnetstat -tulpn\n```\n\n","slug":"Linux简单命令","published":1,"updated":"2019-04-20T12:32:52.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xta0023vq6bjq1x664u","content":"<h2 id=\"查看磁盘量-du\">查看磁盘量 du</h2>\n<p>参数</p>\n<blockquote>\n<p>-a或-all 显示目录中个别文件的大小。<br>\n-b或-bytes 显示目录或文件大小时，以byte为单位。<br>\n-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>\n-k或–kilobytes 以KB(1024bytes)为单位输出。<br>\n-m或–megabytes 以MB为单位输出。<br>\n-s或–summarize 仅显示总计，只列出最后加总的值。<br>\n-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>\n-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>\n-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>\n-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>\n-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>\n–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>\n-D或–dereference-args 显示指定符号链接的源文件大小。<br>\n-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>\n-l或–count-links 重复计算硬件链接的文件。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>示例</p>\n<p>查看当前目录中文件或目录所占空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du</span><br></pre></td></tr></table></figure>\n<p>以指定单位显示，不加任何参数则为k(1k = 1024byte)， -m 兆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -m</span><br></pre></td></tr></table></figure>\n<p>输出，最下面的一行是当前目录的总大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2\t./.openoffice/4/user</span><br><span class=\"line\">2\t./.openoffice/4</span><br><span class=\"line\">2\t./.openoffice</span><br><span class=\"line\">1\t./.pki/nssdb</span><br><span class=\"line\">1\t./.pki</span><br><span class=\"line\">1\t./.ure</span><br><span class=\"line\">506\t.</span><br></pre></td></tr></table></figure>\n<p>指定目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du etc</span><br></pre></td></tr></table></figure>\n<p>指定多个文件, 并以兆显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du file1 file2  -m</span><br></pre></td></tr></table></figure>\n<p>只显示总和的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -s</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件权限-chmod\">文件权限 chmod</h2>\n<p>chmod [cfvR] [–help] [–version] [ugoa] [±] [rwxX][…]</p>\n<blockquote>\n<p>-c : 若该档案权限确实已经更改，才显示其更改动作<br>\n-f : 若该档案权限无法被更改也不要显示错误讯息<br>\n-v : 显示权限变更的详细资料<br>\n-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>\n–help : 显示辅助说明<br>\n–version : 显示版本<br>\nu 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。<br>\n±增加或减去权限<br>\nr 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</p>\n</blockquote>\n<p>示例<br>\n将 text.txt 设为所有人可读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+r text.txt</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod ugo+r text.txt</span><br></pre></td></tr></table></figure>\n<p>将text1.txt、text2.txt设为拥有者和同一组的人可写，其他人不可写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod ug+w,o-w text1.txt text2.txt</span><br></pre></td></tr></table></figure>\n<p>将当前目录下的所有文件及子文件设为所有人可读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R a+w *</span><br></pre></td></tr></table></figure>\n<p>用数字表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw------- (600) -- 只有属主有读写权限。 </span><br><span class=\"line\">-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 </span><br><span class=\"line\">-rwx------ (700) -- 只有属主有读、写、执行权限。 </span><br><span class=\"line\">-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 </span><br><span class=\"line\">-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 </span><br><span class=\"line\">-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 </span><br><span class=\"line\">-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。</span><br></pre></td></tr></table></figure>\n<p>可执行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -x deploy.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./deploy.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"探测给定文件的类型-file\">探测给定文件的类型 file</h2>\n<blockquote>\n<p>-b：列出辨识结果时，不显示文件名称；<br>\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；<br>\n-f&lt;名称文件&gt;：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；<br>\n-L：直接显示符号连接所指向的文件类别；<br>\n-m&lt;魔法数字文件&gt;：指定魔法数字文件；<br>\n-v：显示版本信息；<br>\n-z：尝试去解读压缩文件的内容。</p>\n</blockquote>\n<h2 id=\"查找文件-find\">查找文件 find</h2>\n<blockquote>\n<p>-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；<br>\n-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；<br>\n-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；<br>\n-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；<br>\n-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>\n-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；<br>\n-daystart：从本日开始计算时间；<br>\n-depth：从指定目录下最深层的子目录开始查找；<br>\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；<br>\n-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；<br>\n-false：将find指令的回传值皆设为False；<br>\n-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；<br>\n-follow：排除符号连接；<br>\n-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；<br>\n-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；<br>\n-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；<br>\n-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；<br>\n-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；<br>\n-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；<br>\n-help或——help：在线帮助；<br>\n-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；<br>\n-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；<br>\n-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；<br>\n-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；<br>\n-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；<br>\n-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；<br>\n-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；<br>\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；<br>\n-maxdepth&lt;目录层级&gt;：设置最大目录层级；<br>\n-mindepth&lt;目录层级&gt;：设置最小目录层级；<br>\n-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；<br>\n-mount：此参数的效果和指定“-xdev”相同；<br>\n-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；<br>\n-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>\n-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>\n-nogroup：找出不属于本地主机群组识别码的文件或目录；<br>\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；<br>\n-nouser：找出不属于本地主机用户识别码的文件或目录；<br>\n-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；<br>\n-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；<br>\n-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；<br>\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；<br>\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；<br>\n-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；<br>\n-prune：不寻找字符串作为寻找文件或目录的范本样式;<br>\n-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>\n-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；<br>\n-true：将find指令的回传值皆设为True；<br>\n-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；<br>\n-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；<br>\n-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；<br>\n-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；<br>\n-version或——version：显示版本信息；<br>\n-xdev：将范围局限在先行的文件系统中；<br>\n-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</p>\n</blockquote>\n<p>示例<br>\n查找当前文件夹及子文件夹下的所有文件和文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .</span><br></pre></td></tr></table></figure>\n<p>查找 /etc下文件后缀为 <strong>.conf</strong> 的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -name &apos;*.conf&apos;</span><br></pre></td></tr></table></figure>\n<p>忽略大小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -iname &apos;*.conf&apos;</span><br></pre></td></tr></table></figure>\n<p>查找当前文件夹及子文件夹下后缀名为 <strong>.conf</strong> 或 <strong>.txt</strong> 的文件，（<strong>括号两边有空格哦</strong>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . \\( -name &quot;*.conf&quot; -o -name &quot;*.txt&quot; \\)</span><br></pre></td></tr></table></figure>\n<p>匹配路径或文件（路径中有local或文件名含local）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /usr/ -path &quot;*local&quot;</span><br></pre></td></tr></table></figure>\n<p>正则表达式匹配路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，忽略大小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>查询 <strong>/etc</strong> 下不是以 <strong>.conf</strong> 结尾的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc ! -name &quot;*.conf&quot;</span><br></pre></td></tr></table></figure>\n<p>根据文件类型查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type 类型参数</span><br></pre></td></tr></table></figure>\n<p>类型参数：</p>\n<blockquote>\n<p>f 普通文件<br>\nl 符号连接<br>\nd 目录<br>\nc 字符设备<br>\nb 块设备<br>\ns 套接字<br>\np Fifo</p>\n</blockquote>\n<p>列出所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f</span><br></pre></td></tr></table></figure>\n<p>向下最大深度限制为3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>\n<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -mindepth -type f</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据时间戳查找文件\">根据时间戳查找文件</h4>\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<pre><code>访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\n修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n</code></pre>\n<p>查找7天内修改过的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -atime -7</span><br></pre></td></tr></table></figure>\n<p>修改时间正好是7天的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -atime 7</span><br></pre></td></tr></table></figure>\n<p>查找修改时间大于7天的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f atime +7</span><br></pre></td></tr></table></figure>\n<p>查找访问时间在60分钟以内的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -amin -60</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据文件大小匹配\">根据文件大小匹配</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f size 文件大小</span><br></pre></td></tr></table></figure>\n<p>文件大小单元：</p>\n<pre><code>b —— 块（512字节）\nc —— 字节\nw —— 字（2字节）\nk —— 千字节\nM —— 兆字节\nG —— 吉字节\n</code></pre>\n<p>搜索大于10k的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -size 10k</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除匹配文件\">删除匹配文件</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -name &apos;*.txt&apos; -delete</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据文件权限所有权匹配\">根据文件权限/所有权匹配</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -perm 777</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下权限 <strong>不是</strong> 644的sh文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f  -name &apos;*.sh&apos; ! -perm 644</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户root拥有的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -user root</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户组sunk拥有的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -group sunk</span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤-grep\">过滤 grep</h2>\n<p>过滤出 /etc/passwd 文件中包含 root 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &apos;root&apos; /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>递归地过滤出 /var/log/ 目录中包含 linux 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -r &apos;linux&apos; /var/log/</span><br></pre></td></tr></table></figure>\n<h2 id=\"管道\">管道 |</h2>\n<blockquote>\n<p>简单来说, Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |</p>\n</blockquote>\n<p>比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd | grep &apos;root&apos;</span><br></pre></td></tr></table></figure>\n<p>过滤出 /etc 目录中名字包含 ssh 的目录(不包括子目录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /etc | grep &apos;ssh&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向-gt-lt\">重定向 &gt; &lt;</h3>\n<blockquote>\n<p>可以使用 &gt; 或 &lt; 将命令的输出重定向到一个文件中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;Hello World&apos; &gt; ~/test.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"运维常用命令\">运维常用命令</h2>\n<h3 id=\"ping\">ping</h3>\n<p>对 <a href=\"http://cloud.tencent.com\" target=\"_blank\" rel=\"noopener\">cloud.tencent.com</a> 发送 4 个 ping 包, 检查与其是否联通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -c 4 www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"netstat-命令\">netstat 命令</h3>\n<blockquote>\n<p>netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等</p>\n</blockquote>\n<p>列出所有处于监听状态的tcp端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lt</span><br></pre></td></tr></table></figure>\n<p>查看所有的端口信息, 包括 PID 和进程名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tulpn</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2>查看磁盘量 du</h2>\n<p>参数</p>\n<blockquote>\n<p>-a或-all 显示目录中个别文件的大小。<br>\n-b或-bytes 显示目录或文件大小时，以byte为单位。<br>\n-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>\n-k或–kilobytes 以KB(1024bytes)为单位输出。<br>\n-m或–megabytes 以MB为单位输出。<br>\n-s或–summarize 仅显示总计，只列出最后加总的值。<br>\n-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>\n-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>\n-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>\n-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>\n-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>\n–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>\n-D或–dereference-args 显示指定符号链接的源文件大小。<br>\n-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>\n-l或–count-links 重复计算硬件链接的文件。</p>\n</blockquote>","more":"<p>示例</p>\n<p>查看当前目录中文件或目录所占空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du</span><br></pre></td></tr></table></figure>\n<p>以指定单位显示，不加任何参数则为k(1k = 1024byte)， -m 兆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -m</span><br></pre></td></tr></table></figure>\n<p>输出，最下面的一行是当前目录的总大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2\t./.openoffice/4/user</span><br><span class=\"line\">2\t./.openoffice/4</span><br><span class=\"line\">2\t./.openoffice</span><br><span class=\"line\">1\t./.pki/nssdb</span><br><span class=\"line\">1\t./.pki</span><br><span class=\"line\">1\t./.ure</span><br><span class=\"line\">506\t.</span><br></pre></td></tr></table></figure>\n<p>指定目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du etc</span><br></pre></td></tr></table></figure>\n<p>指定多个文件, 并以兆显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du file1 file2  -m</span><br></pre></td></tr></table></figure>\n<p>只显示总和的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -s</span><br></pre></td></tr></table></figure>\n<h2>文件权限 chmod</h2>\n<p>chmod [cfvR] [–help] [–version] [ugoa] [±] [rwxX][…]</p>\n<blockquote>\n<p>-c : 若该档案权限确实已经更改，才显示其更改动作<br>\n-f : 若该档案权限无法被更改也不要显示错误讯息<br>\n-v : 显示权限变更的详细资料<br>\n-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>\n–help : 显示辅助说明<br>\n–version : 显示版本<br>\nu 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。<br>\n±增加或减去权限<br>\nr 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</p>\n</blockquote>\n<p>示例<br>\n将 text.txt 设为所有人可读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+r text.txt</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod ugo+r text.txt</span><br></pre></td></tr></table></figure>\n<p>将text1.txt、text2.txt设为拥有者和同一组的人可写，其他人不可写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod ug+w,o-w text1.txt text2.txt</span><br></pre></td></tr></table></figure>\n<p>将当前目录下的所有文件及子文件设为所有人可读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R a+w *</span><br></pre></td></tr></table></figure>\n<p>用数字表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw------- (600) -- 只有属主有读写权限。 </span><br><span class=\"line\">-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 </span><br><span class=\"line\">-rwx------ (700) -- 只有属主有读、写、执行权限。 </span><br><span class=\"line\">-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 </span><br><span class=\"line\">-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 </span><br><span class=\"line\">-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 </span><br><span class=\"line\">-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。</span><br></pre></td></tr></table></figure>\n<p>可执行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -x deploy.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./deploy.sh</span><br></pre></td></tr></table></figure>\n<h2>探测给定文件的类型 file</h2>\n<blockquote>\n<p>-b：列出辨识结果时，不显示文件名称；<br>\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；<br>\n-f&lt;名称文件&gt;：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；<br>\n-L：直接显示符号连接所指向的文件类别；<br>\n-m&lt;魔法数字文件&gt;：指定魔法数字文件；<br>\n-v：显示版本信息；<br>\n-z：尝试去解读压缩文件的内容。</p>\n</blockquote>\n<h2>查找文件 find</h2>\n<blockquote>\n<p>-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；<br>\n-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；<br>\n-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；<br>\n-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；<br>\n-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>\n-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；<br>\n-daystart：从本日开始计算时间；<br>\n-depth：从指定目录下最深层的子目录开始查找；<br>\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；<br>\n-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；<br>\n-false：将find指令的回传值皆设为False；<br>\n-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；<br>\n-follow：排除符号连接；<br>\n-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；<br>\n-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；<br>\n-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；<br>\n-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；<br>\n-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；<br>\n-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；<br>\n-help或——help：在线帮助；<br>\n-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；<br>\n-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；<br>\n-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；<br>\n-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；<br>\n-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；<br>\n-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；<br>\n-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；<br>\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；<br>\n-maxdepth&lt;目录层级&gt;：设置最大目录层级；<br>\n-mindepth&lt;目录层级&gt;：设置最小目录层级；<br>\n-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；<br>\n-mount：此参数的效果和指定“-xdev”相同；<br>\n-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；<br>\n-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>\n-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；<br>\n-nogroup：找出不属于本地主机群组识别码的文件或目录；<br>\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；<br>\n-nouser：找出不属于本地主机用户识别码的文件或目录；<br>\n-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；<br>\n-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；<br>\n-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；<br>\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；<br>\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；<br>\n-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；<br>\n-prune：不寻找字符串作为寻找文件或目录的范本样式;<br>\n-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；<br>\n-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；<br>\n-true：将find指令的回传值皆设为True；<br>\n-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；<br>\n-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；<br>\n-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；<br>\n-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；<br>\n-version或——version：显示版本信息；<br>\n-xdev：将范围局限在先行的文件系统中；<br>\n-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</p>\n</blockquote>\n<p>示例<br>\n查找当前文件夹及子文件夹下的所有文件和文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .</span><br></pre></td></tr></table></figure>\n<p>查找 /etc下文件后缀为 <strong>.conf</strong> 的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -name &apos;*.conf&apos;</span><br></pre></td></tr></table></figure>\n<p>忽略大小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -iname &apos;*.conf&apos;</span><br></pre></td></tr></table></figure>\n<p>查找当前文件夹及子文件夹下后缀名为 <strong>.conf</strong> 或 <strong>.txt</strong> 的文件，（<strong>括号两边有空格哦</strong>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . \\( -name &quot;*.conf&quot; -o -name &quot;*.txt&quot; \\)</span><br></pre></td></tr></table></figure>\n<p>匹配路径或文件（路径中有local或文件名含local）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /usr/ -path &quot;*local&quot;</span><br></pre></td></tr></table></figure>\n<p>正则表达式匹配路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，忽略大小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>查询 <strong>/etc</strong> 下不是以 <strong>.conf</strong> 结尾的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc ! -name &quot;*.conf&quot;</span><br></pre></td></tr></table></figure>\n<p>根据文件类型查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type 类型参数</span><br></pre></td></tr></table></figure>\n<p>类型参数：</p>\n<blockquote>\n<p>f 普通文件<br>\nl 符号连接<br>\nd 目录<br>\nc 字符设备<br>\nb 块设备<br>\ns 套接字<br>\np Fifo</p>\n</blockquote>\n<p>列出所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f</span><br></pre></td></tr></table></figure>\n<p>向下最大深度限制为3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>\n<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -mindepth -type f</span><br></pre></td></tr></table></figure>\n<h4>根据时间戳查找文件</h4>\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<pre><code>访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\n修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n</code></pre>\n<p>查找7天内修改过的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -atime -7</span><br></pre></td></tr></table></figure>\n<p>修改时间正好是7天的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -atime 7</span><br></pre></td></tr></table></figure>\n<p>查找修改时间大于7天的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f atime +7</span><br></pre></td></tr></table></figure>\n<p>查找访问时间在60分钟以内的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -amin -60</span><br></pre></td></tr></table></figure>\n<h4>根据文件大小匹配</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f size 文件大小</span><br></pre></td></tr></table></figure>\n<p>文件大小单元：</p>\n<pre><code>b —— 块（512字节）\nc —— 字节\nw —— 字（2字节）\nk —— 千字节\nM —— 兆字节\nG —— 吉字节\n</code></pre>\n<p>搜索大于10k的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -size 10k</span><br></pre></td></tr></table></figure>\n<h4>删除匹配文件</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -name &apos;*.txt&apos; -delete</span><br></pre></td></tr></table></figure>\n<h4>根据文件权限/所有权匹配</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f -perm 777</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下权限 <strong>不是</strong> 644的sh文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -type f  -name &apos;*.sh&apos; ! -perm 644</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户root拥有的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -user root</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户组sunk拥有的所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -group sunk</span><br></pre></td></tr></table></figure>\n<h2>过滤 grep</h2>\n<p>过滤出 /etc/passwd 文件中包含 root 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &apos;root&apos; /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>递归地过滤出 /var/log/ 目录中包含 linux 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -r &apos;linux&apos; /var/log/</span><br></pre></td></tr></table></figure>\n<h2>管道 |</h2>\n<blockquote>\n<p>简单来说, Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |</p>\n</blockquote>\n<p>比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd | grep &apos;root&apos;</span><br></pre></td></tr></table></figure>\n<p>过滤出 /etc 目录中名字包含 ssh 的目录(不包括子目录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /etc | grep &apos;ssh&apos;</span><br></pre></td></tr></table></figure>\n<h3>重定向 &gt; &lt;</h3>\n<blockquote>\n<p>可以使用 &gt; 或 &lt; 将命令的输出重定向到一个文件中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;Hello World&apos; &gt; ~/test.txt</span><br></pre></td></tr></table></figure>\n<h2>运维常用命令</h2>\n<h3>ping</h3>\n<p>对 <a href=\"http://cloud.tencent.com\" target=\"_blank\" rel=\"noopener\">cloud.tencent.com</a> 发送 4 个 ping 包, 检查与其是否联通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -c 4 www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3>netstat 命令</h3>\n<blockquote>\n<p>netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等</p>\n</blockquote>\n<p>列出所有处于监听状态的tcp端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lt</span><br></pre></td></tr></table></figure>\n<p>查看所有的端口信息, 包括 PID 和进程名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tulpn</span><br></pre></td></tr></table></figure>"},{"title":"Netty中的ChannelHandler","_content":"<!-- more -->\n#### FixedLengthFrameDecoder\n> 数据包长度固定，解决拆包粘包\n例如：一个modbus协议， 指令为如下，有 ***12个*** 字节 \n```\n   00 00   00 00   00 06     FF      03    00 01     00 00\n  | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|\n```\n使用：\n\n```\nchannel.pipeline().addLast(new FixedLengthFrameDecoder(frameLength));\n```\n#### ReadTimeoutHandler\n> 读取数据超时处理, tcp长连接中常用\n\n使用：\n\n```\nint timeoutSeconds = 10;\nchannel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(timeoutSeconds));\n```\n\n#### JsonObjectDecoder\n> JSON格式的数据包，解决拆包粘包问题\n\n使用：\n1. 不带构造方法的，数据包大小为 1048576 字节 = 1M。\n```\nchannel.pipeline().addLast(new JsonObjectDecoder());\n```\n2. 如果JSON文件较大，比如包含多张Base64的图片，那么用无参构造就会出现收不到数据的情况，此时需要用有参构造\n\n```\n// JSON文件最大为10M\nchannel.pipeline().addLast(new JsonObjectDecoder(1048576 * 10));\n```\n\npom.xml\n\n```\n\t<dependency>\n\t\t<groupId>io.netty</groupId>\n\t\t<artifactId>netty-all</artifactId>\n\t\t<version>4.1.30.Final</version>\n\t</dependency>\n```\n\n","source":"_posts/Netty中的ChannelHandler.md","raw":"---\ntitle: Netty中的ChannelHandler\ncategories: Netty\ntags: netty\n---\n<!-- more -->\n#### FixedLengthFrameDecoder\n> 数据包长度固定，解决拆包粘包\n例如：一个modbus协议， 指令为如下，有 ***12个*** 字节 \n```\n   00 00   00 00   00 06     FF      03    00 01     00 00\n  | 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|\n```\n使用：\n\n```\nchannel.pipeline().addLast(new FixedLengthFrameDecoder(frameLength));\n```\n#### ReadTimeoutHandler\n> 读取数据超时处理, tcp长连接中常用\n\n使用：\n\n```\nint timeoutSeconds = 10;\nchannel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(timeoutSeconds));\n```\n\n#### JsonObjectDecoder\n> JSON格式的数据包，解决拆包粘包问题\n\n使用：\n1. 不带构造方法的，数据包大小为 1048576 字节 = 1M。\n```\nchannel.pipeline().addLast(new JsonObjectDecoder());\n```\n2. 如果JSON文件较大，比如包含多张Base64的图片，那么用无参构造就会出现收不到数据的情况，此时需要用有参构造\n\n```\n// JSON文件最大为10M\nchannel.pipeline().addLast(new JsonObjectDecoder(1048576 * 10));\n```\n\npom.xml\n\n```\n\t<dependency>\n\t\t<groupId>io.netty</groupId>\n\t\t<artifactId>netty-all</artifactId>\n\t\t<version>4.1.30.Final</version>\n\t</dependency>\n```\n\n","slug":"Netty中的ChannelHandler","published":1,"date":"2019-04-20T12:20:10.470Z","updated":"2019-04-20T12:20:10.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtb0028vq6bbjqhq7d3","content":"<a id=\"more\"></a>\n<h4 id=\"fixedlengthframedecoder\">FixedLengthFrameDecoder</h4>\n<blockquote>\n<p>数据包长度固定，解决拆包粘包<br>\n例如：一个modbus协议， 指令为如下，有 <strong><em>12个</em></strong> 字节</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 00 00   00 00   00 06     FF      03    00 01     00 00</span><br><span class=\"line\">| 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.pipeline().addLast(new FixedLengthFrameDecoder(frameLength));</span><br></pre></td></tr></table></figure>\n<h4 id=\"readtimeouthandler\">ReadTimeoutHandler</h4>\n<blockquote>\n<p>读取数据超时处理, tcp长连接中常用</p>\n</blockquote>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int timeoutSeconds = 10;</span><br><span class=\"line\">channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(timeoutSeconds));</span><br></pre></td></tr></table></figure>\n<h4 id=\"jsonobjectdecoder\">JsonObjectDecoder</h4>\n<blockquote>\n<p>JSON格式的数据包，解决拆包粘包问题</p>\n</blockquote>\n<p>使用：</p>\n<ol>\n<li>不带构造方法的，数据包大小为 1048576 字节 = 1M。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.pipeline().addLast(new JsonObjectDecoder());</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果JSON文件较大，比如包含多张Base64的图片，那么用无参构造就会出现收不到数据的情况，此时需要用有参构造</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JSON文件最大为10M</span><br><span class=\"line\">channel.pipeline().addLast(new JsonObjectDecoder(1048576 * 10));</span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.1.30.Final&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4>FixedLengthFrameDecoder</h4>\n<blockquote>\n<p>数据包长度固定，解决拆包粘包<br>\n例如：一个modbus协议， 指令为如下，有 <strong><em>12个</em></strong> 字节</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 00 00   00 00   00 06     FF      03    00 01     00 00</span><br><span class=\"line\">| 事务 |协议标识| 长度 | 单元标识 |功能码|起始地址|寄存器地址|</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.pipeline().addLast(new FixedLengthFrameDecoder(frameLength));</span><br></pre></td></tr></table></figure>\n<h4>ReadTimeoutHandler</h4>\n<blockquote>\n<p>读取数据超时处理, tcp长连接中常用</p>\n</blockquote>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int timeoutSeconds = 10;</span><br><span class=\"line\">channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(timeoutSeconds));</span><br></pre></td></tr></table></figure>\n<h4>JsonObjectDecoder</h4>\n<blockquote>\n<p>JSON格式的数据包，解决拆包粘包问题</p>\n</blockquote>\n<p>使用：</p>\n<ol>\n<li>不带构造方法的，数据包大小为 1048576 字节 = 1M。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.pipeline().addLast(new JsonObjectDecoder());</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果JSON文件较大，比如包含多张Base64的图片，那么用无参构造就会出现收不到数据的情况，此时需要用有参构造</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JSON文件最大为10M</span><br><span class=\"line\">channel.pipeline().addLast(new JsonObjectDecoder(1048576 * 10));</span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.1.30.Final&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>"},{"title":"MySQL慢查询日志总结","date":"2018-06-17T06:24:09.000Z","_content":"\n转自： https://www.cnblogs.com/saneri/p/6656161.html\n## 慢查询日志概念\nMySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10S以上的语句。默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。\n<!-- more -->\n## 慢查询日志相关参数\nMySQL 慢查询的相关参数解释：slow_query_log ：是否开启慢查询日志，1表示开启，0表示关闭。\n\n```\nslow_query_log    ：是否开启慢查询日志，1表示开启，0表示关闭。\nlog-slow-queries  ：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\nslow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\nlong_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。\nlog_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。\nlog_output：日志存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'。log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据<br>库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需<br>要能够获得更高的系统性能，那么建议优先记录到文件。\n```\n## 慢查询日志配置\n默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启，如下所示：\n\n```\nmysql> show variables like '%slow_query_log%';\n+---------------------+------------------------------------------+\n| Variable_name       | Value                                    |\n+---------------------+------------------------------------------+\n| slow_query_log      | OFF                                      |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+------------------------------------------+\n2 rows in set (0.00 sec)\n \nmysql> set global slow_query_log=1;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> show variables like '%slow_query_log%';\n+---------------------+------------------------------------------+\n| Variable_name       | Value                                    |\n+---------------------+------------------------------------------+\n| slow_query_log      | ON                                       |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+------------------------------------------+\n2 rows in set (0.00 sec)\n#使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此）\n```\n修改my.cnf文件，增加或修改参数slow_query_log 和slow_query_log_file后，然后重启MySQL服务器，如下所示:\n\n```\nslow_query_log =1\nslow_query_log_file=/usr/local/mysql/data/localhost-slow.log\n\nmysql> show variables like 'slow_query%';\n+---------------------+---------------------+\n| Variable_name       | Value               |\n+---------------------+---------------------+\n| slow_query_log      | ON                  |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+---------------------+\nrows in set (0.00 sec)\n \nmysql> \n#慢查询的参数slow_query_log_file ，它指定慢查询日志文件的存放路径，系统默认会给一个缺省的文件host_name-slow.log\n```\n  那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢？ 这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，可以使用命令修改，也可以在my.cnf参数里面修改。关于运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。从MySQL 5.1开始，long_query_time开始以微秒记录SQL语句运行时间，之前仅用秒为单位记录。如果记录到表里面，只会记录整数部分，不会记录微秒部分。\n  \n\n```\nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\n1 row in set (0.00 sec)\n \nmysql>\nmysql> set global long_query_time=4;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\n1 row in set (0.00 sec)\n \nmysql>\n```\n  如上所示，我修改了变量long_query_time，但是查询变量long_query_time的值还是10，难道没有修改到呢？注意：使用命令 set global long_query_time=4修改后，需要重新连接或新开一个会话才能看到修改值。你用show variables like 'long_query_time'查看是当前会话的变量值，你也可以不用重新连接会话，而是用show global variables like 'long_query_time'; 如下所示：　\n  \n\n```\nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\nrow in set (0.00 sec)\n\nmysql> \nmysql> show global variables like 'long_query_time';\n+-----------------+----------+\n| Variable_name   | Value    |\n+-----------------+----------+\n| long_query_time | 4.000000 |\n+-----------------+----------+\nrow in set (0.00 sec)\n\nmysql>\n```\nlog_output 参数是指定日志的存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'。log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件.\n\n```\nmysql> show variables like '%log_output%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| log_output    | TABLE |\n+---------------+-------+\n1 row in set (0.00 sec)\n \nmysql>\n```\n系统变量log-queries-not-using-indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。另外，开启了这个参数，其实使用full index scan的sql也会被记录到慢查询日志。\n\n```\nmysql> show variables like 'log_queries_not_using_indexes';\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| log_queries_not_using_indexes | OFF   |\n+-------------------------------+-------+\n1 row in set (0.00 sec)\n  \nmysql> set global log_queries_not_using_indexes=1;\nQuery OK, 0 rows affected (0.00 sec)\n  \nmysql> show variables like 'log_queries_not_using_indexes';\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| log_queries_not_using_indexes | ON    |\n+-------------------------------+-------+\n1 row in set (0.00 sec)\n  \nmysql>\n```\n系统变量log_slow_admin_statements表示是否将慢管理语句例如ANALYZE TABLE和ALTER TABLE等记入慢查询日志\n\n```\nmysql> show variables like 'log_slow_admin_statements';\n+---------------------------+-------+\n| Variable_name             | Value |\n+---------------------------+-------+\n| log_slow_admin_statements | OFF   |\n+---------------------------+-------+\nrow in set (0.00 sec)\n\nmysql>\n```\n另外，如果你想查询有多少条慢查询记录，可以使用系统变量。\n\n```\nmysql> show global status like '%slow_queries%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| Slow_queries  | 0     |\n+---------------+-------+\nrow in set (0.00 sec)\n\nmysql>\n```\n## 日志分析工具mysqldumpslow\n\n在实际生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow\n\n查看mysqldumpslow的帮助信息：\n\n```\n[root@localhost~]# mysqldumpslow --help\nUsage: mysqldumpslow [ OPTS... ] [ LOGS... ]\n\nParse and summarize the MySQL slow query log. Options are\n\n  --verbose    verbose\n  --debug      debug\n  --help       write this text to standard output\n\n  -v           verbose\n  -d           debug\n  -s ORDER     what to sort by (al, at, ar, c, l, r, t), 'at' is default\n                al: average lock time\n                ar: average rows sent\n                at: average query time\n                 c: count\n                 l: lock time\n                 r: rows sent\n                 t: query time  \n  -r           reverse the sort order (largest last instead of first)\n  -t NUM       just show the top n queries\n  -a           don't abstract all numbers to N and strings to 'S'\n  -n NUM       abstract numbers with at least n digits within names\n  -g PATTERN   grep: only consider stmts that include this string\n  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),\n               default is '*', i.e. match all\n  -i NAME      name of server instance (if using mysql.server startup script)\n  -l           don't subtract lock time from total time\n\nmysqldumpslow --help\n```\n\n```\n-s, 是表示按照何种方式排序\n    c: 访问计数\n \n    l: 锁定时间\n \n    r: 返回记录\n \n    t: 查询时间\n \n    al:平均锁定时间\n \n    ar:平均返回记录数\n \n    at:平均查询时间\n \n-t, 是top n的意思，即为返回前面多少条的数据；\n-g, 后边可以写一个正则匹配模式，大小写不敏感的；\n \n比如:\n得到返回记录集最多的10个SQL。\nmysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log\n \n得到访问次数最多的10个SQL\nmysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log\n \n得到按照时间排序的前10条里面含有左连接的查询语句。\nmysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log\n \n另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。\nmysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more\n```\n\n","source":"_posts/MySQL慢查询日志总结.md","raw":"---\ntitle: MySQL慢查询日志总结\ncategories: MySQL\ntags: mysql\ndate: 2018-06-17 14:24:09\n---\n\n转自： https://www.cnblogs.com/saneri/p/6656161.html\n## 慢查询日志概念\nMySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10S以上的语句。默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。\n<!-- more -->\n## 慢查询日志相关参数\nMySQL 慢查询的相关参数解释：slow_query_log ：是否开启慢查询日志，1表示开启，0表示关闭。\n\n```\nslow_query_log    ：是否开启慢查询日志，1表示开启，0表示关闭。\nlog-slow-queries  ：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\nslow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\nlong_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。\nlog_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。\nlog_output：日志存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'。log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据<br>库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需<br>要能够获得更高的系统性能，那么建议优先记录到文件。\n```\n## 慢查询日志配置\n默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启，如下所示：\n\n```\nmysql> show variables like '%slow_query_log%';\n+---------------------+------------------------------------------+\n| Variable_name       | Value                                    |\n+---------------------+------------------------------------------+\n| slow_query_log      | OFF                                      |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+------------------------------------------+\n2 rows in set (0.00 sec)\n \nmysql> set global slow_query_log=1;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> show variables like '%slow_query_log%';\n+---------------------+------------------------------------------+\n| Variable_name       | Value                                    |\n+---------------------+------------------------------------------+\n| slow_query_log      | ON                                       |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+------------------------------------------+\n2 rows in set (0.00 sec)\n#使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此）\n```\n修改my.cnf文件，增加或修改参数slow_query_log 和slow_query_log_file后，然后重启MySQL服务器，如下所示:\n\n```\nslow_query_log =1\nslow_query_log_file=/usr/local/mysql/data/localhost-slow.log\n\nmysql> show variables like 'slow_query%';\n+---------------------+---------------------+\n| Variable_name       | Value               |\n+---------------------+---------------------+\n| slow_query_log      | ON                  |\n| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |\n+---------------------+---------------------+\nrows in set (0.00 sec)\n \nmysql> \n#慢查询的参数slow_query_log_file ，它指定慢查询日志文件的存放路径，系统默认会给一个缺省的文件host_name-slow.log\n```\n  那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢？ 这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，可以使用命令修改，也可以在my.cnf参数里面修改。关于运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。从MySQL 5.1开始，long_query_time开始以微秒记录SQL语句运行时间，之前仅用秒为单位记录。如果记录到表里面，只会记录整数部分，不会记录微秒部分。\n  \n\n```\nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\n1 row in set (0.00 sec)\n \nmysql>\nmysql> set global long_query_time=4;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\n1 row in set (0.00 sec)\n \nmysql>\n```\n  如上所示，我修改了变量long_query_time，但是查询变量long_query_time的值还是10，难道没有修改到呢？注意：使用命令 set global long_query_time=4修改后，需要重新连接或新开一个会话才能看到修改值。你用show variables like 'long_query_time'查看是当前会话的变量值，你也可以不用重新连接会话，而是用show global variables like 'long_query_time'; 如下所示：　\n  \n\n```\nmysql> show variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\nrow in set (0.00 sec)\n\nmysql> \nmysql> show global variables like 'long_query_time';\n+-----------------+----------+\n| Variable_name   | Value    |\n+-----------------+----------+\n| long_query_time | 4.000000 |\n+-----------------+----------+\nrow in set (0.00 sec)\n\nmysql>\n```\nlog_output 参数是指定日志的存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'。log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件.\n\n```\nmysql> show variables like '%log_output%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| log_output    | TABLE |\n+---------------+-------+\n1 row in set (0.00 sec)\n \nmysql>\n```\n系统变量log-queries-not-using-indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。另外，开启了这个参数，其实使用full index scan的sql也会被记录到慢查询日志。\n\n```\nmysql> show variables like 'log_queries_not_using_indexes';\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| log_queries_not_using_indexes | OFF   |\n+-------------------------------+-------+\n1 row in set (0.00 sec)\n  \nmysql> set global log_queries_not_using_indexes=1;\nQuery OK, 0 rows affected (0.00 sec)\n  \nmysql> show variables like 'log_queries_not_using_indexes';\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| log_queries_not_using_indexes | ON    |\n+-------------------------------+-------+\n1 row in set (0.00 sec)\n  \nmysql>\n```\n系统变量log_slow_admin_statements表示是否将慢管理语句例如ANALYZE TABLE和ALTER TABLE等记入慢查询日志\n\n```\nmysql> show variables like 'log_slow_admin_statements';\n+---------------------------+-------+\n| Variable_name             | Value |\n+---------------------------+-------+\n| log_slow_admin_statements | OFF   |\n+---------------------------+-------+\nrow in set (0.00 sec)\n\nmysql>\n```\n另外，如果你想查询有多少条慢查询记录，可以使用系统变量。\n\n```\nmysql> show global status like '%slow_queries%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| Slow_queries  | 0     |\n+---------------+-------+\nrow in set (0.00 sec)\n\nmysql>\n```\n## 日志分析工具mysqldumpslow\n\n在实际生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow\n\n查看mysqldumpslow的帮助信息：\n\n```\n[root@localhost~]# mysqldumpslow --help\nUsage: mysqldumpslow [ OPTS... ] [ LOGS... ]\n\nParse and summarize the MySQL slow query log. Options are\n\n  --verbose    verbose\n  --debug      debug\n  --help       write this text to standard output\n\n  -v           verbose\n  -d           debug\n  -s ORDER     what to sort by (al, at, ar, c, l, r, t), 'at' is default\n                al: average lock time\n                ar: average rows sent\n                at: average query time\n                 c: count\n                 l: lock time\n                 r: rows sent\n                 t: query time  \n  -r           reverse the sort order (largest last instead of first)\n  -t NUM       just show the top n queries\n  -a           don't abstract all numbers to N and strings to 'S'\n  -n NUM       abstract numbers with at least n digits within names\n  -g PATTERN   grep: only consider stmts that include this string\n  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),\n               default is '*', i.e. match all\n  -i NAME      name of server instance (if using mysql.server startup script)\n  -l           don't subtract lock time from total time\n\nmysqldumpslow --help\n```\n\n```\n-s, 是表示按照何种方式排序\n    c: 访问计数\n \n    l: 锁定时间\n \n    r: 返回记录\n \n    t: 查询时间\n \n    al:平均锁定时间\n \n    ar:平均返回记录数\n \n    at:平均查询时间\n \n-t, 是top n的意思，即为返回前面多少条的数据；\n-g, 后边可以写一个正则匹配模式，大小写不敏感的；\n \n比如:\n得到返回记录集最多的10个SQL。\nmysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log\n \n得到访问次数最多的10个SQL\nmysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log\n \n得到按照时间排序的前10条里面含有左连接的查询语句。\nmysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log\n \n另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。\nmysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more\n```\n\n","slug":"MySQL慢查询日志总结","published":1,"updated":"2019-04-20T12:36:09.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtc002bvq6bm4s22dr2","content":"<p>转自： <a href=\"https://www.cnblogs.com/saneri/p/6656161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/saneri/p/6656161.html</a></p>\n<h2 id=\"慢查询日志概念\">慢查询日志概念</h2>\n<p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10S以上的语句。默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p>\n<a id=\"more\"></a>\n<h2 id=\"慢查询日志相关参数\">慢查询日志相关参数</h2>\n<p>MySQL 慢查询的相关参数解释：slow_query_log ：是否开启慢查询日志，1表示开启，0表示关闭。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log    ：是否开启慢查询日志，1表示开启，0表示关闭。</span><br><span class=\"line\">log-slow-queries  ：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">slow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">long_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。</span><br><span class=\"line\">log_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。</span><br><span class=\"line\">log_output：日志存储方式。log_output=&apos;FILE&apos;表示将日志存入文件，默认值是&apos;FILE&apos;。log_output=&apos;TABLE&apos;表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据&lt;br&gt;库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=&apos;FILE,TABLE&apos;。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需&lt;br&gt;要能够获得更高的系统性能，那么建议优先记录到文件。</span><br></pre></td></tr></table></figure>\n<h2 id=\"慢查询日志配置\">慢查询日志配置</h2>\n<p>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                    |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                      |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global slow_query_log=1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                    |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| slow_query_log      | ON                                       |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\">#使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此）</span><br></pre></td></tr></table></figure>\n<p>修改my.cnf文件，增加或修改参数slow_query_log 和slow_query_log_file后，然后重启MySQL服务器，如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log =1</span><br><span class=\"line\">slow_query_log_file=/usr/local/mysql/data/localhost-slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show variables like &apos;slow_query%&apos;;</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">| Variable_name       | Value               |</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">| slow_query_log      | ON                  |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">rows in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; </span><br><span class=\"line\">#慢查询的参数slow_query_log_file ，它指定慢查询日志文件的存放路径，系统默认会给一个缺省的文件host_name-slow.log</span><br></pre></td></tr></table></figure>\n<p>那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢？ 这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，可以使用命令修改，也可以在my.cnf参数里面修改。关于运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。从MySQL 5.1开始，long_query_time开始以微秒记录SQL语句运行时间，之前仅用秒为单位记录。如果记录到表里面，只会记录整数部分，不会记录微秒部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br><span class=\"line\">mysql&gt; set global long_query_time=4;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>如上所示，我修改了变量long_query_time，但是查询变量long_query_time的值还是10，难道没有修改到呢？注意：使用命令 set global long_query_time=4修改后，需要重新连接或新开一个会话才能看到修改值。你用show variables like 'long_query_time’查看是当前会话的变量值，你也可以不用重新连接会话，而是用show global variables like ‘long_query_time’; 如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; </span><br><span class=\"line\">mysql&gt; show global variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">| Variable_name   | Value    |</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">| long_query_time | 4.000000 |</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>log_output 参数是指定日志的存储方式。log_output=‘FILE’表示将日志存入文件，默认值是’FILE’。log_output='TABLE’表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=‘FILE,TABLE’。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%log_output%&apos;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| log_output    | TABLE |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>系统变量log-queries-not-using-indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。另外，开启了这个参数，其实使用full index scan的sql也会被记录到慢查询日志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;log_queries_not_using_indexes&apos;;</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| log_queries_not_using_indexes | OFF   |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt; set global log_queries_not_using_indexes=1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt; show variables like &apos;log_queries_not_using_indexes&apos;;</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| log_queries_not_using_indexes | ON    |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>系统变量log_slow_admin_statements表示是否将慢管理语句例如ANALYZE TABLE和ALTER TABLE等记入慢查询日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;log_slow_admin_statements&apos;;</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">| Variable_name             | Value |</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">| log_slow_admin_statements | OFF   |</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>另外，如果你想查询有多少条慢查询记录，可以使用系统变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global status like &apos;%slow_queries%&apos;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Slow_queries  | 0     |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"日志分析工具mysqldumpslow\">日志分析工具mysqldumpslow</h2>\n<p>在实际生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow</p>\n<p>查看mysqldumpslow的帮助信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost~]# mysqldumpslow --help</span><br><span class=\"line\">Usage: mysqldumpslow [ OPTS... ] [ LOGS... ]</span><br><span class=\"line\"></span><br><span class=\"line\">Parse and summarize the MySQL slow query log. Options are</span><br><span class=\"line\"></span><br><span class=\"line\">  --verbose    verbose</span><br><span class=\"line\">  --debug      debug</span><br><span class=\"line\">  --help       write this text to standard output</span><br><span class=\"line\"></span><br><span class=\"line\">  -v           verbose</span><br><span class=\"line\">  -d           debug</span><br><span class=\"line\">  -s ORDER     what to sort by (al, at, ar, c, l, r, t), &apos;at&apos; is default</span><br><span class=\"line\">                al: average lock time</span><br><span class=\"line\">                ar: average rows sent</span><br><span class=\"line\">                at: average query time</span><br><span class=\"line\">                 c: count</span><br><span class=\"line\">                 l: lock time</span><br><span class=\"line\">                 r: rows sent</span><br><span class=\"line\">                 t: query time  </span><br><span class=\"line\">  -r           reverse the sort order (largest last instead of first)</span><br><span class=\"line\">  -t NUM       just show the top n queries</span><br><span class=\"line\">  -a           don&apos;t abstract all numbers to N and strings to &apos;S&apos;</span><br><span class=\"line\">  -n NUM       abstract numbers with at least n digits within names</span><br><span class=\"line\">  -g PATTERN   grep: only consider stmts that include this string</span><br><span class=\"line\">  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),</span><br><span class=\"line\">               default is &apos;*&apos;, i.e. match all</span><br><span class=\"line\">  -i NAME      name of server instance (if using mysql.server startup script)</span><br><span class=\"line\">  -l           don&apos;t subtract lock time from total time</span><br><span class=\"line\"></span><br><span class=\"line\">mysqldumpslow --help</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s, 是表示按照何种方式排序</span><br><span class=\"line\">    c: 访问计数</span><br><span class=\"line\"> </span><br><span class=\"line\">    l: 锁定时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    r: 返回记录</span><br><span class=\"line\"> </span><br><span class=\"line\">    t: 查询时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    al:平均锁定时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    ar:平均返回记录数</span><br><span class=\"line\"> </span><br><span class=\"line\">    at:平均查询时间</span><br><span class=\"line\"> </span><br><span class=\"line\">-t, 是top n的意思，即为返回前面多少条的数据；</span><br><span class=\"line\">-g, 后边可以写一个正则匹配模式，大小写不敏感的；</span><br><span class=\"line\"> </span><br><span class=\"line\">比如:</span><br><span class=\"line\">得到返回记录集最多的10个SQL。</span><br><span class=\"line\">mysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">得到访问次数最多的10个SQL</span><br><span class=\"line\">mysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">得到按照时间排序的前10条里面含有左连接的查询语句。</span><br><span class=\"line\">mysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。</span><br><span class=\"line\">mysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>转自： <a href=\"https://www.cnblogs.com/saneri/p/6656161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/saneri/p/6656161.html</a></p>\n<h2>慢查询日志概念</h2>\n<p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10S以上的语句。默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p>","more":"<h2>慢查询日志相关参数</h2>\n<p>MySQL 慢查询的相关参数解释：slow_query_log ：是否开启慢查询日志，1表示开启，0表示关闭。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log    ：是否开启慢查询日志，1表示开启，0表示关闭。</span><br><span class=\"line\">log-slow-queries  ：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">slow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">long_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。</span><br><span class=\"line\">log_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。</span><br><span class=\"line\">log_output：日志存储方式。log_output=&apos;FILE&apos;表示将日志存入文件，默认值是&apos;FILE&apos;。log_output=&apos;TABLE&apos;表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据&lt;br&gt;库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=&apos;FILE,TABLE&apos;。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需&lt;br&gt;要能够获得更高的系统性能，那么建议优先记录到文件。</span><br></pre></td></tr></table></figure>\n<h2>慢查询日志配置</h2>\n<p>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                    |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                      |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global slow_query_log=1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                    |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">| slow_query_log      | ON                                       |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+------------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\">#使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此）</span><br></pre></td></tr></table></figure>\n<p>修改my.cnf文件，增加或修改参数slow_query_log 和slow_query_log_file后，然后重启MySQL服务器，如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log =1</span><br><span class=\"line\">slow_query_log_file=/usr/local/mysql/data/localhost-slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show variables like &apos;slow_query%&apos;;</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">| Variable_name       | Value               |</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">| slow_query_log      | ON                  |</span><br><span class=\"line\">| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |</span><br><span class=\"line\">+---------------------+---------------------+</span><br><span class=\"line\">rows in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; </span><br><span class=\"line\">#慢查询的参数slow_query_log_file ，它指定慢查询日志文件的存放路径，系统默认会给一个缺省的文件host_name-slow.log</span><br></pre></td></tr></table></figure>\n<p>那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢？ 这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，可以使用命令修改，也可以在my.cnf参数里面修改。关于运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。从MySQL 5.1开始，long_query_time开始以微秒记录SQL语句运行时间，之前仅用秒为单位记录。如果记录到表里面，只会记录整数部分，不会记录微秒部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br><span class=\"line\">mysql&gt; set global long_query_time=4;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>如上所示，我修改了变量long_query_time，但是查询变量long_query_time的值还是10，难道没有修改到呢？注意：使用命令 set global long_query_time=4修改后，需要重新连接或新开一个会话才能看到修改值。你用show variables like 'long_query_time’查看是当前会话的变量值，你也可以不用重新连接会话，而是用show global variables like ‘long_query_time’; 如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| Variable_name   | Value     |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">| long_query_time | 10.000000 |</span><br><span class=\"line\">+-----------------+-----------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; </span><br><span class=\"line\">mysql&gt; show global variables like &apos;long_query_time&apos;;</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">| Variable_name   | Value    |</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">| long_query_time | 4.000000 |</span><br><span class=\"line\">+-----------------+----------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>log_output 参数是指定日志的存储方式。log_output=‘FILE’表示将日志存入文件，默认值是’FILE’。log_output='TABLE’表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=‘FILE,TABLE’。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%log_output%&apos;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| log_output    | TABLE |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>系统变量log-queries-not-using-indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。另外，开启了这个参数，其实使用full index scan的sql也会被记录到慢查询日志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;log_queries_not_using_indexes&apos;;</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| log_queries_not_using_indexes | OFF   |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt; set global log_queries_not_using_indexes=1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt; show variables like &apos;log_queries_not_using_indexes&apos;;</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| log_queries_not_using_indexes | ON    |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">  </span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>系统变量log_slow_admin_statements表示是否将慢管理语句例如ANALYZE TABLE和ALTER TABLE等记入慢查询日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;log_slow_admin_statements&apos;;</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">| Variable_name             | Value |</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">| log_slow_admin_statements | OFF   |</span><br><span class=\"line\">+---------------------------+-------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>另外，如果你想查询有多少条慢查询记录，可以使用系统变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global status like &apos;%slow_queries%&apos;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Slow_queries  | 0     |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<h2>日志分析工具mysqldumpslow</h2>\n<p>在实际生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow</p>\n<p>查看mysqldumpslow的帮助信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost~]# mysqldumpslow --help</span><br><span class=\"line\">Usage: mysqldumpslow [ OPTS... ] [ LOGS... ]</span><br><span class=\"line\"></span><br><span class=\"line\">Parse and summarize the MySQL slow query log. Options are</span><br><span class=\"line\"></span><br><span class=\"line\">  --verbose    verbose</span><br><span class=\"line\">  --debug      debug</span><br><span class=\"line\">  --help       write this text to standard output</span><br><span class=\"line\"></span><br><span class=\"line\">  -v           verbose</span><br><span class=\"line\">  -d           debug</span><br><span class=\"line\">  -s ORDER     what to sort by (al, at, ar, c, l, r, t), &apos;at&apos; is default</span><br><span class=\"line\">                al: average lock time</span><br><span class=\"line\">                ar: average rows sent</span><br><span class=\"line\">                at: average query time</span><br><span class=\"line\">                 c: count</span><br><span class=\"line\">                 l: lock time</span><br><span class=\"line\">                 r: rows sent</span><br><span class=\"line\">                 t: query time  </span><br><span class=\"line\">  -r           reverse the sort order (largest last instead of first)</span><br><span class=\"line\">  -t NUM       just show the top n queries</span><br><span class=\"line\">  -a           don&apos;t abstract all numbers to N and strings to &apos;S&apos;</span><br><span class=\"line\">  -n NUM       abstract numbers with at least n digits within names</span><br><span class=\"line\">  -g PATTERN   grep: only consider stmts that include this string</span><br><span class=\"line\">  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),</span><br><span class=\"line\">               default is &apos;*&apos;, i.e. match all</span><br><span class=\"line\">  -i NAME      name of server instance (if using mysql.server startup script)</span><br><span class=\"line\">  -l           don&apos;t subtract lock time from total time</span><br><span class=\"line\"></span><br><span class=\"line\">mysqldumpslow --help</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s, 是表示按照何种方式排序</span><br><span class=\"line\">    c: 访问计数</span><br><span class=\"line\"> </span><br><span class=\"line\">    l: 锁定时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    r: 返回记录</span><br><span class=\"line\"> </span><br><span class=\"line\">    t: 查询时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    al:平均锁定时间</span><br><span class=\"line\"> </span><br><span class=\"line\">    ar:平均返回记录数</span><br><span class=\"line\"> </span><br><span class=\"line\">    at:平均查询时间</span><br><span class=\"line\"> </span><br><span class=\"line\">-t, 是top n的意思，即为返回前面多少条的数据；</span><br><span class=\"line\">-g, 后边可以写一个正则匹配模式，大小写不敏感的；</span><br><span class=\"line\"> </span><br><span class=\"line\">比如:</span><br><span class=\"line\">得到返回记录集最多的10个SQL。</span><br><span class=\"line\">mysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">得到访问次数最多的10个SQL</span><br><span class=\"line\">mysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">得到按照时间排序的前10条里面含有左连接的查询语句。</span><br><span class=\"line\">mysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。</span><br><span class=\"line\">mysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more</span><br></pre></td></tr></table></figure>"},{"title":"MySQL性能优化","date":"2018-12-29T10:30:50.000Z","_content":"\n\n* 【很实用】mysql慢查询 https://www.cnblogs.com/sunke/p/5779230.html\n<!-- more -->\n> \n> SHOW VARIABLES LIKE '%slow%'\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173750352.png)\n> SET  @@global.slow_query_log = ON;\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173822632.png)\n> SET @@global.log_output='TABLE';\n> 可以查看慢查询的语句，包含慢查询的SQL、执行时间、频率等\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173915569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n> SET GLOBAL long_query_time = 2\n> 设置大于long_query_time秒的查询\n模拟一下\n> SELECT SLEEP(10);\n\n\n\n*【很实用】MySQL优化技巧：https://blog.csdn.net/u013087513/article/details/77899412\n","source":"_posts/MySQL性能优化.md","raw":"---\ntitle: MySQL性能优化\ncategories: MySQL\ntags: mysql\ndate: 2018-12-29 18:30:50\n---\n\n\n* 【很实用】mysql慢查询 https://www.cnblogs.com/sunke/p/5779230.html\n<!-- more -->\n> \n> SHOW VARIABLES LIKE '%slow%'\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173750352.png)\n> SET  @@global.slow_query_log = ON;\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173822632.png)\n> SET @@global.log_output='TABLE';\n> 可以查看慢查询的语句，包含慢查询的SQL、执行时间、频率等\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181116173915569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n> SET GLOBAL long_query_time = 2\n> 设置大于long_query_time秒的查询\n模拟一下\n> SELECT SLEEP(10);\n\n\n\n*【很实用】MySQL优化技巧：https://blog.csdn.net/u013087513/article/details/77899412\n","slug":"MySQL性能优化","published":1,"updated":"2019-04-20T12:41:50.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xte002gvq6b01jmadm8","content":"<ul>\n<li>【很实用】mysql慢查询 <a href=\"https://www.cnblogs.com/sunke/p/5779230.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunke/p/5779230.html</a></li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>SHOW VARIABLES LIKE '%slow%'<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173750352.png\" alt=\"在这里插入图片描述\"><br>\nSET  @@global.slow_query_log = ON;<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173822632.png\" alt=\"在这里插入图片描述\"><br>\nSET @@global.log_output=‘TABLE’;<br>\n可以查看慢查询的语句，包含慢查询的SQL、执行时间、频率等<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173915569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\nSET GLOBAL long_query_time = 2<br>\n设置大于long_query_time秒的查询<br>\n模拟一下<br>\nSELECT SLEEP(10);</p>\n</blockquote>\n<p>*【很实用】MySQL优化技巧：<a href=\"https://blog.csdn.net/u013087513/article/details/77899412\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013087513/article/details/77899412</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>【很实用】mysql慢查询 <a href=\"https://www.cnblogs.com/sunke/p/5779230.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunke/p/5779230.html</a></li>\n</ul>","more":"<blockquote>\n<p>SHOW VARIABLES LIKE '%slow%'<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173750352.png\" alt=\"在这里插入图片描述\"><br>\nSET  @@global.slow_query_log = ON;<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173822632.png\" alt=\"在这里插入图片描述\"><br>\nSET @@global.log_output=‘TABLE’;<br>\n可以查看慢查询的语句，包含慢查询的SQL、执行时间、频率等<br>\n<img src=\"https://img-blog.csdnimg.cn/20181116173915569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\nSET GLOBAL long_query_time = 2<br>\n设置大于long_query_time秒的查询<br>\n模拟一下<br>\nSELECT SLEEP(10);</p>\n</blockquote>\n<p>*【很实用】MySQL优化技巧：<a href=\"https://blog.csdn.net/u013087513/article/details/77899412\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013087513/article/details/77899412</a></p>"},{"title":"Spring Boot的启动器Starter大全及自定义Starter","_content":"<!-- more -->\n转载自：https://www.cnblogs.com/shamo89/p/8051966.html\n\n现有启动器Starter目录\nSpring Boot应用启动器基本的一共有44种，具体如下：\n\n1）spring-boot-starter \n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。\n\n2）spring-boot-starter-actuator \n帮助监控和管理应用。\n\n3）spring-boot-starter-amqp \n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。\n\n4）spring-boot-starter-aop \n支持面向方面的编程即AOP，包括spring-aop和AspectJ。\n\n5）spring-boot-starter-artemis \n通过Apache Artemis支持JMS的API（Java Message Service API）。\n\n6）spring-boot-starter-batch \n支持Spring Batch，包括HSQLDB数据库。\n\n7）spring-boot-starter-cache \n支持Spring的Cache抽象。\n\n8）spring-boot-starter-cloud-connectors \n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。\n\n9）spring-boot-starter-data-elasticsearch \n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。\n\n10）spring-boot-starter-data-gemfire \n支持GemFire分布式数据存储，包括spring-data-gemfire。\n\n11）spring-boot-starter-data-jpa \n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。\n\n12）spring-boot-starter-data-mongodb \n支持MongoDB数据，包括spring-data-mongodb。\n\n13）spring-boot-starter-data-rest \n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。\n\n14）spring-boot-starter-data-solr \n支持Apache Solr搜索平台，包括spring-data-solr。\n\n15）spring-boot-starter-freemarker \n支持FreeMarker模板引擎。\n\n16）spring-boot-starter-groovy-templates \n支持Groovy模板引擎。\n\n17）spring-boot-starter-hateoas \n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。\n\n18）spring-boot-starter-hornetq \n通过HornetQ支持JMS。\n\n19）spring-boot-starter-integration \n支持通用的spring-integration模块。\n\n20）spring-boot-starter-jdbc \n支持JDBC数据库。\n\n21）spring-boot-starter-jersey \n支持Jersey RESTful Web服务框架。\n\n22）spring-boot-starter-jta-atomikos \n通过Atomikos支持JTA分布式事务处理。\n\n23）spring-boot-starter-jta-bitronix \n通过Bitronix支持JTA分布式事务处理。\n\n24）spring-boot-starter-mail \n支持javax.mail模块。\n\n25）spring-boot-starter-mobile \n支持spring-mobile。\n\n26）spring-boot-starter-mustache \n支持Mustache模板引擎。\n\n27）spring-boot-starter-redis \n支持Redis键值存储数据库，包括spring-redis。\n\n28）spring-boot-starter-security \n支持spring-security。\n\n29）spring-boot-starter-social-facebook \n支持spring-social-facebook\n\n30）spring-boot-starter-social-linkedin \n支持pring-social-linkedin\n\n31）spring-boot-starter-social-twitter \n支持pring-social-twitter\n\n32）spring-boot-starter-test \n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。\n\n33）spring-boot-starter-thymeleaf \n支持Thymeleaf模板引擎，包括与Spring的集成。\n\n34）spring-boot-starter-velocity \n支持Velocity模板引擎。\n\n35）spring-boot-starter-web \nS支持全栈式Web开发，包括Tomcat和spring-webmvc。\n\n36）spring-boot-starter-websocket \n支持WebSocket开发。\n\n37）spring-boot-starter-ws \n支持Spring Web Services。\n\nSpring Boot应用启动器面向生产环境的还有2种，具体如下：\n\n1）spring-boot-starter-actuator \n增加了面向产品上线相关的功能，比如测量和监控。\n\n2）spring-boot-starter-remote-shell \n增加了远程ssh shell的支持。\n\n最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：\n\n1）spring-boot-starter-jetty \n引入了Jetty HTTP引擎（用于替换Tomcat）。\n\n2）spring-boot-starter-log4j \n支持Log4J日志框架。\n\n3）spring-boot-starter-logging \n引入了Spring Boot默认的日志框架Logback。\n\n4）spring-boot-starter-tomcat \n引入了Spring Boot默认的HTTP引擎Tomcat。\n\n5）spring-boot-starter-undertow \n引入了Undertow HTTP引擎（用于替换Tomcat）。\n\n#### 自定义SpringBoot-Starter\n##### 前言\n我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。\n\n例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。\n\n那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。\n\n##### 原理\n首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。\n\n第一步，SpringBoot 在启动时会去依赖的starter包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 SPI 机制。(spi介绍参阅：Java的spi介绍和简单应用)\n\n第二步，根据 spring.factories配置加载AutoConfigure类。\n\n最后，根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。\n\n我们也可以使用@ImportAutoConfiguration({MyServiceAutoConfiguration.class}) 指定自动配置哪些类。\n\n##### 实现\n终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。\n\n第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\n\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-configuration-processor</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-autoconfigure</artifactId>\n    </dependency>\n</dependencies>\n```\n其中 spring-boot-configuration-processor 的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。\n\n我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。\n\n而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。\n\n```\n<groupId>com.ysc</groupId>\n    <artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n<packaging>jar</packaging>\n```\n第二步编写我们的Service类\n这里讲一下我们的Starter要实现的功能，很简单，提供一个Service，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法String[] split(String separatorChar)。\n\n```\npublic class StarterService {\n    private String config;\n\n    public StarterService(String config) {\n        this.config = config;\n    }\n    \n    public String[] split(String separatorChar) {\n        return StringUtils.split(this.config, separatorChar);\n    }\n    \n}\n```\n第三步编写配置文件读取类\n\n```\n@ConfigurationProperties(\"example.service\")\npublic class StarterServiceProperties {\n    private String config;\n    \n    public void setConfig(String config) {\n        this.config = config;\n    }\n    \n    public String getConfig() {\n        return config;\n    }\n }\n```\n第四步，编写AutoConfigure类 ，这步是关键点\n\n```\n@Configuration\n@ConditionalOnClass(StarterService.class)\n@EnableConfigurationProperties(StarterServiceProperties.class)\npublic class StarterAutoConfigure {\n\n    @Autowired\n    private StarterServiceProperties properties;\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(prefix = \"example.service\", value = \"enabled\", havingValue = \"true\")\n    StarterService starterService (){\n        return new StarterService(properties.getConfig());\n    }\n\n}\n```\n解释一下代码中用到的几个注解：\n\n@ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。\n@ConditionalOnMissingBean，当Spring Context中不存在该Bean时。\n@ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")，当配置文件中example.service.enabled=true时。\n下面列举SpringBoot中的所有@Conditional注解及作用\n\n```\n@ConditionalOnBean:当容器中有指定的Bean的条件下  \n@ConditionalOnClass：当类路径下有指定的类的条件下  \n@ConditionalOnExpression:基于SpEL表达式作为判断条件  \n@ConditionalOnJava:基于JVM版本作为判断条件  \n@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  \n@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  \n@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  \n@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  \n@ConditionalOnProperty:指定的属性是否有指定的值  \n@ConditionalOnResource:类路径下是否有指定的资源  \n@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下\n```\n最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure\n```\n至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。\n\n发布\n在项目根目录执行 mvn install 进行打包安装。\n\n测试\n将Starter项目的依赖添加到我们自己的SpringBoot项目中\n\n```\n<dependency>\n    <groupId>com.ysc</groupId>\n    <artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n </dependency>\n```\n在application.yml 配置文件中添加配置信息：\n\n```\nexample\n  service\n    enabled: true\n    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX\n```\n在本地使用JUnit进行代码测试\n\n```\n@Autowired\nprivate StarterService starterService;\n\n@Test\npublic void starterTest() {\n    String[] splitArray = starterService.split(\",\");\n    System.out.println(splitArray);\n}\n```\n好，到这我们的一个自定义Stater就完成了\n","source":"_posts/Spring Boot的启动器Starter大全及自定义Starter.md","raw":"---\ntitle: Spring Boot的启动器Starter大全及自定义Starter\ncategories: Java\ntags: java, springboot\n---\n<!-- more -->\n转载自：https://www.cnblogs.com/shamo89/p/8051966.html\n\n现有启动器Starter目录\nSpring Boot应用启动器基本的一共有44种，具体如下：\n\n1）spring-boot-starter \n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。\n\n2）spring-boot-starter-actuator \n帮助监控和管理应用。\n\n3）spring-boot-starter-amqp \n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。\n\n4）spring-boot-starter-aop \n支持面向方面的编程即AOP，包括spring-aop和AspectJ。\n\n5）spring-boot-starter-artemis \n通过Apache Artemis支持JMS的API（Java Message Service API）。\n\n6）spring-boot-starter-batch \n支持Spring Batch，包括HSQLDB数据库。\n\n7）spring-boot-starter-cache \n支持Spring的Cache抽象。\n\n8）spring-boot-starter-cloud-connectors \n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。\n\n9）spring-boot-starter-data-elasticsearch \n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。\n\n10）spring-boot-starter-data-gemfire \n支持GemFire分布式数据存储，包括spring-data-gemfire。\n\n11）spring-boot-starter-data-jpa \n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。\n\n12）spring-boot-starter-data-mongodb \n支持MongoDB数据，包括spring-data-mongodb。\n\n13）spring-boot-starter-data-rest \n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。\n\n14）spring-boot-starter-data-solr \n支持Apache Solr搜索平台，包括spring-data-solr。\n\n15）spring-boot-starter-freemarker \n支持FreeMarker模板引擎。\n\n16）spring-boot-starter-groovy-templates \n支持Groovy模板引擎。\n\n17）spring-boot-starter-hateoas \n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。\n\n18）spring-boot-starter-hornetq \n通过HornetQ支持JMS。\n\n19）spring-boot-starter-integration \n支持通用的spring-integration模块。\n\n20）spring-boot-starter-jdbc \n支持JDBC数据库。\n\n21）spring-boot-starter-jersey \n支持Jersey RESTful Web服务框架。\n\n22）spring-boot-starter-jta-atomikos \n通过Atomikos支持JTA分布式事务处理。\n\n23）spring-boot-starter-jta-bitronix \n通过Bitronix支持JTA分布式事务处理。\n\n24）spring-boot-starter-mail \n支持javax.mail模块。\n\n25）spring-boot-starter-mobile \n支持spring-mobile。\n\n26）spring-boot-starter-mustache \n支持Mustache模板引擎。\n\n27）spring-boot-starter-redis \n支持Redis键值存储数据库，包括spring-redis。\n\n28）spring-boot-starter-security \n支持spring-security。\n\n29）spring-boot-starter-social-facebook \n支持spring-social-facebook\n\n30）spring-boot-starter-social-linkedin \n支持pring-social-linkedin\n\n31）spring-boot-starter-social-twitter \n支持pring-social-twitter\n\n32）spring-boot-starter-test \n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。\n\n33）spring-boot-starter-thymeleaf \n支持Thymeleaf模板引擎，包括与Spring的集成。\n\n34）spring-boot-starter-velocity \n支持Velocity模板引擎。\n\n35）spring-boot-starter-web \nS支持全栈式Web开发，包括Tomcat和spring-webmvc。\n\n36）spring-boot-starter-websocket \n支持WebSocket开发。\n\n37）spring-boot-starter-ws \n支持Spring Web Services。\n\nSpring Boot应用启动器面向生产环境的还有2种，具体如下：\n\n1）spring-boot-starter-actuator \n增加了面向产品上线相关的功能，比如测量和监控。\n\n2）spring-boot-starter-remote-shell \n增加了远程ssh shell的支持。\n\n最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：\n\n1）spring-boot-starter-jetty \n引入了Jetty HTTP引擎（用于替换Tomcat）。\n\n2）spring-boot-starter-log4j \n支持Log4J日志框架。\n\n3）spring-boot-starter-logging \n引入了Spring Boot默认的日志框架Logback。\n\n4）spring-boot-starter-tomcat \n引入了Spring Boot默认的HTTP引擎Tomcat。\n\n5）spring-boot-starter-undertow \n引入了Undertow HTTP引擎（用于替换Tomcat）。\n\n#### 自定义SpringBoot-Starter\n##### 前言\n我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。\n\n例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。\n\n那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。\n\n##### 原理\n首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。\n\n第一步，SpringBoot 在启动时会去依赖的starter包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 SPI 机制。(spi介绍参阅：Java的spi介绍和简单应用)\n\n第二步，根据 spring.factories配置加载AutoConfigure类。\n\n最后，根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。\n\n我们也可以使用@ImportAutoConfiguration({MyServiceAutoConfiguration.class}) 指定自动配置哪些类。\n\n##### 实现\n终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。\n\n第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\n\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-configuration-processor</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-autoconfigure</artifactId>\n    </dependency>\n</dependencies>\n```\n其中 spring-boot-configuration-processor 的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。\n\n我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。\n\n而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。\n\n```\n<groupId>com.ysc</groupId>\n    <artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n<packaging>jar</packaging>\n```\n第二步编写我们的Service类\n这里讲一下我们的Starter要实现的功能，很简单，提供一个Service，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法String[] split(String separatorChar)。\n\n```\npublic class StarterService {\n    private String config;\n\n    public StarterService(String config) {\n        this.config = config;\n    }\n    \n    public String[] split(String separatorChar) {\n        return StringUtils.split(this.config, separatorChar);\n    }\n    \n}\n```\n第三步编写配置文件读取类\n\n```\n@ConfigurationProperties(\"example.service\")\npublic class StarterServiceProperties {\n    private String config;\n    \n    public void setConfig(String config) {\n        this.config = config;\n    }\n    \n    public String getConfig() {\n        return config;\n    }\n }\n```\n第四步，编写AutoConfigure类 ，这步是关键点\n\n```\n@Configuration\n@ConditionalOnClass(StarterService.class)\n@EnableConfigurationProperties(StarterServiceProperties.class)\npublic class StarterAutoConfigure {\n\n    @Autowired\n    private StarterServiceProperties properties;\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(prefix = \"example.service\", value = \"enabled\", havingValue = \"true\")\n    StarterService starterService (){\n        return new StarterService(properties.getConfig());\n    }\n\n}\n```\n解释一下代码中用到的几个注解：\n\n@ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。\n@ConditionalOnMissingBean，当Spring Context中不存在该Bean时。\n@ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")，当配置文件中example.service.enabled=true时。\n下面列举SpringBoot中的所有@Conditional注解及作用\n\n```\n@ConditionalOnBean:当容器中有指定的Bean的条件下  \n@ConditionalOnClass：当类路径下有指定的类的条件下  \n@ConditionalOnExpression:基于SpEL表达式作为判断条件  \n@ConditionalOnJava:基于JVM版本作为判断条件  \n@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  \n@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  \n@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  \n@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  \n@ConditionalOnProperty:指定的属性是否有指定的值  \n@ConditionalOnResource:类路径下是否有指定的资源  \n@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下\n```\n最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure\n```\n至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。\n\n发布\n在项目根目录执行 mvn install 进行打包安装。\n\n测试\n将Starter项目的依赖添加到我们自己的SpringBoot项目中\n\n```\n<dependency>\n    <groupId>com.ysc</groupId>\n    <artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n </dependency>\n```\n在application.yml 配置文件中添加配置信息：\n\n```\nexample\n  service\n    enabled: true\n    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX\n```\n在本地使用JUnit进行代码测试\n\n```\n@Autowired\nprivate StarterService starterService;\n\n@Test\npublic void starterTest() {\n    String[] splitArray = starterService.split(\",\");\n    System.out.println(splitArray);\n}\n```\n好，到这我们的一个自定义Stater就完成了\n","slug":"Spring Boot的启动器Starter大全及自定义Starter","published":1,"date":"2019-04-20T12:20:10.470Z","updated":"2019-04-20T12:20:10.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtf002jvq6bs9w3z8eg","content":"<a id=\"more\"></a>\n<p>转载自：<a href=\"https://www.cnblogs.com/shamo89/p/8051966.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shamo89/p/8051966.html</a></p>\n<p>现有启动器Starter目录<br>\nSpring Boot应用启动器基本的一共有44种，具体如下：</p>\n<p>1）spring-boot-starter<br>\n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</p>\n<p>2）spring-boot-starter-actuator<br>\n帮助监控和管理应用。</p>\n<p>3）spring-boot-starter-amqp<br>\n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。</p>\n<p>4）spring-boot-starter-aop<br>\n支持面向方面的编程即AOP，包括spring-aop和AspectJ。</p>\n<p>5）spring-boot-starter-artemis<br>\n通过Apache Artemis支持JMS的API（Java Message Service API）。</p>\n<p>6）spring-boot-starter-batch<br>\n支持Spring Batch，包括HSQLDB数据库。</p>\n<p>7）spring-boot-starter-cache<br>\n支持Spring的Cache抽象。</p>\n<p>8）spring-boot-starter-cloud-connectors<br>\n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。</p>\n<p>9）spring-boot-starter-data-elasticsearch<br>\n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。</p>\n<p>10）spring-boot-starter-data-gemfire<br>\n支持GemFire分布式数据存储，包括spring-data-gemfire。</p>\n<p>11）spring-boot-starter-data-jpa<br>\n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</p>\n<p>12）spring-boot-starter-data-mongodb<br>\n支持MongoDB数据，包括spring-data-mongodb。</p>\n<p>13）spring-boot-starter-data-rest<br>\n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。</p>\n<p>14）spring-boot-starter-data-solr<br>\n支持Apache Solr搜索平台，包括spring-data-solr。</p>\n<p>15）spring-boot-starter-freemarker<br>\n支持FreeMarker模板引擎。</p>\n<p>16）spring-boot-starter-groovy-templates<br>\n支持Groovy模板引擎。</p>\n<p>17）spring-boot-starter-hateoas<br>\n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。</p>\n<p>18）spring-boot-starter-hornetq<br>\n通过HornetQ支持JMS。</p>\n<p>19）spring-boot-starter-integration<br>\n支持通用的spring-integration模块。</p>\n<p>20）spring-boot-starter-jdbc<br>\n支持JDBC数据库。</p>\n<p>21）spring-boot-starter-jersey<br>\n支持Jersey RESTful Web服务框架。</p>\n<p>22）spring-boot-starter-jta-atomikos<br>\n通过Atomikos支持JTA分布式事务处理。</p>\n<p>23）spring-boot-starter-jta-bitronix<br>\n通过Bitronix支持JTA分布式事务处理。</p>\n<p>24）spring-boot-starter-mail<br>\n支持javax.mail模块。</p>\n<p>25）spring-boot-starter-mobile<br>\n支持spring-mobile。</p>\n<p>26）spring-boot-starter-mustache<br>\n支持Mustache模板引擎。</p>\n<p>27）spring-boot-starter-redis<br>\n支持Redis键值存储数据库，包括spring-redis。</p>\n<p>28）spring-boot-starter-security<br>\n支持spring-security。</p>\n<p>29）spring-boot-starter-social-facebook<br>\n支持spring-social-facebook</p>\n<p>30）spring-boot-starter-social-linkedin<br>\n支持pring-social-linkedin</p>\n<p>31）spring-boot-starter-social-twitter<br>\n支持pring-social-twitter</p>\n<p>32）spring-boot-starter-test<br>\n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。</p>\n<p>33）spring-boot-starter-thymeleaf<br>\n支持Thymeleaf模板引擎，包括与Spring的集成。</p>\n<p>34）spring-boot-starter-velocity<br>\n支持Velocity模板引擎。</p>\n<p>35）spring-boot-starter-web<br>\nS支持全栈式Web开发，包括Tomcat和spring-webmvc。</p>\n<p>36）spring-boot-starter-websocket<br>\n支持WebSocket开发。</p>\n<p>37）spring-boot-starter-ws<br>\n支持Spring Web Services。</p>\n<p>Spring Boot应用启动器面向生产环境的还有2种，具体如下：</p>\n<p>1）spring-boot-starter-actuator<br>\n增加了面向产品上线相关的功能，比如测量和监控。</p>\n<p>2）spring-boot-starter-remote-shell<br>\n增加了远程ssh shell的支持。</p>\n<p>最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：</p>\n<p>1）spring-boot-starter-jetty<br>\n引入了Jetty HTTP引擎（用于替换Tomcat）。</p>\n<p>2）spring-boot-starter-log4j<br>\n支持Log4J日志框架。</p>\n<p>3）spring-boot-starter-logging<br>\n引入了Spring Boot默认的日志框架Logback。</p>\n<p>4）spring-boot-starter-tomcat<br>\n引入了Spring Boot默认的HTTP引擎Tomcat。</p>\n<p>5）spring-boot-starter-undertow<br>\n引入了Undertow HTTP引擎（用于替换Tomcat）。</p>\n<h4 id=\"自定义springboot-starter\">自定义SpringBoot-Starter</h4>\n<h5 id=\"前言\">前言</h5>\n<p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p>\n<p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p>\n<p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p>\n<h5 id=\"原理\">原理</h5>\n<p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p>\n<p>第一步，SpringBoot 在启动时会去依赖的starter包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 SPI 机制。(spi介绍参阅：Java的spi介绍和简单应用)</p>\n<p>第二步，根据 spring.factories配置加载AutoConfigure类。</p>\n<p>最后，根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p>\n<p>我们也可以使用@ImportAutoConfiguration({MyServiceAutoConfiguration.class}) 指定自动配置哪些类。</p>\n<h5 id=\"实现\">实现</h5>\n<p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p>\n<p>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>其中 spring-boot-configuration-processor 的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p>\n<p>我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。</p>\n<p>而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.ysc&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;simple-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure>\n<p>第二步编写我们的Service类<br>\n这里讲一下我们的Starter要实现的功能，很简单，提供一个Service，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法String[] split(String separatorChar)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StarterService &#123;</span><br><span class=\"line\">    private String config;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StarterService(String config) &#123;</span><br><span class=\"line\">        this.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String[] split(String separatorChar) &#123;</span><br><span class=\"line\">        return StringUtils.split(this.config, separatorChar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步编写配置文件读取类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(&quot;example.service&quot;)</span><br><span class=\"line\">public class StarterServiceProperties &#123;</span><br><span class=\"line\">    private String config;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void setConfig(String config) &#123;</span><br><span class=\"line\">        this.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getConfig() &#123;</span><br><span class=\"line\">        return config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>第四步，编写AutoConfigure类 ，这步是关键点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnClass(StarterService.class)</span><br><span class=\"line\">@EnableConfigurationProperties(StarterServiceProperties.class)</span><br><span class=\"line\">public class StarterAutoConfigure &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private StarterServiceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @ConditionalOnProperty(prefix = &quot;example.service&quot;, value = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span><br><span class=\"line\">    StarterService starterService ()&#123;</span><br><span class=\"line\">        return new StarterService(properties.getConfig());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释一下代码中用到的几个注解：</p>\n<p>@ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。<br>\n@ConditionalOnMissingBean，当Spring Context中不存在该Bean时。<br>\n@ConditionalOnProperty(prefix = “example.service”,value = “enabled”,havingValue = “true”)，当配置文件中example.service.enabled=true时。<br>\n下面列举SpringBoot中的所有@Conditional注解及作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnBean:当容器中有指定的Bean的条件下  </span><br><span class=\"line\">@ConditionalOnClass：当类路径下有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnExpression:基于SpEL表达式作为判断条件  </span><br><span class=\"line\">@ConditionalOnJava:基于JVM版本作为判断条件  </span><br><span class=\"line\">@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  </span><br><span class=\"line\">@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  </span><br><span class=\"line\">@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  </span><br><span class=\"line\">@ConditionalOnProperty:指定的属性是否有指定的值  </span><br><span class=\"line\">@ConditionalOnResource:类路径下是否有指定的资源  </span><br><span class=\"line\">@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下</span><br></pre></td></tr></table></figure>\n<p>最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure</span><br></pre></td></tr></table></figure>\n<p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p>\n<p>发布<br>\n在项目根目录执行 mvn install 进行打包安装。</p>\n<p>测试<br>\n将Starter项目的依赖添加到我们自己的SpringBoot项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.ysc&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;simple-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在application.yml 配置文件中添加配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example</span><br><span class=\"line\">  service</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</span><br></pre></td></tr></table></figure>\n<p>在本地使用JUnit进行代码测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private StarterService starterService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void starterTest() &#123;</span><br><span class=\"line\">    String[] splitArray = starterService.split(&quot;,&quot;);</span><br><span class=\"line\">    System.out.println(splitArray);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好，到这我们的一个自定义Stater就完成了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载自：<a href=\"https://www.cnblogs.com/shamo89/p/8051966.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shamo89/p/8051966.html</a></p>\n<p>现有启动器Starter目录<br>\nSpring Boot应用启动器基本的一共有44种，具体如下：</p>\n<p>1）spring-boot-starter<br>\n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</p>\n<p>2）spring-boot-starter-actuator<br>\n帮助监控和管理应用。</p>\n<p>3）spring-boot-starter-amqp<br>\n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。</p>\n<p>4）spring-boot-starter-aop<br>\n支持面向方面的编程即AOP，包括spring-aop和AspectJ。</p>\n<p>5）spring-boot-starter-artemis<br>\n通过Apache Artemis支持JMS的API（Java Message Service API）。</p>\n<p>6）spring-boot-starter-batch<br>\n支持Spring Batch，包括HSQLDB数据库。</p>\n<p>7）spring-boot-starter-cache<br>\n支持Spring的Cache抽象。</p>\n<p>8）spring-boot-starter-cloud-connectors<br>\n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。</p>\n<p>9）spring-boot-starter-data-elasticsearch<br>\n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。</p>\n<p>10）spring-boot-starter-data-gemfire<br>\n支持GemFire分布式数据存储，包括spring-data-gemfire。</p>\n<p>11）spring-boot-starter-data-jpa<br>\n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</p>\n<p>12）spring-boot-starter-data-mongodb<br>\n支持MongoDB数据，包括spring-data-mongodb。</p>\n<p>13）spring-boot-starter-data-rest<br>\n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。</p>\n<p>14）spring-boot-starter-data-solr<br>\n支持Apache Solr搜索平台，包括spring-data-solr。</p>\n<p>15）spring-boot-starter-freemarker<br>\n支持FreeMarker模板引擎。</p>\n<p>16）spring-boot-starter-groovy-templates<br>\n支持Groovy模板引擎。</p>\n<p>17）spring-boot-starter-hateoas<br>\n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。</p>\n<p>18）spring-boot-starter-hornetq<br>\n通过HornetQ支持JMS。</p>\n<p>19）spring-boot-starter-integration<br>\n支持通用的spring-integration模块。</p>\n<p>20）spring-boot-starter-jdbc<br>\n支持JDBC数据库。</p>\n<p>21）spring-boot-starter-jersey<br>\n支持Jersey RESTful Web服务框架。</p>\n<p>22）spring-boot-starter-jta-atomikos<br>\n通过Atomikos支持JTA分布式事务处理。</p>\n<p>23）spring-boot-starter-jta-bitronix<br>\n通过Bitronix支持JTA分布式事务处理。</p>\n<p>24）spring-boot-starter-mail<br>\n支持javax.mail模块。</p>\n<p>25）spring-boot-starter-mobile<br>\n支持spring-mobile。</p>\n<p>26）spring-boot-starter-mustache<br>\n支持Mustache模板引擎。</p>\n<p>27）spring-boot-starter-redis<br>\n支持Redis键值存储数据库，包括spring-redis。</p>\n<p>28）spring-boot-starter-security<br>\n支持spring-security。</p>\n<p>29）spring-boot-starter-social-facebook<br>\n支持spring-social-facebook</p>\n<p>30）spring-boot-starter-social-linkedin<br>\n支持pring-social-linkedin</p>\n<p>31）spring-boot-starter-social-twitter<br>\n支持pring-social-twitter</p>\n<p>32）spring-boot-starter-test<br>\n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。</p>\n<p>33）spring-boot-starter-thymeleaf<br>\n支持Thymeleaf模板引擎，包括与Spring的集成。</p>\n<p>34）spring-boot-starter-velocity<br>\n支持Velocity模板引擎。</p>\n<p>35）spring-boot-starter-web<br>\nS支持全栈式Web开发，包括Tomcat和spring-webmvc。</p>\n<p>36）spring-boot-starter-websocket<br>\n支持WebSocket开发。</p>\n<p>37）spring-boot-starter-ws<br>\n支持Spring Web Services。</p>\n<p>Spring Boot应用启动器面向生产环境的还有2种，具体如下：</p>\n<p>1）spring-boot-starter-actuator<br>\n增加了面向产品上线相关的功能，比如测量和监控。</p>\n<p>2）spring-boot-starter-remote-shell<br>\n增加了远程ssh shell的支持。</p>\n<p>最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：</p>\n<p>1）spring-boot-starter-jetty<br>\n引入了Jetty HTTP引擎（用于替换Tomcat）。</p>\n<p>2）spring-boot-starter-log4j<br>\n支持Log4J日志框架。</p>\n<p>3）spring-boot-starter-logging<br>\n引入了Spring Boot默认的日志框架Logback。</p>\n<p>4）spring-boot-starter-tomcat<br>\n引入了Spring Boot默认的HTTP引擎Tomcat。</p>\n<p>5）spring-boot-starter-undertow<br>\n引入了Undertow HTTP引擎（用于替换Tomcat）。</p>\n<h4>自定义SpringBoot-Starter</h4>\n<h5>前言</h5>\n<p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p>\n<p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p>\n<p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p>\n<h5>原理</h5>\n<p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p>\n<p>第一步，SpringBoot 在启动时会去依赖的starter包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 SPI 机制。(spi介绍参阅：Java的spi介绍和简单应用)</p>\n<p>第二步，根据 spring.factories配置加载AutoConfigure类。</p>\n<p>最后，根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p>\n<p>我们也可以使用@ImportAutoConfiguration({MyServiceAutoConfiguration.class}) 指定自动配置哪些类。</p>\n<h5>实现</h5>\n<p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p>\n<p>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>其中 spring-boot-configuration-processor 的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p>\n<p>我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。</p>\n<p>而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.ysc&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;simple-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure>\n<p>第二步编写我们的Service类<br>\n这里讲一下我们的Starter要实现的功能，很简单，提供一个Service，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法String[] split(String separatorChar)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StarterService &#123;</span><br><span class=\"line\">    private String config;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StarterService(String config) &#123;</span><br><span class=\"line\">        this.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String[] split(String separatorChar) &#123;</span><br><span class=\"line\">        return StringUtils.split(this.config, separatorChar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步编写配置文件读取类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(&quot;example.service&quot;)</span><br><span class=\"line\">public class StarterServiceProperties &#123;</span><br><span class=\"line\">    private String config;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void setConfig(String config) &#123;</span><br><span class=\"line\">        this.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getConfig() &#123;</span><br><span class=\"line\">        return config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>第四步，编写AutoConfigure类 ，这步是关键点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnClass(StarterService.class)</span><br><span class=\"line\">@EnableConfigurationProperties(StarterServiceProperties.class)</span><br><span class=\"line\">public class StarterAutoConfigure &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private StarterServiceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @ConditionalOnProperty(prefix = &quot;example.service&quot;, value = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span><br><span class=\"line\">    StarterService starterService ()&#123;</span><br><span class=\"line\">        return new StarterService(properties.getConfig());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释一下代码中用到的几个注解：</p>\n<p>@ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。<br>\n@ConditionalOnMissingBean，当Spring Context中不存在该Bean时。<br>\n@ConditionalOnProperty(prefix = “example.service”,value = “enabled”,havingValue = “true”)，当配置文件中example.service.enabled=true时。<br>\n下面列举SpringBoot中的所有@Conditional注解及作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnBean:当容器中有指定的Bean的条件下  </span><br><span class=\"line\">@ConditionalOnClass：当类路径下有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnExpression:基于SpEL表达式作为判断条件  </span><br><span class=\"line\">@ConditionalOnJava:基于JVM版本作为判断条件  </span><br><span class=\"line\">@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  </span><br><span class=\"line\">@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  </span><br><span class=\"line\">@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  </span><br><span class=\"line\">@ConditionalOnProperty:指定的属性是否有指定的值  </span><br><span class=\"line\">@ConditionalOnResource:类路径下是否有指定的资源  </span><br><span class=\"line\">@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下</span><br></pre></td></tr></table></figure>\n<p>最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure</span><br></pre></td></tr></table></figure>\n<p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p>\n<p>发布<br>\n在项目根目录执行 mvn install 进行打包安装。</p>\n<p>测试<br>\n将Starter项目的依赖添加到我们自己的SpringBoot项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.ysc&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;simple-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在application.yml 配置文件中添加配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example</span><br><span class=\"line\">  service</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</span><br></pre></td></tr></table></figure>\n<p>在本地使用JUnit进行代码测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private StarterService starterService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void starterTest() &#123;</span><br><span class=\"line\">    String[] splitArray = starterService.split(&quot;,&quot;);</span><br><span class=\"line\">    System.out.println(splitArray);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好，到这我们的一个自定义Stater就完成了</p>"},{"title":"No accelerator found - failed to create HAX VM","_content":"<!-- more -->\n```\n\n13:56\tExecuting tasks: [:app:assembleDebug]\n\n13:56\tEmulator: Incompatible HAX module version 3,requires minimum version 4\n\n13:56\tEmulator: No accelerator found.\n\n13:56\tEmulator: D:\\develop\\android\\android-sdk-windows\\emulator\\qemu\\windows-x86_64\\qemu-system-i386.exe: failed to initialize HAX: Invalid argument\n\n13:56\tEmulator: Process finished with exit code 0\n```\n完美解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108140759101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n\n参考：https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm\n","source":"_posts/No accelerator found - failed to create HAX VM.md","raw":"---\ntitle: No accelerator found - failed to create HAX VM\ncategories: Java\ntags: java\n---\n<!-- more -->\n```\n\n13:56\tExecuting tasks: [:app:assembleDebug]\n\n13:56\tEmulator: Incompatible HAX module version 3,requires minimum version 4\n\n13:56\tEmulator: No accelerator found.\n\n13:56\tEmulator: D:\\develop\\android\\android-sdk-windows\\emulator\\qemu\\windows-x86_64\\qemu-system-i386.exe: failed to initialize HAX: Invalid argument\n\n13:56\tEmulator: Process finished with exit code 0\n```\n完美解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190108140759101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n\n参考：https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm\n","slug":"No accelerator found - failed to create HAX VM","published":1,"date":"2019-04-20T12:20:10.470Z","updated":"2019-04-20T12:20:10.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtg002nvq6byv5st8mn","content":"<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">13:56\tExecuting tasks: [:app:assembleDebug]</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: Incompatible HAX module version 3,requires minimum version 4</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: No accelerator found.</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: D:\\develop\\android\\android-sdk-windows\\emulator\\qemu\\windows-x86_64\\qemu-system-i386.exe: failed to initialize HAX: Invalid argument</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>完美解决：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190108140759101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">13:56\tExecuting tasks: [:app:assembleDebug]</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: Incompatible HAX module version 3,requires minimum version 4</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: No accelerator found.</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: D:\\develop\\android\\android-sdk-windows\\emulator\\qemu\\windows-x86_64\\qemu-system-i386.exe: failed to initialize HAX: Invalid argument</span><br><span class=\"line\"></span><br><span class=\"line\">13:56\tEmulator: Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>完美解决：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190108140759101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm</a></p>"},{"title":"Spring boot 实现Web Service","_content":"<!-- more -->\n@[TOC](Spring boot 实现Web Service)\n# 为什么要用Web service？\n最近公司跟其他公司有个数据对接，按照对方的传输方式来做，用的是**web service**方式，数据包格式为**xml**，业务需要双向通信，即我能发送给对方，对方也会发送给我。另外，用的是比较流行的spring boot，不了解的可以自行谷歌。\n# 什么是Web service？\n[百度百科](https://baike.baidu.com/item/Web%20Service/1215039)：Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。 Web Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。\n\n# 开始\n省略spring boot项目搭建\n## 相关依赖\n\n```\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web-services</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-spring-boot-starter-jaxws</artifactId>\n\t\t\t<version>3.2.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.axis/axis -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.axis</groupId>\n\t\t\t<artifactId>axis</artifactId>\n\t\t\t<version>1.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/javax.xml.rpc/javax.xml.rpc-api -->\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.rpc</groupId>\n\t\t\t<artifactId>javax.xml.rpc-api</artifactId>\n\t\t\t<version>1.1.2</version>\n\t\t</dependency>\n\n\t</dependencies>\n```\n\n刚出差回来，太累了，改天补全！(着急的话首页加我微信，我给你讲解)\n\n项目地址：https://github.com/qijianguo/webservice\n\n","source":"_posts/Spring boot 实现Web Service.md","raw":"---\ntitle: Spring boot 实现Web Service\ncategories: Java\ntags: java, springboot\n---\n<!-- more -->\n@[TOC](Spring boot 实现Web Service)\n# 为什么要用Web service？\n最近公司跟其他公司有个数据对接，按照对方的传输方式来做，用的是**web service**方式，数据包格式为**xml**，业务需要双向通信，即我能发送给对方，对方也会发送给我。另外，用的是比较流行的spring boot，不了解的可以自行谷歌。\n# 什么是Web service？\n[百度百科](https://baike.baidu.com/item/Web%20Service/1215039)：Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。 Web Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。\n\n# 开始\n省略spring boot项目搭建\n## 相关依赖\n\n```\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web-services</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-spring-boot-starter-jaxws</artifactId>\n\t\t\t<version>3.2.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.axis/axis -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.axis</groupId>\n\t\t\t<artifactId>axis</artifactId>\n\t\t\t<version>1.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/javax.xml.rpc/javax.xml.rpc-api -->\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.rpc</groupId>\n\t\t\t<artifactId>javax.xml.rpc-api</artifactId>\n\t\t\t<version>1.1.2</version>\n\t\t</dependency>\n\n\t</dependencies>\n```\n\n刚出差回来，太累了，改天补全！(着急的话首页加我微信，我给你讲解)\n\n项目地址：https://github.com/qijianguo/webservice\n\n","slug":"Spring boot 实现Web Service","published":1,"date":"2019-04-20T12:20:10.471Z","updated":"2019-04-20T12:20:10.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtj002rvq6bx6gt07bl","content":"<a id=\"more\"></a>\n<p>@[TOC](Spring boot 实现Web Service)</p>\n<h1 id=\"为什么要用web-service\">为什么要用Web service？</h1>\n<p>最近公司跟其他公司有个数据对接，按照对方的传输方式来做，用的是<strong>web service</strong>方式，数据包格式为<strong>xml</strong>，业务需要双向通信，即我能发送给对方，对方也会发送给我。另外，用的是比较流行的spring boot，不了解的可以自行谷歌。</p>\n<h1 id=\"什么是web-service\">什么是Web service？</h1>\n<p><a href=\"https://baike.baidu.com/item/Web%20Service/1215039\" target=\"_blank\" rel=\"noopener\">百度百科</a>：Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。 Web Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。</p>\n<h1 id=\"开始\">开始</h1>\n<p>省略spring boot项目搭建</p>\n<h2 id=\"相关依赖\">相关依赖</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;3.2.4&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.axis/axis --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.axis&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;axis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.4&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;!-- https://mvnrepository.com/artifact/javax.xml.rpc/javax.xml.rpc-api --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.xml.rpc&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;javax.xml.rpc-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>刚出差回来，太累了，改天补全！(着急的话首页加我微信，我给你讲解)</p>\n<p>项目地址：<a href=\"https://github.com/qijianguo/webservice\" target=\"_blank\" rel=\"noopener\">https://github.com/qijianguo/webservice</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[TOC](Spring boot 实现Web Service)</p>\n<h1>为什么要用Web service？</h1>\n<p>最近公司跟其他公司有个数据对接，按照对方的传输方式来做，用的是<strong>web service</strong>方式，数据包格式为<strong>xml</strong>，业务需要双向通信，即我能发送给对方，对方也会发送给我。另外，用的是比较流行的spring boot，不了解的可以自行谷歌。</p>\n<h1>什么是Web service？</h1>\n<p><a href=\"https://baike.baidu.com/item/Web%20Service/1215039\" target=\"_blank\" rel=\"noopener\">百度百科</a>：Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。 Web Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。</p>\n<h1>开始</h1>\n<p>省略spring boot项目搭建</p>\n<h2>相关依赖</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;3.2.4&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.axis/axis --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.axis&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;axis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.4&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;!-- https://mvnrepository.com/artifact/javax.xml.rpc/javax.xml.rpc-api --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.xml.rpc&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;javax.xml.rpc-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>刚出差回来，太累了，改天补全！(着急的话首页加我微信，我给你讲解)</p>\n<p>项目地址：<a href=\"https://github.com/qijianguo/webservice\" target=\"_blank\" rel=\"noopener\">https://github.com/qijianguo/webservice</a></p>"},{"title":"SpringBoot定时任务Schedule使用","_content":"\n在开发中很多时候会用到定时任务, 以前用自定义类继承***TimerTask***\n\n<!-- more -->\n\n```\npublic class CustomTask extends TimerTask{\n\t@Override\n\tpublic void run() {\n\t\t// 执行业务代码\n\t}\n}\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\t// 调用\n\t\tTimer timer= new Timer();\n\t\tCalendar calendar= Calendar.getInstance(); // 设置定时时间, 当然还有其他方式\n\t\tcalendar.set(Calendar.MINUTE, 0);\n\t\tcalendar.set(Calendar.SECOND, 0);\n\t\tcalendar.set(Calendar.MILLISECOND, 0);\n\t\tcalendar.scheduleAtFixedRate(new CustomTask(),\n\t\ttimer.getTime(), 1000 * 60 * 10);\n\t}\n}\n```\n[Timer和TimerTask详解:https://blog.csdn.net/xieyuooo/article/details/8607220](https://blog.csdn.net/xieyuooo/article/details/8607220)\n\n下面进入正题, SpringBoot中优雅使用定时任务\n\n* 添加支持\n在SpringBoot的启动类①中添加注解 ***@EnableScheduling***\n```\n@SpringBootApplication\n@EnableScheduling  // ①\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n* 使用定时任务\n\n```\n/**\n * 检查小时均值报警\n */\n @Scheduled(cron = \"0 1 * * * *\")\n public void overproofAlert() {\n\t log.info(\"-----开始执行定时任务-----\");\n }\n```\n通过上面这一个注解   ***@Scheduled(cron = \"0 1 * * * *\")*** 这样就可以开启定时任务了, 惊不惊喜！\n\nCron表达式说明 [详细说明](https://www.cnblogs.com/liuyitian/p/4108391.html)\n>Cron是字符串表达式, 并由'域'和空格组成。\n\n模版: *Seconds* *Minutes* *Hours* *DayOfMonth* *Month* *DayOfWeek* *Year*\n> Year可选\n> 各\n> Sencods\n\n---\n\n这样创建的定时任务是同步的，即顺序执行。 这会遇到一个问题，当某个任务中断后会阻塞掉后面的任务， 导致其他任务‘失效’。所以配置异步是非常有必要的, 步骤如下:\n\n* 添加Config\n```\n@Configuration\n@EnableAsync // ① 添加注解\npublic class AsyncConfig {\n    @Bean\n    public Executor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);  \n        executor.setMaxPoolSize(200);\n        executor.setQueueCapacity(10);\n        executor.initialize();\n        return executor;\n    }\n}\n```\n\n* 在定时方法上添加 ***@Async*** 注解\n```\n@Scheduled(cron = \"0 0/1 * * * *\")\n@Async   // ② \npublic void oneMinuteTask() {\n\tlog.info(\"-----开始执行定时任务-----\");\n}\n```\n","source":"_posts/SpringBoot定时任务Schedule使用.md","raw":"---\ntitle: SpringBoot定时任务Schedule使用\ncategories: Java\ntags: java, schedule\n---\n\n在开发中很多时候会用到定时任务, 以前用自定义类继承***TimerTask***\n\n<!-- more -->\n\n```\npublic class CustomTask extends TimerTask{\n\t@Override\n\tpublic void run() {\n\t\t// 执行业务代码\n\t}\n}\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\t// 调用\n\t\tTimer timer= new Timer();\n\t\tCalendar calendar= Calendar.getInstance(); // 设置定时时间, 当然还有其他方式\n\t\tcalendar.set(Calendar.MINUTE, 0);\n\t\tcalendar.set(Calendar.SECOND, 0);\n\t\tcalendar.set(Calendar.MILLISECOND, 0);\n\t\tcalendar.scheduleAtFixedRate(new CustomTask(),\n\t\ttimer.getTime(), 1000 * 60 * 10);\n\t}\n}\n```\n[Timer和TimerTask详解:https://blog.csdn.net/xieyuooo/article/details/8607220](https://blog.csdn.net/xieyuooo/article/details/8607220)\n\n下面进入正题, SpringBoot中优雅使用定时任务\n\n* 添加支持\n在SpringBoot的启动类①中添加注解 ***@EnableScheduling***\n```\n@SpringBootApplication\n@EnableScheduling  // ①\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n* 使用定时任务\n\n```\n/**\n * 检查小时均值报警\n */\n @Scheduled(cron = \"0 1 * * * *\")\n public void overproofAlert() {\n\t log.info(\"-----开始执行定时任务-----\");\n }\n```\n通过上面这一个注解   ***@Scheduled(cron = \"0 1 * * * *\")*** 这样就可以开启定时任务了, 惊不惊喜！\n\nCron表达式说明 [详细说明](https://www.cnblogs.com/liuyitian/p/4108391.html)\n>Cron是字符串表达式, 并由'域'和空格组成。\n\n模版: *Seconds* *Minutes* *Hours* *DayOfMonth* *Month* *DayOfWeek* *Year*\n> Year可选\n> 各\n> Sencods\n\n---\n\n这样创建的定时任务是同步的，即顺序执行。 这会遇到一个问题，当某个任务中断后会阻塞掉后面的任务， 导致其他任务‘失效’。所以配置异步是非常有必要的, 步骤如下:\n\n* 添加Config\n```\n@Configuration\n@EnableAsync // ① 添加注解\npublic class AsyncConfig {\n    @Bean\n    public Executor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);  \n        executor.setMaxPoolSize(200);\n        executor.setQueueCapacity(10);\n        executor.initialize();\n        return executor;\n    }\n}\n```\n\n* 在定时方法上添加 ***@Async*** 注解\n```\n@Scheduled(cron = \"0 0/1 * * * *\")\n@Async   // ② \npublic void oneMinuteTask() {\n\tlog.info(\"-----开始执行定时任务-----\");\n}\n```\n","slug":"SpringBoot定时任务Schedule使用","published":1,"date":"2019-04-20T12:20:10.471Z","updated":"2019-04-20T12:20:10.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtk002uvq6bi7b4hode","content":"<p>在开发中很多时候会用到定时任务, 以前用自定义类继承<strong><em>TimerTask</em></strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomTask extends TimerTask&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\t// 执行业务代码</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Main &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 调用</span><br><span class=\"line\">\t\tTimer timer= new Timer();</span><br><span class=\"line\">\t\tCalendar calendar= Calendar.getInstance(); // 设置定时时间, 当然还有其他方式</span><br><span class=\"line\">\t\tcalendar.set(Calendar.MINUTE, 0);</span><br><span class=\"line\">\t\tcalendar.set(Calendar.SECOND, 0);</span><br><span class=\"line\">\t\tcalendar.set(Calendar.MILLISECOND, 0);</span><br><span class=\"line\">\t\tcalendar.scheduleAtFixedRate(new CustomTask(),</span><br><span class=\"line\">\t\ttimer.getTime(), 1000 * 60 * 10);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/xieyuooo/article/details/8607220\" target=\"_blank\" rel=\"noopener\">Timer和TimerTask详解:https://blog.csdn.net/xieyuooo/article/details/8607220</a></p>\n<p>下面进入正题, SpringBoot中优雅使用定时任务</p>\n<ul>\n<li>添加支持<br>\n在SpringBoot的启动类①中添加注解 <strong><em>@EnableScheduling</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableScheduling  // ①</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用定时任务</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 检查小时均值报警</span><br><span class=\"line\"> */</span><br><span class=\"line\"> @Scheduled(cron = &quot;0 1 * * * *&quot;)</span><br><span class=\"line\"> public void overproofAlert() &#123;</span><br><span class=\"line\">\t log.info(&quot;-----开始执行定时任务-----&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面这一个注解   *<strong>@Scheduled(cron = &quot;0 1 * * * <em>&quot;)</em></strong> 这样就可以开启定时任务了, 惊不惊喜！</p>\n<p>Cron表达式说明 <a href=\"https://www.cnblogs.com/liuyitian/p/4108391.html\" target=\"_blank\" rel=\"noopener\">详细说明</a></p>\n<blockquote>\n<p>Cron是字符串表达式, 并由’域’和空格组成。</p>\n</blockquote>\n<p>模版: <em>Seconds</em> <em>Minutes</em> <em>Hours</em> <em>DayOfMonth</em> <em>Month</em> <em>DayOfWeek</em> <em>Year</em></p>\n<blockquote>\n<p>Year可选<br>\n各<br>\nSencods</p>\n</blockquote>\n<hr>\n<p>这样创建的定时任务是同步的，即顺序执行。 这会遇到一个问题，当某个任务中断后会阻塞掉后面的任务， 导致其他任务‘失效’。所以配置异步是非常有必要的, 步骤如下:</p>\n<ul>\n<li>添加Config</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync // ① 添加注解</span><br><span class=\"line\">public class AsyncConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Executor taskExecutor() &#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(10);  </span><br><span class=\"line\">        executor.setMaxPoolSize(200);</span><br><span class=\"line\">        executor.setQueueCapacity(10);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        return executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在定时方法上添加 <strong><em>@Async</em></strong> 注解</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Scheduled(cron = &quot;0 0/1 * * * *&quot;)</span><br><span class=\"line\">@Async   // ② </span><br><span class=\"line\">public void oneMinuteTask() &#123;</span><br><span class=\"line\">\tlog.info(&quot;-----开始执行定时任务-----&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在开发中很多时候会用到定时任务, 以前用自定义类继承<strong><em>TimerTask</em></strong></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomTask extends TimerTask&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\t// 执行业务代码</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Main &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 调用</span><br><span class=\"line\">\t\tTimer timer= new Timer();</span><br><span class=\"line\">\t\tCalendar calendar= Calendar.getInstance(); // 设置定时时间, 当然还有其他方式</span><br><span class=\"line\">\t\tcalendar.set(Calendar.MINUTE, 0);</span><br><span class=\"line\">\t\tcalendar.set(Calendar.SECOND, 0);</span><br><span class=\"line\">\t\tcalendar.set(Calendar.MILLISECOND, 0);</span><br><span class=\"line\">\t\tcalendar.scheduleAtFixedRate(new CustomTask(),</span><br><span class=\"line\">\t\ttimer.getTime(), 1000 * 60 * 10);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/xieyuooo/article/details/8607220\" target=\"_blank\" rel=\"noopener\">Timer和TimerTask详解:https://blog.csdn.net/xieyuooo/article/details/8607220</a></p>\n<p>下面进入正题, SpringBoot中优雅使用定时任务</p>\n<ul>\n<li>添加支持<br>\n在SpringBoot的启动类①中添加注解 <strong><em>@EnableScheduling</em></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableScheduling  // ①</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用定时任务</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 检查小时均值报警</span><br><span class=\"line\"> */</span><br><span class=\"line\"> @Scheduled(cron = &quot;0 1 * * * *&quot;)</span><br><span class=\"line\"> public void overproofAlert() &#123;</span><br><span class=\"line\">\t log.info(&quot;-----开始执行定时任务-----&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面这一个注解   *<strong>@Scheduled(cron = &quot;0 1 * * * <em>&quot;)</em></strong> 这样就可以开启定时任务了, 惊不惊喜！</p>\n<p>Cron表达式说明 <a href=\"https://www.cnblogs.com/liuyitian/p/4108391.html\" target=\"_blank\" rel=\"noopener\">详细说明</a></p>\n<blockquote>\n<p>Cron是字符串表达式, 并由’域’和空格组成。</p>\n</blockquote>\n<p>模版: <em>Seconds</em> <em>Minutes</em> <em>Hours</em> <em>DayOfMonth</em> <em>Month</em> <em>DayOfWeek</em> <em>Year</em></p>\n<blockquote>\n<p>Year可选<br>\n各<br>\nSencods</p>\n</blockquote>\n<hr>\n<p>这样创建的定时任务是同步的，即顺序执行。 这会遇到一个问题，当某个任务中断后会阻塞掉后面的任务， 导致其他任务‘失效’。所以配置异步是非常有必要的, 步骤如下:</p>\n<ul>\n<li>添加Config</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync // ① 添加注解</span><br><span class=\"line\">public class AsyncConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Executor taskExecutor() &#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(10);  </span><br><span class=\"line\">        executor.setMaxPoolSize(200);</span><br><span class=\"line\">        executor.setQueueCapacity(10);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        return executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在定时方法上添加 <strong><em>@Async</em></strong> 注解</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Scheduled(cron = &quot;0 0/1 * * * *&quot;)</span><br><span class=\"line\">@Async   // ② </span><br><span class=\"line\">public void oneMinuteTask() &#123;</span><br><span class=\"line\">\tlog.info(&quot;-----开始执行定时任务-----&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Springboot JPA 实体类添加@Transient","_content":"\n* Hibernate\n\n> 在实体类与数据库表建立映射关系时添加 ***@Table*** 注解, 当表中不存在实体类中的某个属性的时候, 就需要用到 **@Transient** 注解\n\n* 用法: 添加在需要忽略的实体类属性上\n\n> ***@Transient***\n>  private String columeName;\n\n<!-- more -->\n\n* 实体类\n```\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jdk.nashorn.internal.ir.annotations.Ignore;\nimport lombok.Data;\nimport javax.persistence.*;\n\n@lombok.Data\n@Entity\npublic class UserMonitorStationMapping {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    \n    private Integer monitorStationId;\n    \n    @Transient\n    private String shortName;        // TODO 数据库表中无此字段\n\n    @ManyToOne\n    @JsonIgnore\n    private User user;\n}\n```\n* 数据库表结构\n![这里写图片描述](https://img-blog.csdn.net/20180720163211969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n> org.hibernate.exception.SQLGrammarException: could not extract ResultSet\nat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:82)\nat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter\n.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:124)\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)\nat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:88)\nat org.hibernate.loader.Loader.getResultSet(Loader.java:2062)\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1859)\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1838)\nat org.hibernate.loader.Loader.doQuery(Loader.java:906)\nat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:348)\nat org.hibernate.loader.Loader.doList(Loader.java:2550)\nat org.hibernate.loader.Loader.doList(Loader.java:2536)\nat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2366)\nat org.hibernate.loader.Loader.list(Loader.java:2361)\nat org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:495)\nat org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:357)\nat org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:198)\nat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1230)\nat org.hibernate.internal.QueryImpl.list(QueryImpl.java:101)\nat com.bbs.dao.BaseDao.list(BaseDao.java:82)\nat com.bbs.dao.BaseDao.list(BaseDao.java:92)\nat com.bbs.service.impl.OrderServiceImpl.selectOrdersByOne(OrderServiceImpl.java:35)\nat com.bbs.service.impl.OrderServiceImpl\n\n* 解决方法\n\n> 在实体类上添加 ***@Transient*** 注解\n","source":"_posts/Springboot JPA 实体类添加@Transient.md","raw":"---\ntitle: Springboot JPA 实体类添加@Transient\ncategories: Java\ntags: java, springboot\n---\n\n* Hibernate\n\n> 在实体类与数据库表建立映射关系时添加 ***@Table*** 注解, 当表中不存在实体类中的某个属性的时候, 就需要用到 **@Transient** 注解\n\n* 用法: 添加在需要忽略的实体类属性上\n\n> ***@Transient***\n>  private String columeName;\n\n<!-- more -->\n\n* 实体类\n```\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jdk.nashorn.internal.ir.annotations.Ignore;\nimport lombok.Data;\nimport javax.persistence.*;\n\n@lombok.Data\n@Entity\npublic class UserMonitorStationMapping {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    \n    private Integer monitorStationId;\n    \n    @Transient\n    private String shortName;        // TODO 数据库表中无此字段\n\n    @ManyToOne\n    @JsonIgnore\n    private User user;\n}\n```\n* 数据库表结构\n![这里写图片描述](https://img-blog.csdn.net/20180720163211969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n> org.hibernate.exception.SQLGrammarException: could not extract ResultSet\nat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:82)\nat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter\n.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:124)\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)\nat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:88)\nat org.hibernate.loader.Loader.getResultSet(Loader.java:2062)\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1859)\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1838)\nat org.hibernate.loader.Loader.doQuery(Loader.java:906)\nat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:348)\nat org.hibernate.loader.Loader.doList(Loader.java:2550)\nat org.hibernate.loader.Loader.doList(Loader.java:2536)\nat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2366)\nat org.hibernate.loader.Loader.list(Loader.java:2361)\nat org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:495)\nat org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:357)\nat org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:198)\nat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1230)\nat org.hibernate.internal.QueryImpl.list(QueryImpl.java:101)\nat com.bbs.dao.BaseDao.list(BaseDao.java:82)\nat com.bbs.dao.BaseDao.list(BaseDao.java:92)\nat com.bbs.service.impl.OrderServiceImpl.selectOrdersByOne(OrderServiceImpl.java:35)\nat com.bbs.service.impl.OrderServiceImpl\n\n* 解决方法\n\n> 在实体类上添加 ***@Transient*** 注解\n","slug":"Springboot JPA 实体类添加@Transient","published":1,"date":"2019-04-20T12:20:10.472Z","updated":"2019-04-20T12:20:10.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtn002zvq6bg5xrzuoz","content":"<ul>\n<li>Hibernate</li>\n</ul>\n<blockquote>\n<p>在实体类与数据库表建立映射关系时添加 <strong><em>@Table</em></strong> 注解, 当表中不存在实体类中的某个属性的时候, 就需要用到 <strong>@Transient</strong> 注解</p>\n</blockquote>\n<ul>\n<li>用法: 添加在需要忽略的实体类属性上</li>\n</ul>\n<blockquote>\n<p><strong><em>@Transient</em></strong><br>\nprivate String columeName;</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>实体类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class=\"line\">import jdk.nashorn.internal.ir.annotations.Ignore;</span><br><span class=\"line\">import lombok.Data;</span><br><span class=\"line\">import javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\">@lombok.Data</span><br><span class=\"line\">@Entity</span><br><span class=\"line\">public class UserMonitorStationMapping &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Integer monitorStationId;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Transient</span><br><span class=\"line\">    private String shortName;        // TODO 数据库表中无此字段</span><br><span class=\"line\"></span><br><span class=\"line\">    @ManyToOne</span><br><span class=\"line\">    @JsonIgnore</span><br><span class=\"line\">    private User user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库表结构<br>\n<img src=\"https://img-blog.csdn.net/20180720163211969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></li>\n</ul>\n<blockquote>\n<p>org.hibernate.exception.SQLGrammarException: could not extract ResultSet<br>\nat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:82)<br>\nat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter<br>\n.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:124)<br>\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)<br>\nat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:88)<br>\nat org.hibernate.loader.Loader.getResultSet(Loader.java:2062)<br>\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1859)<br>\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1838)<br>\nat org.hibernate.loader.Loader.doQuery(Loader.java:906)<br>\nat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:348)<br>\nat org.hibernate.loader.Loader.doList(Loader.java:2550)<br>\nat org.hibernate.loader.Loader.doList(Loader.java:2536)<br>\nat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2366)<br>\nat org.hibernate.loader.Loader.list(Loader.java:2361)<br>\nat org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:495)<br>\nat org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:357)<br>\nat org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:198)<br>\nat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1230)<br>\nat org.hibernate.internal.QueryImpl.list(QueryImpl.java:101)<br>\nat com.bbs.dao.BaseDao.list(BaseDao.java:82)<br>\nat com.bbs.dao.BaseDao.list(BaseDao.java:92)<br>\nat com.bbs.service.impl.OrderServiceImpl.selectOrdersByOne(OrderServiceImpl.java:35)<br>\nat com.bbs.service.impl.OrderServiceImpl</p>\n</blockquote>\n<ul>\n<li>解决方法</li>\n</ul>\n<blockquote>\n<p>在实体类上添加 <strong><em>@Transient</em></strong> 注解</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<ul>\n<li>Hibernate</li>\n</ul>\n<blockquote>\n<p>在实体类与数据库表建立映射关系时添加 <strong><em>@Table</em></strong> 注解, 当表中不存在实体类中的某个属性的时候, 就需要用到 <strong>@Transient</strong> 注解</p>\n</blockquote>\n<ul>\n<li>用法: 添加在需要忽略的实体类属性上</li>\n</ul>\n<blockquote>\n<p><strong><em>@Transient</em></strong><br>\nprivate String columeName;</p>\n</blockquote>","more":"<ul>\n<li>实体类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class=\"line\">import jdk.nashorn.internal.ir.annotations.Ignore;</span><br><span class=\"line\">import lombok.Data;</span><br><span class=\"line\">import javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\">@lombok.Data</span><br><span class=\"line\">@Entity</span><br><span class=\"line\">public class UserMonitorStationMapping &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Integer monitorStationId;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Transient</span><br><span class=\"line\">    private String shortName;        // TODO 数据库表中无此字段</span><br><span class=\"line\"></span><br><span class=\"line\">    @ManyToOne</span><br><span class=\"line\">    @JsonIgnore</span><br><span class=\"line\">    private User user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库表结构<br>\n<img src=\"https://img-blog.csdn.net/20180720163211969?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></li>\n</ul>\n<blockquote>\n<p>org.hibernate.exception.SQLGrammarException: could not extract ResultSet<br>\nat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:82)<br>\nat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter<br>\n.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:124)<br>\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)<br>\nat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:88)<br>\nat org.hibernate.loader.Loader.getResultSet(Loader.java:2062)<br>\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1859)<br>\nat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1838)<br>\nat org.hibernate.loader.Loader.doQuery(Loader.java:906)<br>\nat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:348)<br>\nat org.hibernate.loader.Loader.doList(Loader.java:2550)<br>\nat org.hibernate.loader.Loader.doList(Loader.java:2536)<br>\nat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2366)<br>\nat org.hibernate.loader.Loader.list(Loader.java:2361)<br>\nat org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:495)<br>\nat org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:357)<br>\nat org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:198)<br>\nat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1230)<br>\nat org.hibernate.internal.QueryImpl.list(QueryImpl.java:101)<br>\nat com.bbs.dao.BaseDao.list(BaseDao.java:82)<br>\nat com.bbs.dao.BaseDao.list(BaseDao.java:92)<br>\nat com.bbs.service.impl.OrderServiceImpl.selectOrdersByOne(OrderServiceImpl.java:35)<br>\nat com.bbs.service.impl.OrderServiceImpl</p>\n</blockquote>\n<ul>\n<li>解决方法</li>\n</ul>\n<blockquote>\n<p>在实体类上添加 <strong><em>@Transient</em></strong> 注解</p>\n</blockquote>"},{"title":"Vim 操作（一）","_content":"\n##### 上下左右\n> \t左 h \t下 j\t上 k\t右 l\n---\n#### 翻页\n> 向下翻一页：ctrl  f\n> 想下翻半页：ctrl  d\n> 向上翻一页：ctrl  b\n> 向上翻半页：ctrl  u\n\n<!-- more -->\n\n#### 移动光标\n> w 移到下一个单词的开始 \n> W 移到下一个单词的开始（以空格区分是否到上一个单词）\n\n> b 移到上一个单词的开始 \n> B  移到上一个单词的开始（以空格区分是否到上一个单词）\n\n> 0(零）移到行首\n> $ 移到到行末\n> ^ 移动到当前行的第一个非空字符处（如果该行首没有空格，那么效果与0是一样的）\n> g_：移动到当前行的最后一个非空格字符处\n\n#### 插入、追加字符\n> i 当前光标处插入字符\n> o 当前行下面插入新的一行\n> O 当前行上面插入新的一行\n> a 在当前光标后追加字符\n> R  替换当前光标位置的字符\n> :r file 把文件file的内容插入到当前行的下一行\n> :r! command：把command返回的结果插入到当前行的下一行\n\n#### 拷贝一个单词、行首、行尾、整行\n> yw 拷贝光标所在的单词\n> y0 拷贝光标到行首的内容\n> y$ 拷贝光标到行末的内容\n> yy 拷贝当前行\n> nyy 拷贝从当前行到n行的内容\n\n#### 删除一个单词，行首、行尾、整行\n> x 删除光标后的字符\n> dw 删除光标处的一个单词\n> d0：删除光标处到行首的字符\nd$：删除光标处到行尾的字符\ndd：删除整行\nndd：删除n行（同样n代表数字）   \n\n#### 移动到某一行\n> G 移动到最后一行\n> nG 移动到n行\n\n#### 搜索\n> ? 向上搜索\n> / 想下搜索\n> n 跳到下一个搜索结果\n> ：set ignorecase 忽略大小写\n> ：set hlsearch\n\n","source":"_posts/Vim 操作（一）.md","raw":"---\ntitle: Vim 操作（一）\ncategories: Vim\ntags: vim\n---\n\n##### 上下左右\n> \t左 h \t下 j\t上 k\t右 l\n---\n#### 翻页\n> 向下翻一页：ctrl  f\n> 想下翻半页：ctrl  d\n> 向上翻一页：ctrl  b\n> 向上翻半页：ctrl  u\n\n<!-- more -->\n\n#### 移动光标\n> w 移到下一个单词的开始 \n> W 移到下一个单词的开始（以空格区分是否到上一个单词）\n\n> b 移到上一个单词的开始 \n> B  移到上一个单词的开始（以空格区分是否到上一个单词）\n\n> 0(零）移到行首\n> $ 移到到行末\n> ^ 移动到当前行的第一个非空字符处（如果该行首没有空格，那么效果与0是一样的）\n> g_：移动到当前行的最后一个非空格字符处\n\n#### 插入、追加字符\n> i 当前光标处插入字符\n> o 当前行下面插入新的一行\n> O 当前行上面插入新的一行\n> a 在当前光标后追加字符\n> R  替换当前光标位置的字符\n> :r file 把文件file的内容插入到当前行的下一行\n> :r! command：把command返回的结果插入到当前行的下一行\n\n#### 拷贝一个单词、行首、行尾、整行\n> yw 拷贝光标所在的单词\n> y0 拷贝光标到行首的内容\n> y$ 拷贝光标到行末的内容\n> yy 拷贝当前行\n> nyy 拷贝从当前行到n行的内容\n\n#### 删除一个单词，行首、行尾、整行\n> x 删除光标后的字符\n> dw 删除光标处的一个单词\n> d0：删除光标处到行首的字符\nd$：删除光标处到行尾的字符\ndd：删除整行\nndd：删除n行（同样n代表数字）   \n\n#### 移动到某一行\n> G 移动到最后一行\n> nG 移动到n行\n\n#### 搜索\n> ? 向上搜索\n> / 想下搜索\n> n 跳到下一个搜索结果\n> ：set ignorecase 忽略大小写\n> ：set hlsearch\n\n","slug":"Vim 操作（一）","published":1,"date":"2019-04-20T12:20:10.473Z","updated":"2019-04-20T12:20:10.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtq0032vq6bkb56shj6","content":"<h5 id=\"上下左右\">上下左右</h5>\n<blockquote>\n<p>左 h \t下 j\t上 k\t右 l</p>\n</blockquote>\n<hr>\n<h4 id=\"翻页\">翻页</h4>\n<blockquote>\n<p>向下翻一页：ctrl  f<br>\n想下翻半页：ctrl  d<br>\n向上翻一页：ctrl  b<br>\n向上翻半页：ctrl  u</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"移动光标\">移动光标</h4>\n<blockquote>\n<p>w 移到下一个单词的开始<br>\nW 移到下一个单词的开始（以空格区分是否到上一个单词）</p>\n</blockquote>\n<blockquote>\n<p>b 移到上一个单词的开始<br>\nB  移到上一个单词的开始（以空格区分是否到上一个单词）</p>\n</blockquote>\n<blockquote>\n<p>0(零）移到行首<br>\n$ 移到到行末<br>\n^ 移动到当前行的第一个非空字符处（如果该行首没有空格，那么效果与0是一样的）<br>\ng_：移动到当前行的最后一个非空格字符处</p>\n</blockquote>\n<h4 id=\"插入-追加字符\">插入、追加字符</h4>\n<blockquote>\n<p>i 当前光标处插入字符<br>\no 当前行下面插入新的一行<br>\nO 当前行上面插入新的一行<br>\na 在当前光标后追加字符<br>\nR  替换当前光标位置的字符<br>\n:r file 把文件file的内容插入到当前行的下一行<br>\n:r! command：把command返回的结果插入到当前行的下一行</p>\n</blockquote>\n<h4 id=\"拷贝一个单词-行首-行尾-整行\">拷贝一个单词、行首、行尾、整行</h4>\n<blockquote>\n<p>yw 拷贝光标所在的单词<br>\ny0 拷贝光标到行首的内容<br>\ny$ 拷贝光标到行末的内容<br>\nyy 拷贝当前行<br>\nnyy 拷贝从当前行到n行的内容</p>\n</blockquote>\n<h4 id=\"删除一个单词行首-行尾-整行\">删除一个单词，行首、行尾、整行</h4>\n<blockquote>\n<p>x 删除光标后的字符<br>\ndw 删除光标处的一个单词<br>\nd0：删除光标处到行首的字符<br>\nd$：删除光标处到行尾的字符<br>\ndd：删除整行<br>\nndd：删除n行（同样n代表数字）</p>\n</blockquote>\n<h4 id=\"移动到某一行\">移动到某一行</h4>\n<blockquote>\n<p>G 移动到最后一行<br>\nnG 移动到n行</p>\n</blockquote>\n<h4 id=\"搜索\">搜索</h4>\n<blockquote>\n<p>? 向上搜索<br>\n/ 想下搜索<br>\nn 跳到下一个搜索结果<br>\n：set ignorecase 忽略大小写<br>\n：set hlsearch</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h5>上下左右</h5>\n<blockquote>\n<p>左 h \t下 j\t上 k\t右 l</p>\n</blockquote>\n<hr>\n<h4>翻页</h4>\n<blockquote>\n<p>向下翻一页：ctrl  f<br>\n想下翻半页：ctrl  d<br>\n向上翻一页：ctrl  b<br>\n向上翻半页：ctrl  u</p>\n</blockquote>","more":"<h4>移动光标</h4>\n<blockquote>\n<p>w 移到下一个单词的开始<br>\nW 移到下一个单词的开始（以空格区分是否到上一个单词）</p>\n</blockquote>\n<blockquote>\n<p>b 移到上一个单词的开始<br>\nB  移到上一个单词的开始（以空格区分是否到上一个单词）</p>\n</blockquote>\n<blockquote>\n<p>0(零）移到行首<br>\n$ 移到到行末<br>\n^ 移动到当前行的第一个非空字符处（如果该行首没有空格，那么效果与0是一样的）<br>\ng_：移动到当前行的最后一个非空格字符处</p>\n</blockquote>\n<h4>插入、追加字符</h4>\n<blockquote>\n<p>i 当前光标处插入字符<br>\no 当前行下面插入新的一行<br>\nO 当前行上面插入新的一行<br>\na 在当前光标后追加字符<br>\nR  替换当前光标位置的字符<br>\n:r file 把文件file的内容插入到当前行的下一行<br>\n:r! command：把command返回的结果插入到当前行的下一行</p>\n</blockquote>\n<h4>拷贝一个单词、行首、行尾、整行</h4>\n<blockquote>\n<p>yw 拷贝光标所在的单词<br>\ny0 拷贝光标到行首的内容<br>\ny$ 拷贝光标到行末的内容<br>\nyy 拷贝当前行<br>\nnyy 拷贝从当前行到n行的内容</p>\n</blockquote>\n<h4>删除一个单词，行首、行尾、整行</h4>\n<blockquote>\n<p>x 删除光标后的字符<br>\ndw 删除光标处的一个单词<br>\nd0：删除光标处到行首的字符<br>\nd$：删除光标处到行尾的字符<br>\ndd：删除整行<br>\nndd：删除n行（同样n代表数字）</p>\n</blockquote>\n<h4>移动到某一行</h4>\n<blockquote>\n<p>G 移动到最后一行<br>\nnG 移动到n行</p>\n</blockquote>\n<h4>搜索</h4>\n<blockquote>\n<p>? 向上搜索<br>\n/ 想下搜索<br>\nn 跳到下一个搜索结果<br>\n：set ignorecase 忽略大小写<br>\n：set hlsearch</p>\n</blockquote>"},{"title":"Springboot项目Netty做服务端并自定义Gson配置类解析数据包","_content":"\n简述\n> Springboot项目中使用 ***Netty*** 作为服务端，接收并处理其他平台发送的 ***Json数据包***，处理拆包、粘包及数据包中时间类型是 ***long*** 类型需转成 ***Date***的情况。\n\n项目流程\n\n 1. 启动项目，开启Netty服务端口11111\n 2. 加载Bean\n 3. 本地开启socket tool，模拟发送惊悚数据包\n 4. Netty解析json包，处理特殊情况，例如 ***拆包***、***粘包***。\n 5. Gson按照配置文件处理json文件，并转换成JavaBeen\n 6. 入库。\n \n <!-- more -->\n\n项目结构（下载即可：[传送门](https://download.csdn.net/download/qq_35974759/10850042)）\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181214105924997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\npom.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>cn.angus.demo</groupId>\n    <artifactId>externalDataConnector</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.6.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <version>1.5.4.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jboss.netty</groupId>\n            <artifactId>netty</artifactId>\n            <version>3.2.10.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.json-lib</groupId>\n            <artifactId>json-lib</artifactId>\n            <version>2.4</version>\n            <classifier>jdk15</classifier>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.18</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.7</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.8.1</version>\n        </dependency>\n\t\t<dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-mongodb</artifactId>\n            <version>1.10.6.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.21</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n            <version>1.5.6.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>fluent-hc</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-all</artifactId>\n            <version>4.1.30.Final</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <mainClass>cn.angus.demo.Application</mainClass>\n            </configuration>\n        </plugin>\n    </plugins>\n    <resources>\n        <resource>\n            <directory>src/main/resources</directory>\n            <filtering>true</filtering>\n        </resource>\n    </resources>\n</build>\n</project>\n\n```\n\nListener\n\n```\npackage cn.angus.demo.listener;\n\nimport cn.angus.demo.consts.Ports;\nimport cn.angus.demo.handler.VehicleGasSyncHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport io.netty.handler.codec.json.JsonObjectDecoder;\nimport javax.annotation.PostConstruct;\n\n@Component\n@Slf4j\npublic class VehicleGasSyncListener {\n    @Autowired\n    private VehicleGasSyncHandler vehicleGasSyncHandler;\n\n    @PostConstruct\n    private void startNettyServerAsync(){\n        new Thread(this::startNettyServer).start();\n    }\n\n    private void startNettyServer(){\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer() {\n                        @Override\n                        protected void initChannel(Channel channel) throws Exception {\n                        \t// 设置连接超时时间（很重要）\n                            channel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(60));\n                            // 解决粘包问题\n                            channel.pipeline().addLast(new JsonObjectDecoder());\n                            channel.pipeline().addLast(businessGroup, \"executer\", vehicleGasSyncHandler);\n                        }\n                    });\n            ChannelFuture f = b.bind(Ports.VEHICLE_GAS_PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch(Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\nHandler\n\n```\npackage cn.angus.demo.handler;\n\nimport cn.angus.demo.dao.SpotDao;\nimport cn.angus.demo.domain.Request;\nimport cn.angus.demo.domain.Spot;\nimport com.google.gson.Gson;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.Charset;\n\n@Component\n@ChannelHandler.Sharable\n@Slf4j\npublic class VehicleGasSyncHandler extends ChannelInboundHandlerAdapter {\n\n    private final Gson gson;\n\n    @Autowired\n    private SpotDao spotDao;\n\n    private static final String SPOT = \"spot\";\n\n    @Autowired\n    public VehicleGasSyncHandler(Gson gson) {\n        this.gson = gson;\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg){\n        ByteBuf m = (ByteBuf) msg;\n        String rawMsg = m.toString(Charset.forName(\"utf-8\"));\n        log.info(\"VehicleGasSyncHandler Receive message: \" +  rawMsg);\n        if (rawMsg.length() == 0 || rawMsg.length() -1 != rawMsg.lastIndexOf(\"}\"))\n            return;\n        String response = persistAndResponse(rawMsg);\n        if (response != null) {\n            ctx.writeAndFlush(Unpooled.wrappedBuffer(response.getBytes()))\n                    .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)\n                    .addListener((ChannelFutureListener) channelFuture -> log.info(\"VehicleGasSyncHandler 成功发送响应{}\", response));\n            m.release();\n        }\n    }\n\n    private String persistAndResponse(String rawMsg) {\n        try {\n            gson.fromJson(rawMsg, Spot.class);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n        // 省略返回结果。\n        return \"\";\n    }\n\n}\n\n```\n\nGsonConfig.java\n\n```\npackage cn.angus.demo.config;\n\nimport com.google.gson.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport java.util.Date;\n\n@Configuration\npublic class GsonConfig {\n    @Bean\n    public Gson gson(){\n        return new GsonBuilder()\n                .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n                // Date 类型适配器\n                .registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> new Date(json.getAsJsonPrimitive().getAsLong()))\n                .registerTypeAdapter(Date.class, (JsonSerializer<Date>) (date, type, jsonSerializationContext) -> new JsonPrimitive(date.getTime()))\n                .create();\n    }\n}\n\n```\n\n实体类（createTime：将long转成Date）\n\n\n```\n@Data\n@Document(collection = \"vehicle_spot\")\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Spot {\n    @Id\n    private String id;\n    private String area;\n    private String address;\n    private String longitude;\n    private String latitude;\n    private Double slope;\n    private Date createTime;\n    private Boolean inUse;\n    private Integer fuelTypeId;\n    private String code;\n}\n\n```\n\nPorts.java\n\n```\npublic class Ports {\n    public static final int VEHICLE_GAS_PORT = 11111;\n}\n\n```\n\n测试用例：\n\n```\n{\n    \"_id\" : \"297e0587671b749801671b754b020000\",\n    \"area\" : \"京\",\n    \"address\" : \"北京\",\n    \"longitude\" : \"489\",\n    \"latitude\" : \"125\",\n    \"slope\" : 5.0,\n    \"create_time\" :1544756993000,\n    \"fuel_type_id\" : 1,\n    \"code\" : \"testCode\"\n}\n```\n\nmongo 入库：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181214112637648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n项目下载： [https://download.csdn.net/download/qq_35974759/10850042](https://download.csdn.net/download/qq_35974759/10850042)\n下载后导入到Idea中，配置maven，修改application-dev中的数据库地址改为你的，启动项目，利用SocketTool模拟发送数据包。\n","source":"_posts/Springboot项目Netty做服务端并自定义Gson配置类解析数据包.md","raw":"---\ntitle: Springboot项目Netty做服务端并自定义Gson配置类解析数据包\ncategories: Netty\ntags: netty\n---\n\n简述\n> Springboot项目中使用 ***Netty*** 作为服务端，接收并处理其他平台发送的 ***Json数据包***，处理拆包、粘包及数据包中时间类型是 ***long*** 类型需转成 ***Date***的情况。\n\n项目流程\n\n 1. 启动项目，开启Netty服务端口11111\n 2. 加载Bean\n 3. 本地开启socket tool，模拟发送惊悚数据包\n 4. Netty解析json包，处理特殊情况，例如 ***拆包***、***粘包***。\n 5. Gson按照配置文件处理json文件，并转换成JavaBeen\n 6. 入库。\n \n <!-- more -->\n\n项目结构（下载即可：[传送门](https://download.csdn.net/download/qq_35974759/10850042)）\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181214105924997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\npom.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>cn.angus.demo</groupId>\n    <artifactId>externalDataConnector</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.6.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <version>1.5.4.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jboss.netty</groupId>\n            <artifactId>netty</artifactId>\n            <version>3.2.10.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.json-lib</groupId>\n            <artifactId>json-lib</artifactId>\n            <version>2.4</version>\n            <classifier>jdk15</classifier>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.18</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.7</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.8.1</version>\n        </dependency>\n\t\t<dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-mongodb</artifactId>\n            <version>1.10.6.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.21</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n            <version>1.5.6.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>fluent-hc</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-all</artifactId>\n            <version>4.1.30.Final</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <mainClass>cn.angus.demo.Application</mainClass>\n            </configuration>\n        </plugin>\n    </plugins>\n    <resources>\n        <resource>\n            <directory>src/main/resources</directory>\n            <filtering>true</filtering>\n        </resource>\n    </resources>\n</build>\n</project>\n\n```\n\nListener\n\n```\npackage cn.angus.demo.listener;\n\nimport cn.angus.demo.consts.Ports;\nimport cn.angus.demo.handler.VehicleGasSyncHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport io.netty.handler.codec.json.JsonObjectDecoder;\nimport javax.annotation.PostConstruct;\n\n@Component\n@Slf4j\npublic class VehicleGasSyncListener {\n    @Autowired\n    private VehicleGasSyncHandler vehicleGasSyncHandler;\n\n    @PostConstruct\n    private void startNettyServerAsync(){\n        new Thread(this::startNettyServer).start();\n    }\n\n    private void startNettyServer(){\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer() {\n                        @Override\n                        protected void initChannel(Channel channel) throws Exception {\n                        \t// 设置连接超时时间（很重要）\n                            channel.pipeline().addLast(\"readtime\",new ReadTimeoutHandler(60));\n                            // 解决粘包问题\n                            channel.pipeline().addLast(new JsonObjectDecoder());\n                            channel.pipeline().addLast(businessGroup, \"executer\", vehicleGasSyncHandler);\n                        }\n                    });\n            ChannelFuture f = b.bind(Ports.VEHICLE_GAS_PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch(Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\nHandler\n\n```\npackage cn.angus.demo.handler;\n\nimport cn.angus.demo.dao.SpotDao;\nimport cn.angus.demo.domain.Request;\nimport cn.angus.demo.domain.Spot;\nimport com.google.gson.Gson;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.Charset;\n\n@Component\n@ChannelHandler.Sharable\n@Slf4j\npublic class VehicleGasSyncHandler extends ChannelInboundHandlerAdapter {\n\n    private final Gson gson;\n\n    @Autowired\n    private SpotDao spotDao;\n\n    private static final String SPOT = \"spot\";\n\n    @Autowired\n    public VehicleGasSyncHandler(Gson gson) {\n        this.gson = gson;\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg){\n        ByteBuf m = (ByteBuf) msg;\n        String rawMsg = m.toString(Charset.forName(\"utf-8\"));\n        log.info(\"VehicleGasSyncHandler Receive message: \" +  rawMsg);\n        if (rawMsg.length() == 0 || rawMsg.length() -1 != rawMsg.lastIndexOf(\"}\"))\n            return;\n        String response = persistAndResponse(rawMsg);\n        if (response != null) {\n            ctx.writeAndFlush(Unpooled.wrappedBuffer(response.getBytes()))\n                    .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)\n                    .addListener((ChannelFutureListener) channelFuture -> log.info(\"VehicleGasSyncHandler 成功发送响应{}\", response));\n            m.release();\n        }\n    }\n\n    private String persistAndResponse(String rawMsg) {\n        try {\n            gson.fromJson(rawMsg, Spot.class);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n        // 省略返回结果。\n        return \"\";\n    }\n\n}\n\n```\n\nGsonConfig.java\n\n```\npackage cn.angus.demo.config;\n\nimport com.google.gson.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport java.util.Date;\n\n@Configuration\npublic class GsonConfig {\n    @Bean\n    public Gson gson(){\n        return new GsonBuilder()\n                .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n                // Date 类型适配器\n                .registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> new Date(json.getAsJsonPrimitive().getAsLong()))\n                .registerTypeAdapter(Date.class, (JsonSerializer<Date>) (date, type, jsonSerializationContext) -> new JsonPrimitive(date.getTime()))\n                .create();\n    }\n}\n\n```\n\n实体类（createTime：将long转成Date）\n\n\n```\n@Data\n@Document(collection = \"vehicle_spot\")\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Spot {\n    @Id\n    private String id;\n    private String area;\n    private String address;\n    private String longitude;\n    private String latitude;\n    private Double slope;\n    private Date createTime;\n    private Boolean inUse;\n    private Integer fuelTypeId;\n    private String code;\n}\n\n```\n\nPorts.java\n\n```\npublic class Ports {\n    public static final int VEHICLE_GAS_PORT = 11111;\n}\n\n```\n\n测试用例：\n\n```\n{\n    \"_id\" : \"297e0587671b749801671b754b020000\",\n    \"area\" : \"京\",\n    \"address\" : \"北京\",\n    \"longitude\" : \"489\",\n    \"latitude\" : \"125\",\n    \"slope\" : 5.0,\n    \"create_time\" :1544756993000,\n    \"fuel_type_id\" : 1,\n    \"code\" : \"testCode\"\n}\n```\n\nmongo 入库：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181214112637648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n项目下载： [https://download.csdn.net/download/qq_35974759/10850042](https://download.csdn.net/download/qq_35974759/10850042)\n下载后导入到Idea中，配置maven，修改application-dev中的数据库地址改为你的，启动项目，利用SocketTool模拟发送数据包。\n","slug":"Springboot项目Netty做服务端并自定义Gson配置类解析数据包","published":1,"date":"2019-04-20T12:20:10.472Z","updated":"2019-04-20T12:20:10.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtt0036vq6bhucjithd","content":"<p>简述</p>\n<blockquote>\n<p>Springboot项目中使用 <strong><em>Netty</em></strong> 作为服务端，接收并处理其他平台发送的 <strong><em>Json数据包</em></strong>，处理拆包、粘包及数据包中时间类型是 <strong><em>long</em></strong> 类型需转成 <strong><em>Date</em></strong>的情况。</p>\n</blockquote>\n<p>项目流程</p>\n<ol>\n<li>启动项目，开启Netty服务端口11111</li>\n<li>加载Bean</li>\n<li>本地开启socket tool，模拟发送惊悚数据包</li>\n<li>Netty解析json包，处理特殊情况，例如 <strong><em>拆包</em></strong>、<strong><em>粘包</em></strong>。</li>\n<li>Gson按照配置文件处理json文件，并转换成JavaBeen</li>\n<li>入库。</li>\n</ol>\n <a id=\"more\"></a>\n<p>项目结构（下载即可：<a href=\"https://download.csdn.net/download/qq_35974759/10850042\" target=\"_blank\" rel=\"noopener\">传送门</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181214105924997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\npom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;cn.angus.demo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;externalDataConnector&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.2.10.Final&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.4&lt;/version&gt;</span><br><span class=\"line\">            &lt;classifier&gt;jdk15&lt;/classifier&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.16.18&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.8.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.10.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;fluent-hc&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.1.30.Final&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;cn.angus.demo.Application&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;resources&gt;</span><br><span class=\"line\">        &lt;resource&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;/resource&gt;</span><br><span class=\"line\">    &lt;/resources&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>Listener</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.listener;</span><br><span class=\"line\"></span><br><span class=\"line\">import cn.angus.demo.consts.Ports;</span><br><span class=\"line\">import cn.angus.demo.handler.VehicleGasSyncHandler;</span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.timeout.ReadTimeoutHandler;</span><br><span class=\"line\">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class=\"line\">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import io.netty.handler.codec.json.JsonObjectDecoder;</span><br><span class=\"line\">import javax.annotation.PostConstruct;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class VehicleGasSyncListener &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private VehicleGasSyncHandler vehicleGasSyncHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    private void startNettyServerAsync()&#123;</span><br><span class=\"line\">        new Thread(this::startNettyServer).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void startNettyServer()&#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, 1024)</span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(Channel channel) throws Exception &#123;</span><br><span class=\"line\">                        \t// 设置连接超时时间（很重要）</span><br><span class=\"line\">                            channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(60));</span><br><span class=\"line\">                            // 解决粘包问题</span><br><span class=\"line\">                            channel.pipeline().addLast(new JsonObjectDecoder());</span><br><span class=\"line\">                            channel.pipeline().addLast(businessGroup, &quot;executer&quot;, vehicleGasSyncHandler);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.bind(Ports.VEHICLE_GAS_PORT).sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch(Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Handler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.handler;</span><br><span class=\"line\"></span><br><span class=\"line\">import cn.angus.demo.dao.SpotDao;</span><br><span class=\"line\">import cn.angus.demo.domain.Request;</span><br><span class=\"line\">import cn.angus.demo.domain.Spot;</span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelFutureListener;</span><br><span class=\"line\">import io.netty.channel.ChannelHandler;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@ChannelHandler.Sharable</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class VehicleGasSyncHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Gson gson;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SpotDao spotDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String SPOT = &quot;spot&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    public VehicleGasSyncHandler(Gson gson) &#123;</span><br><span class=\"line\">        this.gson = gson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg)&#123;</span><br><span class=\"line\">        ByteBuf m = (ByteBuf) msg;</span><br><span class=\"line\">        String rawMsg = m.toString(Charset.forName(&quot;utf-8&quot;));</span><br><span class=\"line\">        log.info(&quot;VehicleGasSyncHandler Receive message: &quot; +  rawMsg);</span><br><span class=\"line\">        if (rawMsg.length() == 0 || rawMsg.length() -1 != rawMsg.lastIndexOf(&quot;&#125;&quot;))</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        String response = persistAndResponse(rawMsg);</span><br><span class=\"line\">        if (response != null) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(Unpooled.wrappedBuffer(response.getBytes()))</span><br><span class=\"line\">                    .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)</span><br><span class=\"line\">                    .addListener((ChannelFutureListener) channelFuture -&gt; log.info(&quot;VehicleGasSyncHandler 成功发送响应&#123;&#125;&quot;, response));</span><br><span class=\"line\">            m.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String persistAndResponse(String rawMsg) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            gson.fromJson(rawMsg, Spot.class);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 省略返回结果。</span><br><span class=\"line\">        return &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GsonConfig.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.gson.*;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class GsonConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Gson gson()&#123;</span><br><span class=\"line\">        return new GsonBuilder()</span><br><span class=\"line\">                .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)</span><br><span class=\"line\">                // Date 类型适配器</span><br><span class=\"line\">                .registerTypeAdapter(Date.class, (JsonDeserializer&lt;Date&gt;) (json, typeOfT, context) -&gt; new Date(json.getAsJsonPrimitive().getAsLong()))</span><br><span class=\"line\">                .registerTypeAdapter(Date.class, (JsonSerializer&lt;Date&gt;) (date, type, jsonSerializationContext) -&gt; new JsonPrimitive(date.getTime()))</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实体类（createTime：将long转成Date）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">@Document(collection = &quot;vehicle_spot&quot;)</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">public class Spot &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String area;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\">    private String longitude;</span><br><span class=\"line\">    private String latitude;</span><br><span class=\"line\">    private Double slope;</span><br><span class=\"line\">    private Date createTime;</span><br><span class=\"line\">    private Boolean inUse;</span><br><span class=\"line\">    private Integer fuelTypeId;</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ports.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Ports &#123;</span><br><span class=\"line\">    public static final int VEHICLE_GAS_PORT = 11111;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试用例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;297e0587671b749801671b754b020000&quot;,</span><br><span class=\"line\">    &quot;area&quot; : &quot;京&quot;,</span><br><span class=\"line\">    &quot;address&quot; : &quot;北京&quot;,</span><br><span class=\"line\">    &quot;longitude&quot; : &quot;489&quot;,</span><br><span class=\"line\">    &quot;latitude&quot; : &quot;125&quot;,</span><br><span class=\"line\">    &quot;slope&quot; : 5.0,</span><br><span class=\"line\">    &quot;create_time&quot; :1544756993000,</span><br><span class=\"line\">    &quot;fuel_type_id&quot; : 1,</span><br><span class=\"line\">    &quot;code&quot; : &quot;testCode&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mongo 入库：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181214112637648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n项目下载： <a href=\"https://download.csdn.net/download/qq_35974759/10850042\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/qq_35974759/10850042</a><br>\n下载后导入到Idea中，配置maven，修改application-dev中的数据库地址改为你的，启动项目，利用SocketTool模拟发送数据包。</p>\n","site":{"data":{}},"excerpt":"<p>简述</p>\n<blockquote>\n<p>Springboot项目中使用 <strong><em>Netty</em></strong> 作为服务端，接收并处理其他平台发送的 <strong><em>Json数据包</em></strong>，处理拆包、粘包及数据包中时间类型是 <strong><em>long</em></strong> 类型需转成 <strong><em>Date</em></strong>的情况。</p>\n</blockquote>\n<p>项目流程</p>\n<ol>\n<li>启动项目，开启Netty服务端口11111</li>\n<li>加载Bean</li>\n<li>本地开启socket tool，模拟发送惊悚数据包</li>\n<li>Netty解析json包，处理特殊情况，例如 <strong><em>拆包</em></strong>、<strong><em>粘包</em></strong>。</li>\n<li>Gson按照配置文件处理json文件，并转换成JavaBeen</li>\n<li>入库。</li>\n</ol>","more":"<p>项目结构（下载即可：<a href=\"https://download.csdn.net/download/qq_35974759/10850042\" target=\"_blank\" rel=\"noopener\">传送门</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181214105924997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\npom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;cn.angus.demo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;externalDataConnector&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.2.10.Final&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.4&lt;/version&gt;</span><br><span class=\"line\">            &lt;classifier&gt;jdk15&lt;/classifier&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.16.18&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.8.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.10.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;fluent-hc&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.1.30.Final&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;cn.angus.demo.Application&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;resources&gt;</span><br><span class=\"line\">        &lt;resource&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class=\"line\">        &lt;/resource&gt;</span><br><span class=\"line\">    &lt;/resources&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>Listener</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.listener;</span><br><span class=\"line\"></span><br><span class=\"line\">import cn.angus.demo.consts.Ports;</span><br><span class=\"line\">import cn.angus.demo.handler.VehicleGasSyncHandler;</span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.timeout.ReadTimeoutHandler;</span><br><span class=\"line\">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class=\"line\">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import io.netty.handler.codec.json.JsonObjectDecoder;</span><br><span class=\"line\">import javax.annotation.PostConstruct;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class VehicleGasSyncListener &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private VehicleGasSyncHandler vehicleGasSyncHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    private void startNettyServerAsync()&#123;</span><br><span class=\"line\">        new Thread(this::startNettyServer).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void startNettyServer()&#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        final EventExecutorGroup businessGroup = new DefaultEventExecutorGroup(10);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, 1024)</span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(Channel channel) throws Exception &#123;</span><br><span class=\"line\">                        \t// 设置连接超时时间（很重要）</span><br><span class=\"line\">                            channel.pipeline().addLast(&quot;readtime&quot;,new ReadTimeoutHandler(60));</span><br><span class=\"line\">                            // 解决粘包问题</span><br><span class=\"line\">                            channel.pipeline().addLast(new JsonObjectDecoder());</span><br><span class=\"line\">                            channel.pipeline().addLast(businessGroup, &quot;executer&quot;, vehicleGasSyncHandler);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.bind(Ports.VEHICLE_GAS_PORT).sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch(Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Handler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.handler;</span><br><span class=\"line\"></span><br><span class=\"line\">import cn.angus.demo.dao.SpotDao;</span><br><span class=\"line\">import cn.angus.demo.domain.Request;</span><br><span class=\"line\">import cn.angus.demo.domain.Spot;</span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelFutureListener;</span><br><span class=\"line\">import io.netty.channel.ChannelHandler;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@ChannelHandler.Sharable</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class VehicleGasSyncHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Gson gson;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SpotDao spotDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String SPOT = &quot;spot&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    public VehicleGasSyncHandler(Gson gson) &#123;</span><br><span class=\"line\">        this.gson = gson;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg)&#123;</span><br><span class=\"line\">        ByteBuf m = (ByteBuf) msg;</span><br><span class=\"line\">        String rawMsg = m.toString(Charset.forName(&quot;utf-8&quot;));</span><br><span class=\"line\">        log.info(&quot;VehicleGasSyncHandler Receive message: &quot; +  rawMsg);</span><br><span class=\"line\">        if (rawMsg.length() == 0 || rawMsg.length() -1 != rawMsg.lastIndexOf(&quot;&#125;&quot;))</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        String response = persistAndResponse(rawMsg);</span><br><span class=\"line\">        if (response != null) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(Unpooled.wrappedBuffer(response.getBytes()))</span><br><span class=\"line\">                    .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE)</span><br><span class=\"line\">                    .addListener((ChannelFutureListener) channelFuture -&gt; log.info(&quot;VehicleGasSyncHandler 成功发送响应&#123;&#125;&quot;, response));</span><br><span class=\"line\">            m.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String persistAndResponse(String rawMsg) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            gson.fromJson(rawMsg, Spot.class);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 省略返回结果。</span><br><span class=\"line\">        return &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GsonConfig.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.angus.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.gson.*;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class GsonConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Gson gson()&#123;</span><br><span class=\"line\">        return new GsonBuilder()</span><br><span class=\"line\">                .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)</span><br><span class=\"line\">                // Date 类型适配器</span><br><span class=\"line\">                .registerTypeAdapter(Date.class, (JsonDeserializer&lt;Date&gt;) (json, typeOfT, context) -&gt; new Date(json.getAsJsonPrimitive().getAsLong()))</span><br><span class=\"line\">                .registerTypeAdapter(Date.class, (JsonSerializer&lt;Date&gt;) (date, type, jsonSerializationContext) -&gt; new JsonPrimitive(date.getTime()))</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实体类（createTime：将long转成Date）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">@Document(collection = &quot;vehicle_spot&quot;)</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">public class Spot &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String area;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\">    private String longitude;</span><br><span class=\"line\">    private String latitude;</span><br><span class=\"line\">    private Double slope;</span><br><span class=\"line\">    private Date createTime;</span><br><span class=\"line\">    private Boolean inUse;</span><br><span class=\"line\">    private Integer fuelTypeId;</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ports.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Ports &#123;</span><br><span class=\"line\">    public static final int VEHICLE_GAS_PORT = 11111;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试用例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;297e0587671b749801671b754b020000&quot;,</span><br><span class=\"line\">    &quot;area&quot; : &quot;京&quot;,</span><br><span class=\"line\">    &quot;address&quot; : &quot;北京&quot;,</span><br><span class=\"line\">    &quot;longitude&quot; : &quot;489&quot;,</span><br><span class=\"line\">    &quot;latitude&quot; : &quot;125&quot;,</span><br><span class=\"line\">    &quot;slope&quot; : 5.0,</span><br><span class=\"line\">    &quot;create_time&quot; :1544756993000,</span><br><span class=\"line\">    &quot;fuel_type_id&quot; : 1,</span><br><span class=\"line\">    &quot;code&quot; : &quot;testCode&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mongo 入库：<br>\n<img src=\"https://img-blog.csdnimg.cn/20181214112637648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n项目下载： <a href=\"https://download.csdn.net/download/qq_35974759/10850042\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/qq_35974759/10850042</a><br>\n下载后导入到Idea中，配置maven，修改application-dev中的数据库地址改为你的，启动项目，利用SocketTool模拟发送数据包。</p>"},{"title":"Vue学习中踩的坑","_content":"\n* ERROR in Cannot find module 'node-sass'\n参考： https://blog.csdn.net/Nalaluky/article/details/82598300\n","source":"_posts/Vue学习中踩的坑.md","raw":"---\ntitle: Vue学习中踩的坑\ncategories: Vue\ntags: vue\n---\n\n* ERROR in Cannot find module 'node-sass'\n参考： https://blog.csdn.net/Nalaluky/article/details/82598300\n","slug":"Vue学习中踩的坑","published":1,"date":"2019-04-20T12:20:10.473Z","updated":"2019-04-20T12:20:10.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtv0039vq6bko7iuwcw","content":"<ul>\n<li>ERROR in Cannot find module 'node-sass’<br>\n参考： <a href=\"https://blog.csdn.net/Nalaluky/article/details/82598300\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Nalaluky/article/details/82598300</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>ERROR in Cannot find module 'node-sass’<br>\n参考： <a href=\"https://blog.csdn.net/Nalaluky/article/details/82598300\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Nalaluky/article/details/82598300</a></li>\n</ul>\n"},{"title":"Springboot自定义分页工具类","_content":"\n<!-- more -->\n\n```\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport java.util.List;\n\npublic class PageUtil {\n    /**\n     * 分页\n     * @param list\n     * @param page\n     * @param pageSize\n     * @param <T>\n     * @return\n     */\n    public static <T> Page<T> page(List<T> list, int page, int pageSize) {\n        int totalElements = list.size();\n        int start = page * pageSize;\n        int end = Math.min(start + pageSize, totalElements);\n\n        return new PageImpl<>(list.subList(start, end),\n                new PageRequest(page, pageSize),\n                totalElements);\n    }\n\n    public static <T> Page<T> builidPage(List<T> list, long totalElements, int page, int pageSize) {\n        return new PageImpl<>(list,\n                new PageRequest(page, pageSize),\n                totalElements);\n    }\n\n}\n\n```\npom.xml\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n","source":"_posts/Springbo自定义分页工具类.md","raw":"---\ntitle: Springboot自定义分页工具类\ncategories: SpringBoot\ntags: springboot\n---\n\n<!-- more -->\n\n```\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport java.util.List;\n\npublic class PageUtil {\n    /**\n     * 分页\n     * @param list\n     * @param page\n     * @param pageSize\n     * @param <T>\n     * @return\n     */\n    public static <T> Page<T> page(List<T> list, int page, int pageSize) {\n        int totalElements = list.size();\n        int start = page * pageSize;\n        int end = Math.min(start + pageSize, totalElements);\n\n        return new PageImpl<>(list.subList(start, end),\n                new PageRequest(page, pageSize),\n                totalElements);\n    }\n\n    public static <T> Page<T> builidPage(List<T> list, long totalElements, int page, int pageSize) {\n        return new PageImpl<>(list,\n                new PageRequest(page, pageSize),\n                totalElements);\n    }\n\n}\n\n```\npom.xml\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n","slug":"Springbo自定义分页工具类","published":1,"date":"2019-04-20T12:20:10.472Z","updated":"2019-04-20T12:20:10.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xtx003evq6bk67lm5yh","content":"<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.PageImpl;</span><br><span class=\"line\">import org.springframework.data.domain.PageRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PageUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分页</span><br><span class=\"line\">     * @param list</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @param pageSize</span><br><span class=\"line\">     * @param &lt;T&gt;</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Page&lt;T&gt; page(List&lt;T&gt; list, int page, int pageSize) &#123;</span><br><span class=\"line\">        int totalElements = list.size();</span><br><span class=\"line\">        int start = page * pageSize;</span><br><span class=\"line\">        int end = Math.min(start + pageSize, totalElements);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new PageImpl&lt;&gt;(list.subList(start, end),</span><br><span class=\"line\">                new PageRequest(page, pageSize),</span><br><span class=\"line\">                totalElements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static &lt;T&gt; Page&lt;T&gt; builidPage(List&lt;T&gt; list, long totalElements, int page, int pageSize) &#123;</span><br><span class=\"line\">        return new PageImpl&lt;&gt;(list,</span><br><span class=\"line\">                new PageRequest(page, pageSize),</span><br><span class=\"line\">                totalElements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.PageImpl;</span><br><span class=\"line\">import org.springframework.data.domain.PageRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PageUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分页</span><br><span class=\"line\">     * @param list</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @param pageSize</span><br><span class=\"line\">     * @param &lt;T&gt;</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Page&lt;T&gt; page(List&lt;T&gt; list, int page, int pageSize) &#123;</span><br><span class=\"line\">        int totalElements = list.size();</span><br><span class=\"line\">        int start = page * pageSize;</span><br><span class=\"line\">        int end = Math.min(start + pageSize, totalElements);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new PageImpl&lt;&gt;(list.subList(start, end),</span><br><span class=\"line\">                new PageRequest(page, pageSize),</span><br><span class=\"line\">                totalElements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static &lt;T&gt; Page&lt;T&gt; builidPage(List&lt;T&gt; list, long totalElements, int page, int pageSize) &#123;</span><br><span class=\"line\">        return new PageImpl&lt;&gt;(list,</span><br><span class=\"line\">                new PageRequest(page, pageSize),</span><br><span class=\"line\">                totalElements);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Vim 操作（二）","_content":"\n#### 操作多文件\n> vi 1.txt  2.txt  3.txt 同时打开或创建多个文件\n> :next 切换到下一个文件\n> :previous 切换到上一个文件\n> :last 切换到最后一个文件\n> :first 切换到第一个文件\n> :wnext 保存并切换到下一个文件\n> :wprevious 保存并切换到上一个文件\n> :hide e file 切换到file文件，当完成操作wq后按entry会切换回来\n\n<!-- more -->\n\n#### 保存\n> :w file 将修改后的文件另存为file2，源文件内容不更改\n> :20,$w file 将文件20行到末尾的另存为file\n> :.,20w file 将文件20行之前的内容另存为file\n> :1,2w file 将1,2行的内容另存为file\n\n#### 拷贝\n> :r file 将file文件内容拷贝到当前光标的下一行\n> :3r file 将file文件内容拷贝到当前文件第三行的下一行\n> :$r file 将file文件内容拷贝到当前文件的行尾\n> :0r file 将file文件内容拷贝到当前文件的行首\n> :/parttern/r filename ：还可以使用正则表达式，插入到匹配出的后面一行，需要注意的是如果有多处匹配，它只插入到首个匹配\n\n\n#### 模版 ab\n> ab  attr  phrase \n>> 例如： **:ab psvm public static void main(String[] args) {}** \n>\n> ab 列出所有的模版\n\n#### 模版map\n\n","source":"_posts/Vim 操作（二）.md","raw":"---\ntitle: Vim 操作（二）\ncategories: Vim\ntags: vim\n---\n\n#### 操作多文件\n> vi 1.txt  2.txt  3.txt 同时打开或创建多个文件\n> :next 切换到下一个文件\n> :previous 切换到上一个文件\n> :last 切换到最后一个文件\n> :first 切换到第一个文件\n> :wnext 保存并切换到下一个文件\n> :wprevious 保存并切换到上一个文件\n> :hide e file 切换到file文件，当完成操作wq后按entry会切换回来\n\n<!-- more -->\n\n#### 保存\n> :w file 将修改后的文件另存为file2，源文件内容不更改\n> :20,$w file 将文件20行到末尾的另存为file\n> :.,20w file 将文件20行之前的内容另存为file\n> :1,2w file 将1,2行的内容另存为file\n\n#### 拷贝\n> :r file 将file文件内容拷贝到当前光标的下一行\n> :3r file 将file文件内容拷贝到当前文件第三行的下一行\n> :$r file 将file文件内容拷贝到当前文件的行尾\n> :0r file 将file文件内容拷贝到当前文件的行首\n> :/parttern/r filename ：还可以使用正则表达式，插入到匹配出的后面一行，需要注意的是如果有多处匹配，它只插入到首个匹配\n\n\n#### 模版 ab\n> ab  attr  phrase \n>> 例如： **:ab psvm public static void main(String[] args) {}** \n>\n> ab 列出所有的模版\n\n#### 模版map\n\n","slug":"Vim 操作（二）","published":1,"date":"2019-04-20T12:20:10.473Z","updated":"2019-04-20T12:20:10.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xty003hvq6basegfhzo","content":"<h4 id=\"操作多文件\">操作多文件</h4>\n<blockquote>\n<p>vi 1.txt  2.txt  3.txt 同时打开或创建多个文件<br>\n:next 切换到下一个文件<br>\n:previous 切换到上一个文件<br>\n:last 切换到最后一个文件<br>\n:first 切换到第一个文件<br>\n:wnext 保存并切换到下一个文件<br>\n:wprevious 保存并切换到上一个文件<br>\n:hide e file 切换到file文件，当完成操作wq后按entry会切换回来</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"保存\">保存</h4>\n<blockquote>\n<p>:w file 将修改后的文件另存为file2，源文件内容不更改<br>\n:20,$w file 将文件20行到末尾的另存为file<br>\n:.,20w file 将文件20行之前的内容另存为file<br>\n:1,2w file 将1,2行的内容另存为file</p>\n</blockquote>\n<h4 id=\"拷贝\">拷贝</h4>\n<blockquote>\n<p>:r file 将file文件内容拷贝到当前光标的下一行<br>\n:3r file 将file文件内容拷贝到当前文件第三行的下一行<br>\n:$r file 将file文件内容拷贝到当前文件的行尾<br>\n:0r file 将file文件内容拷贝到当前文件的行首<br>\n:/parttern/r filename ：还可以使用正则表达式，插入到匹配出的后面一行，需要注意的是如果有多处匹配，它只插入到首个匹配</p>\n</blockquote>\n<h4 id=\"模版-ab\">模版 ab</h4>\n<blockquote>\n<p>ab  attr  phrase</p>\n<blockquote>\n<p>例如： <strong>:ab psvm public static void main(String[] args) {}</strong></p>\n</blockquote>\n<p>ab 列出所有的模版</p>\n</blockquote>\n<h4 id=\"模版map\">模版map</h4>\n","site":{"data":{}},"excerpt":"<h4>操作多文件</h4>\n<blockquote>\n<p>vi 1.txt  2.txt  3.txt 同时打开或创建多个文件<br>\n:next 切换到下一个文件<br>\n:previous 切换到上一个文件<br>\n:last 切换到最后一个文件<br>\n:first 切换到第一个文件<br>\n:wnext 保存并切换到下一个文件<br>\n:wprevious 保存并切换到上一个文件<br>\n:hide e file 切换到file文件，当完成操作wq后按entry会切换回来</p>\n</blockquote>","more":"<h4>保存</h4>\n<blockquote>\n<p>:w file 将修改后的文件另存为file2，源文件内容不更改<br>\n:20,$w file 将文件20行到末尾的另存为file<br>\n:.,20w file 将文件20行之前的内容另存为file<br>\n:1,2w file 将1,2行的内容另存为file</p>\n</blockquote>\n<h4>拷贝</h4>\n<blockquote>\n<p>:r file 将file文件内容拷贝到当前光标的下一行<br>\n:3r file 将file文件内容拷贝到当前文件第三行的下一行<br>\n:$r file 将file文件内容拷贝到当前文件的行尾<br>\n:0r file 将file文件内容拷贝到当前文件的行首<br>\n:/parttern/r filename ：还可以使用正则表达式，插入到匹配出的后面一行，需要注意的是如果有多处匹配，它只插入到首个匹配</p>\n</blockquote>\n<h4>模版 ab</h4>\n<blockquote>\n<p>ab  attr  phrase</p>\n<blockquote>\n<p>例如： <strong>:ab psvm public static void main(String[] args) {}</strong></p>\n</blockquote>\n<p>ab 列出所有的模版</p>\n</blockquote>\n<h4>模版map</h4>"},{"title":"[Hexo] Theme HuWeihuang","catalog":true,"toc_nav_num":true,"date":"2017-09-18T02:51:24.000Z","subtitle":"This is hexo theme Demo.","header-img":"/img/article_header/article_header.png","catagories":["Hexo"],"_content":"> This HuWeihuang theme created by [HuWeihuang](http://www.huweihuang.com/) modified from the original Porter [YuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)\n\n# Live Demo\n\nHu Weihuang Blog : [www.huweihuang.com](http://www.huweihuang.com/)\n\n![Theme HuWeihuang](https://res.cloudinary.com/dqxtn0ick/image/upload/v1553666111/blog/blog.jpg)\n\n# Install Hexo\n\nInstall Node.js  and Git\n\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n\nInstall hexo\n\n```shell\nnpm install hexo-cli -g\n\n#For more:https://hexo.io/zh-cn/index.html\n```\n\n# Theme Usage\n\n## Init\n\n---\n```bash\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang\ncd hexo-huweihuang\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](/img/article/tag.png)\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-huweihuang.md","raw":"---\ntitle: \"[Hexo] Theme HuWeihuang\"\ncatalog: true\ntoc_nav_num: true\ndate: 2017-09-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\n\n---\n> This HuWeihuang theme created by [HuWeihuang](http://www.huweihuang.com/) modified from the original Porter [YuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)\n\n# Live Demo\n\nHu Weihuang Blog : [www.huweihuang.com](http://www.huweihuang.com/)\n\n![Theme HuWeihuang](https://res.cloudinary.com/dqxtn0ick/image/upload/v1553666111/blog/blog.jpg)\n\n# Install Hexo\n\nInstall Node.js  and Git\n\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n\nInstall hexo\n\n```shell\nnpm install hexo-cli -g\n\n#For more:https://hexo.io/zh-cn/index.html\n```\n\n# Theme Usage\n\n## Init\n\n---\n```bash\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang\ncd hexo-huweihuang\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](/img/article/tag.png)\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-huweihuang","published":1,"updated":"2019-04-20T12:20:10.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu0003lvq6b287nayw1","content":"<blockquote>\n<p>This HuWeihuang theme created by <a href=\"http://www.huweihuang.com/\" target=\"_blank\" rel=\"noopener\">HuWeihuang</a> modified from the original Porter <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">YuHsuan</a></p>\n</blockquote>\n<h1 id=\"live-demo\">Live Demo</h1>\n<p>Hu Weihuang Blog : <a href=\"http://www.huweihuang.com/\" target=\"_blank\" rel=\"noopener\">www.huweihuang.com</a></p>\n<p><img src=\"https://res.cloudinary.com/dqxtn0ick/image/upload/v1553666111/blog/blog.jpg\" alt=\"Theme HuWeihuang\"></p>\n<h1 id=\"install-hexo\">Install Hexo</h1>\n<p>Install Node.js  and Git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>For Mac</span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<p>Install hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>For more:https://hexo.io/zh-cn/index.html</span><br></pre></td></tr></table></figure>\n<h1 id=\"theme-usage\">Theme Usage</h1>\n<h2 id=\"init\">Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-huweihuang</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"modify\">Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3 id=\"deployment\">Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sidebar-settings\">Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3 id=\"signature-setup\">Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"go-to-top-icon-setup\">Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3 id=\"post-tag\">Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/article/tag.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"markdown-render\">Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hexo-basics\">Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"have-fun-_\">Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This HuWeihuang theme created by <a href=\"http://www.huweihuang.com/\" target=\"_blank\" rel=\"noopener\">HuWeihuang</a> modified from the original Porter <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">YuHsuan</a></p>\n</blockquote>\n<h1>Live Demo</h1>\n<p>Hu Weihuang Blog : <a href=\"http://www.huweihuang.com/\" target=\"_blank\" rel=\"noopener\">www.huweihuang.com</a></p>\n<p><img src=\"https://res.cloudinary.com/dqxtn0ick/image/upload/v1553666111/blog/blog.jpg\" alt=\"Theme HuWeihuang\"></p>\n<h1>Install Hexo</h1>\n<p>Install Node.js  and Git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>For Mac</span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<p>Install hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>For more:https://hexo.io/zh-cn/index.html</span><br></pre></td></tr></table></figure>\n<h1>Theme Usage</h1>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-huweihuang</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/article/tag.png\" alt=\"home_posts_tag-true\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"Windows server部署项目（前后端分离）","date":"2018-11-20T07:20:10.000Z","_content":"\n### 环境搭建\n#### 后端：\n> 安装 jdk，maven，配置环境变量\n> 安装 nginx，并配置代理模式\n> 安装Git\n\n<!-- more -->\n\n#### 前端：\n> 安装node， cnpm， 配置node及cnpm环境变量\n\n#### 安装JDK [下载传送门](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112016574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n> 1. 选择 jdk版本  2. 同意协议   3. 选择32位或64位版本。\n\n安装：按提示进行安装，安装过程省略。最好创建一个专门的文件夹，例如我的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112315361.png)\n添加环境变量\n我的电脑 ->  属性 -> 高级系统设置 -> 环境变量 -> \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112544357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112902711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n新建JAVA_HOME\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112711795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n添加JAVA_HOME到Path中\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112821321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n测试：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218113102778.png)#### \n\n#### 安装Maven （略）[参考](https://blog.csdn.net/cs4380/article/details/79158268)\n\n#### 安装MySQL （略）[参考](https://blog.csdn.net/weixin_40396510/article/details/79277731)\n\n#### 安装Nginx \n\n参考的两篇文章\n[Windows2012中安装Nginx并创建为Windows服务](https://www.cnblogs.com/edward2013/p/5506588.html)\n[Windows下Nginx的启动、停止等命令](http://www.cnblogs.com/qianzf/p/6809427.html)\nnginx.conf配置前后端分离（最底部的server）\n\n```\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\t\t\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\t\n    # 新增\n    server {\n        # 监听9999端口，指向root所指的文件。\n        listen 9999;\n        location / {\n            # 前端Vue生成的dist文件地址\n            root D:\\workspace\\WebStorm17\\SUBWAY\\subway2\\dist;\n\t    index index.html index.htm;\n        }\n         # 前端访问的Api是http://127.0.0.1:18080/subway/...\n        location /subway {\n            proxy_pass http://127.0.0.1:18080/;\n        }\n    }\n}\n\n```\n将Nginx设置为Windows服务\n1.  需要借助\"Windows Service Wrapper\"小工具，项目地址： https://github.com/kohsuke/winsw\n下载地址： http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe\n下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样），\n2. nginx-service.xml\n\n```\n<service>\n  <id>nginx</id>\n  <name>Nginx Service</name>\n  <description>High Performance Nginx Service</description>\n  <logpath>D:\\xampp\\nginx\\logs</logpath>\n  <log mode=\"roll-by-size\">\n    <sizeThreshold>10240</sizeThreshold>\n    <keepFiles>8</keepFiles>\n  </log>\n  <executable>D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe</executable>\n  <startarguments>-p D:\\develop\\Java\\nginx\\nginx-1.12.2</startarguments>\n  <stopexecutable>D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe</stopexecutable>\n  <stoparguments>-p D:\\develop\\Java\\nginx\\nginx-1.12.2 -s stop</stoparguments>\n</service>\n```\n3. nginx-service.exe.config\n\n```\n<configuration>\n  <startup>\n    <supportedRuntime version=\"v2.0.50727\" />\n    <supportedRuntime version=\"v4.0\" />\n  </startup>\n  <runtime>\n    <generatePublisherEvidence enabled=\"false\"/> \n  </runtime>\n</configuration>\n```\n4. 在cmd中运行如下命令安装windows服务\n\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx-service.exe install\n```\n\n启动nginx\n\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  start nginx\n```\n重启\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  nginx.exe -s reload\n```\n验证：打开浏览器输入\n\n```\nhttp://127.0.0.1\n```\n默认nginx端口是80，如果启动失败，请修改nginx.conf中的监听端口为其他1000-65535之间的数\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218114705594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n#### 安装 Node [下载传送门](https://nodejs.org/dist/v10.14.2/node-v10.14.2-x64.msi)\n按照安装步骤安装即可！\n检查node和npm是否安装成功\n\n```\nC:\\Users\\Administrator> node -v\nv7.6.0\n\nC:\\Users\\Administrator>npm -v\n4.1.2\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218125512859.png)\n#### 安装cnpm \n[参考博客https://blog.csdn.net/u011342720/article/details/81267908](https://blog.csdn.net/u011342720/article/details/81267908)\n\n\n启动Vue项目\n\n```\n>  cnpm install\n...\n> npm run dev\n... \n```\n访问9999端口\n\n\n\n","source":"_posts/Windows server部署项目（前后端分离）.md","raw":"---\ntitle: Windows server部署项目（前后端分离）\ncategories: winsw\ndate: 2018-11-20 15:20:10\n---\n\n### 环境搭建\n#### 后端：\n> 安装 jdk，maven，配置环境变量\n> 安装 nginx，并配置代理模式\n> 安装Git\n\n<!-- more -->\n\n#### 前端：\n> 安装node， cnpm， 配置node及cnpm环境变量\n\n#### 安装JDK [下载传送门](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112016574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n> 1. 选择 jdk版本  2. 同意协议   3. 选择32位或64位版本。\n\n安装：按提示进行安装，安装过程省略。最好创建一个专门的文件夹，例如我的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112315361.png)\n添加环境变量\n我的电脑 ->  属性 -> 高级系统设置 -> 环境变量 -> \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112544357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112902711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n新建JAVA_HOME\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112711795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n添加JAVA_HOME到Path中\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218112821321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n测试：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218113102778.png)#### \n\n#### 安装Maven （略）[参考](https://blog.csdn.net/cs4380/article/details/79158268)\n\n#### 安装MySQL （略）[参考](https://blog.csdn.net/weixin_40396510/article/details/79277731)\n\n#### 安装Nginx \n\n参考的两篇文章\n[Windows2012中安装Nginx并创建为Windows服务](https://www.cnblogs.com/edward2013/p/5506588.html)\n[Windows下Nginx的启动、停止等命令](http://www.cnblogs.com/qianzf/p/6809427.html)\nnginx.conf配置前后端分离（最底部的server）\n\n```\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\t\t\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\t\n    # 新增\n    server {\n        # 监听9999端口，指向root所指的文件。\n        listen 9999;\n        location / {\n            # 前端Vue生成的dist文件地址\n            root D:\\workspace\\WebStorm17\\SUBWAY\\subway2\\dist;\n\t    index index.html index.htm;\n        }\n         # 前端访问的Api是http://127.0.0.1:18080/subway/...\n        location /subway {\n            proxy_pass http://127.0.0.1:18080/;\n        }\n    }\n}\n\n```\n将Nginx设置为Windows服务\n1.  需要借助\"Windows Service Wrapper\"小工具，项目地址： https://github.com/kohsuke/winsw\n下载地址： http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe\n下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样），\n2. nginx-service.xml\n\n```\n<service>\n  <id>nginx</id>\n  <name>Nginx Service</name>\n  <description>High Performance Nginx Service</description>\n  <logpath>D:\\xampp\\nginx\\logs</logpath>\n  <log mode=\"roll-by-size\">\n    <sizeThreshold>10240</sizeThreshold>\n    <keepFiles>8</keepFiles>\n  </log>\n  <executable>D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe</executable>\n  <startarguments>-p D:\\develop\\Java\\nginx\\nginx-1.12.2</startarguments>\n  <stopexecutable>D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe</stopexecutable>\n  <stoparguments>-p D:\\develop\\Java\\nginx\\nginx-1.12.2 -s stop</stoparguments>\n</service>\n```\n3. nginx-service.exe.config\n\n```\n<configuration>\n  <startup>\n    <supportedRuntime version=\"v2.0.50727\" />\n    <supportedRuntime version=\"v4.0\" />\n  </startup>\n  <runtime>\n    <generatePublisherEvidence enabled=\"false\"/> \n  </runtime>\n</configuration>\n```\n4. 在cmd中运行如下命令安装windows服务\n\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx-service.exe install\n```\n\n启动nginx\n\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  start nginx\n```\n重启\n```\nD:\\develop\\Java\\nginx\\nginx-1.12.2\\conf>  nginx.exe -s reload\n```\n验证：打开浏览器输入\n\n```\nhttp://127.0.0.1\n```\n默认nginx端口是80，如果启动失败，请修改nginx.conf中的监听端口为其他1000-65535之间的数\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218114705594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n#### 安装 Node [下载传送门](https://nodejs.org/dist/v10.14.2/node-v10.14.2-x64.msi)\n按照安装步骤安装即可！\n检查node和npm是否安装成功\n\n```\nC:\\Users\\Administrator> node -v\nv7.6.0\n\nC:\\Users\\Administrator>npm -v\n4.1.2\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181218125512859.png)\n#### 安装cnpm \n[参考博客https://blog.csdn.net/u011342720/article/details/81267908](https://blog.csdn.net/u011342720/article/details/81267908)\n\n\n启动Vue项目\n\n```\n>  cnpm install\n...\n> npm run dev\n... \n```\n访问9999端口\n\n\n\n","slug":"Windows server部署项目（前后端分离）","published":1,"updated":"2019-04-20T12:44:44.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu2003ovq6bg3cua4ex","content":"<h3 id=\"环境搭建\">环境搭建</h3>\n<h4 id=\"后端\">后端：</h4>\n<blockquote>\n<p>安装 jdk，maven，配置环境变量<br>\n安装 nginx，并配置代理模式<br>\n安装Git</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"前端\">前端：</h4>\n<blockquote>\n<p>安装node， cnpm， 配置node及cnpm环境变量</p>\n</blockquote>\n<h4 id=\"安装jdk-下载传送门\">安装JDK <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112016574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<ol>\n<li>选择 jdk版本  2. 同意协议   3. 选择32位或64位版本。</li>\n</ol>\n</blockquote>\n<p>安装：按提示进行安装，安装过程省略。最好创建一个专门的文件夹，例如我的<br>\n<img src=\"https://img-blog.csdnimg.cn/20181218112315361.png\" alt=\"在这里插入图片描述\"><br>\n添加环境变量<br>\n我的电脑 -&gt;  属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt;<br>\n<img src=\"https://img-blog.csdnimg.cn/20181218112544357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20181218112902711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>新建JAVA_HOME</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112711795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>添加JAVA_HOME到Path中</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112821321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>测试：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218113102778.png\" alt=\"在这里插入图片描述\">####</p>\n<h4 id=\"安装maven-略参考\">安装Maven （略）<a href=\"https://blog.csdn.net/cs4380/article/details/79158268\" target=\"_blank\" rel=\"noopener\">参考</a></h4>\n<h4 id=\"安装mysql-略参考\">安装MySQL （略）<a href=\"https://blog.csdn.net/weixin_40396510/article/details/79277731\" target=\"_blank\" rel=\"noopener\">参考</a></h4>\n<h4 id=\"安装nginx\">安装Nginx</h4>\n<p>参考的两篇文章<br>\n<a href=\"https://www.cnblogs.com/edward2013/p/5506588.html\" target=\"_blank\" rel=\"noopener\">Windows2012中安装Nginx并创建为Windows服务</a><br>\n<a href=\"http://www.cnblogs.com/qianzf/p/6809427.html\" target=\"_blank\" rel=\"noopener\">Windows下Nginx的启动、停止等命令</a><br>\nnginx.conf配置前后端分离（最底部的server）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">    # 新增</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听9999端口，指向root所指的文件。</span><br><span class=\"line\">        listen 9999;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            # 前端Vue生成的dist文件地址</span><br><span class=\"line\">            root D:\\workspace\\WebStorm17\\SUBWAY\\subway2\\dist;</span><br><span class=\"line\">\t    index index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         # 前端访问的Api是http://127.0.0.1:18080/subway/...</span><br><span class=\"line\">        location /subway &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:18080/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将Nginx设置为Windows服务</p>\n<ol>\n<li>需要借助&quot;Windows Service Wrapper&quot;小工具，项目地址： <a href=\"https://github.com/kohsuke/winsw\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw</a><br>\n下载地址： <a href=\"http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe\" target=\"_blank\" rel=\"noopener\">http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe</a><br>\n下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样），</li>\n<li>nginx-service.xml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service&gt;</span><br><span class=\"line\">  &lt;id&gt;nginx&lt;/id&gt;</span><br><span class=\"line\">  &lt;name&gt;Nginx Service&lt;/name&gt;</span><br><span class=\"line\">  &lt;description&gt;High Performance Nginx Service&lt;/description&gt;</span><br><span class=\"line\">  &lt;logpath&gt;D:\\xampp\\nginx\\logs&lt;/logpath&gt;</span><br><span class=\"line\">  &lt;log mode=&quot;roll-by-size&quot;&gt;</span><br><span class=\"line\">    &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;</span><br><span class=\"line\">    &lt;keepFiles&gt;8&lt;/keepFiles&gt;</span><br><span class=\"line\">  &lt;/log&gt;</span><br><span class=\"line\">  &lt;executable&gt;D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe&lt;/executable&gt;</span><br><span class=\"line\">  &lt;startarguments&gt;-p D:\\develop\\Java\\nginx\\nginx-1.12.2&lt;/startarguments&gt;</span><br><span class=\"line\">  &lt;stopexecutable&gt;D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe&lt;/stopexecutable&gt;</span><br><span class=\"line\">  &lt;stoparguments&gt;-p D:\\develop\\Java\\nginx\\nginx-1.12.2 -s stop&lt;/stoparguments&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>nginx-service.exe.config</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;startup&gt;</span><br><span class=\"line\">    &lt;supportedRuntime version=&quot;v2.0.50727&quot; /&gt;</span><br><span class=\"line\">    &lt;supportedRuntime version=&quot;v4.0&quot; /&gt;</span><br><span class=\"line\">  &lt;/startup&gt;</span><br><span class=\"line\">  &lt;runtime&gt;</span><br><span class=\"line\">    &lt;generatePublisherEvidence enabled=&quot;false&quot;/&gt; </span><br><span class=\"line\">  &lt;/runtime&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在cmd中运行如下命令安装windows服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx-service.exe install</span><br></pre></td></tr></table></figure>\n<p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  start nginx</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  nginx.exe -s reload</span><br></pre></td></tr></table></figure>\n<p>验证：打开浏览器输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>默认nginx端口是80，如果启动失败，请修改nginx.conf中的监听端口为其他1000-65535之间的数</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218114705594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"安装-node-下载传送门\">安装 Node <a href=\"https://nodejs.org/dist/v10.14.2/node-v10.14.2-x64.msi\" target=\"_blank\" rel=\"noopener\">下载传送门</a></h4>\n<p>按照安装步骤安装即可！<br>\n检查node和npm是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt; node -v</span><br><span class=\"line\">v7.6.0</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\Administrator&gt;npm -v</span><br><span class=\"line\">4.1.2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218125512859.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"安装cnpm\">安装cnpm</h4>\n<p><a href=\"https://blog.csdn.net/u011342720/article/details/81267908\" target=\"_blank\" rel=\"noopener\">参考博客https://blog.csdn.net/u011342720/article/details/81267908</a></p>\n<p>启动Vue项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  cnpm install</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt; npm run dev</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>访问9999端口</p>\n","site":{"data":{}},"excerpt":"<h3>环境搭建</h3>\n<h4>后端：</h4>\n<blockquote>\n<p>安装 jdk，maven，配置环境变量<br>\n安装 nginx，并配置代理模式<br>\n安装Git</p>\n</blockquote>","more":"<h4>前端：</h4>\n<blockquote>\n<p>安装node， cnpm， 配置node及cnpm环境变量</p>\n</blockquote>\n<h4>安装JDK <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">下载传送门</a></h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112016574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<ol>\n<li>选择 jdk版本  2. 同意协议   3. 选择32位或64位版本。</li>\n</ol>\n</blockquote>\n<p>安装：按提示进行安装，安装过程省略。最好创建一个专门的文件夹，例如我的<br>\n<img src=\"https://img-blog.csdnimg.cn/20181218112315361.png\" alt=\"在这里插入图片描述\"><br>\n添加环境变量<br>\n我的电脑 -&gt;  属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt;<br>\n<img src=\"https://img-blog.csdnimg.cn/20181218112544357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20181218112902711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>新建JAVA_HOME</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112711795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>添加JAVA_HOME到Path中</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218112821321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>测试：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218113102778.png\" alt=\"在这里插入图片描述\">####</p>\n<h4>安装Maven （略）<a href=\"https://blog.csdn.net/cs4380/article/details/79158268\" target=\"_blank\" rel=\"noopener\">参考</a></h4>\n<h4>安装MySQL （略）<a href=\"https://blog.csdn.net/weixin_40396510/article/details/79277731\" target=\"_blank\" rel=\"noopener\">参考</a></h4>\n<h4>安装Nginx</h4>\n<p>参考的两篇文章<br>\n<a href=\"https://www.cnblogs.com/edward2013/p/5506588.html\" target=\"_blank\" rel=\"noopener\">Windows2012中安装Nginx并创建为Windows服务</a><br>\n<a href=\"http://www.cnblogs.com/qianzf/p/6809427.html\" target=\"_blank\" rel=\"noopener\">Windows下Nginx的启动、停止等命令</a><br>\nnginx.conf配置前后端分离（最底部的server）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">    # 新增</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听9999端口，指向root所指的文件。</span><br><span class=\"line\">        listen 9999;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            # 前端Vue生成的dist文件地址</span><br><span class=\"line\">            root D:\\workspace\\WebStorm17\\SUBWAY\\subway2\\dist;</span><br><span class=\"line\">\t    index index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         # 前端访问的Api是http://127.0.0.1:18080/subway/...</span><br><span class=\"line\">        location /subway &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:18080/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将Nginx设置为Windows服务</p>\n<ol>\n<li>需要借助&quot;Windows Service Wrapper&quot;小工具，项目地址： <a href=\"https://github.com/kohsuke/winsw\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw</a><br>\n下载地址： <a href=\"http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe\" target=\"_blank\" rel=\"noopener\">http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe</a><br>\n下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样），</li>\n<li>nginx-service.xml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service&gt;</span><br><span class=\"line\">  &lt;id&gt;nginx&lt;/id&gt;</span><br><span class=\"line\">  &lt;name&gt;Nginx Service&lt;/name&gt;</span><br><span class=\"line\">  &lt;description&gt;High Performance Nginx Service&lt;/description&gt;</span><br><span class=\"line\">  &lt;logpath&gt;D:\\xampp\\nginx\\logs&lt;/logpath&gt;</span><br><span class=\"line\">  &lt;log mode=&quot;roll-by-size&quot;&gt;</span><br><span class=\"line\">    &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;</span><br><span class=\"line\">    &lt;keepFiles&gt;8&lt;/keepFiles&gt;</span><br><span class=\"line\">  &lt;/log&gt;</span><br><span class=\"line\">  &lt;executable&gt;D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe&lt;/executable&gt;</span><br><span class=\"line\">  &lt;startarguments&gt;-p D:\\develop\\Java\\nginx\\nginx-1.12.2&lt;/startarguments&gt;</span><br><span class=\"line\">  &lt;stopexecutable&gt;D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx.exe&lt;/stopexecutable&gt;</span><br><span class=\"line\">  &lt;stoparguments&gt;-p D:\\develop\\Java\\nginx\\nginx-1.12.2 -s stop&lt;/stoparguments&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>nginx-service.exe.config</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;startup&gt;</span><br><span class=\"line\">    &lt;supportedRuntime version=&quot;v2.0.50727&quot; /&gt;</span><br><span class=\"line\">    &lt;supportedRuntime version=&quot;v4.0&quot; /&gt;</span><br><span class=\"line\">  &lt;/startup&gt;</span><br><span class=\"line\">  &lt;runtime&gt;</span><br><span class=\"line\">    &lt;generatePublisherEvidence enabled=&quot;false&quot;/&gt; </span><br><span class=\"line\">  &lt;/runtime&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在cmd中运行如下命令安装windows服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  D:\\develop\\Java\\nginx\\nginx-1.12.2\\nginx-service.exe install</span><br></pre></td></tr></table></figure>\n<p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  start nginx</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\develop\\Java\\nginx\\nginx-1.12.2\\conf&gt;  nginx.exe -s reload</span><br></pre></td></tr></table></figure>\n<p>验证：打开浏览器输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>默认nginx端口是80，如果启动失败，请修改nginx.conf中的监听端口为其他1000-65535之间的数</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218114705594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4>安装 Node <a href=\"https://nodejs.org/dist/v10.14.2/node-v10.14.2-x64.msi\" target=\"_blank\" rel=\"noopener\">下载传送门</a></h4>\n<p>按照安装步骤安装即可！<br>\n检查node和npm是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt; node -v</span><br><span class=\"line\">v7.6.0</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\Administrator&gt;npm -v</span><br><span class=\"line\">4.1.2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20181218125512859.png\" alt=\"在这里插入图片描述\"></p>\n<h4>安装cnpm</h4>\n<p><a href=\"https://blog.csdn.net/u011342720/article/details/81267908\" target=\"_blank\" rel=\"noopener\">参考博客https://blog.csdn.net/u011342720/article/details/81267908</a></p>\n<p>启动Vue项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  cnpm install</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt; npm run dev</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>访问9999端口</p>"},{"title":"Nginx启动、重启、关闭","_content":"<!-- more -->\n转载自： https://blog.csdn.net/helloxiaozhe/article/details/80596138\n\n#### 方式一：传统方法\n##### 启动\n```\ncd usr/local/nginx/sbin\n./nginx\n```\n##### 重启\n**更改配置重启nginx**\n```\nkill -HUP 主进程号或进程号文件路径\n或者使用\ncd /usr/local/nginx/sbin\n./nginx -s reload\n```\n**判断配置文件是否正确**\n\n```\nnginx -t -c /usr/local/nginx/conf/nginx.conf\n或者\ncd  /usr/local/nginx/sbin\n./nginx -t\n```\n**关闭**\n\n```\n查询nginx主进程号\n\nps -ef | grep nginx\n\n从容停止   kill -QUIT 主进程号\n\n快速停止   kill -TERM 主进程号\n\n强制停止   kill -9 nginx\n\n若nginx.conf配置了pid文件路径，如果没有，则在logs目录下\n\nkill -信号类型 '/usr/local/nginx/logs/nginx.pid'\n```\n\n#### 方式二：通过配置/etc/init.d/nginx文件来控制\n这里使用的是编写shell脚本的方式来处理\n\nvi /etc/init.d/nginx  (输入下面的代码)\n\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.0.0.2 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n#              It has a lot of features, but it's not for everyone.\n# processname: nginx\n# pidfile: /var/run/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/var/run/nginx.pid\nRETVAL=0\nprog=\"nginx\"\n# Source function library.\n. /etc/rc.d/init.d/functions\n# Source networking configuration.\n. /etc/sysconfig/network\n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n# Start nginx daemons functions.\nstart() {\nif [ -e $nginx_pid ];then\n   echo \"nginx already running....\"\n   exit 1\nfi\n   echo -n $\"Starting $prog: \"\n   daemon $nginxd -c ${nginx_config}\n   RETVAL=$?\n   echo\n   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx\n   return $RETVAL\n}\n# Stop nginx daemons functions.\nstop() {\n        echo -n $\"Stopping $prog: \"\n        killproc $nginxd\n        RETVAL=$?\n        echo\n        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid\n}\n# reload nginx service functions.\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n# See how we were called.\ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nreload)\n        reload\n        ;;\nrestart)\n        stop\n        start\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\nexit $RETVAL\n```\n\n:wq  保存并退出\n\n***注意： nginxd和nginxconfig中写自己nginx位置！！！***\n\n设置文件的访问权限\n\nchmod a+x /etc/init.d/nginx   (a+x ==> all user can execute  所有用户可执行)\n\n这样在控制台就很容易的操作nginx了：查看Nginx当前状态、启动Nginx、停止Nginx、重启Nginx…\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307163714967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n同样的修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，\n\n##### 配置开机自启动：\n\n方式一：在/etc/rc.local中配置\n\n可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了\n\nvi /etc/rc.local\n\n加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。\n\n\n##### 将nginx配置成自启动的服务\n###### 添加至服务管理列表，并让其开机自动启动\n\n```\n[root@nginx ~]# chkconfig --add nginx\n[root@nginx ~]# chkconfig nginx on \n[root@nginx ~]# chkconfig nginx --list \nnginx              0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭\n```\n\n###### nginx启动、停止、无间断服务重启\n\n```\n[root@example ~]# service nginx start\n\n[root@example ~]# service nginx stop\n\n[root@example ~]# service nginx reload\n```\n\n###### 查看一下端口\n\n```\n[root@nginx ~]# netstat -ntlp | grep :80\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3889/nginx\n\n```\n对于其他服务也同样适用，比如Mysql,php-fpm等等\n\n###### 测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307163951737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n","source":"_posts/nginx启动、重启、关闭.md","raw":"---\ntitle: Nginx启动、重启、关闭\ncategories: Nginx\ntags: nginx\n---\n<!-- more -->\n转载自： https://blog.csdn.net/helloxiaozhe/article/details/80596138\n\n#### 方式一：传统方法\n##### 启动\n```\ncd usr/local/nginx/sbin\n./nginx\n```\n##### 重启\n**更改配置重启nginx**\n```\nkill -HUP 主进程号或进程号文件路径\n或者使用\ncd /usr/local/nginx/sbin\n./nginx -s reload\n```\n**判断配置文件是否正确**\n\n```\nnginx -t -c /usr/local/nginx/conf/nginx.conf\n或者\ncd  /usr/local/nginx/sbin\n./nginx -t\n```\n**关闭**\n\n```\n查询nginx主进程号\n\nps -ef | grep nginx\n\n从容停止   kill -QUIT 主进程号\n\n快速停止   kill -TERM 主进程号\n\n强制停止   kill -9 nginx\n\n若nginx.conf配置了pid文件路径，如果没有，则在logs目录下\n\nkill -信号类型 '/usr/local/nginx/logs/nginx.pid'\n```\n\n#### 方式二：通过配置/etc/init.d/nginx文件来控制\n这里使用的是编写shell脚本的方式来处理\n\nvi /etc/init.d/nginx  (输入下面的代码)\n\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.0.0.2 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n#              It has a lot of features, but it's not for everyone.\n# processname: nginx\n# pidfile: /var/run/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/var/run/nginx.pid\nRETVAL=0\nprog=\"nginx\"\n# Source function library.\n. /etc/rc.d/init.d/functions\n# Source networking configuration.\n. /etc/sysconfig/network\n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n# Start nginx daemons functions.\nstart() {\nif [ -e $nginx_pid ];then\n   echo \"nginx already running....\"\n   exit 1\nfi\n   echo -n $\"Starting $prog: \"\n   daemon $nginxd -c ${nginx_config}\n   RETVAL=$?\n   echo\n   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx\n   return $RETVAL\n}\n# Stop nginx daemons functions.\nstop() {\n        echo -n $\"Stopping $prog: \"\n        killproc $nginxd\n        RETVAL=$?\n        echo\n        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid\n}\n# reload nginx service functions.\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n# See how we were called.\ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nreload)\n        reload\n        ;;\nrestart)\n        stop\n        start\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\nexit $RETVAL\n```\n\n:wq  保存并退出\n\n***注意： nginxd和nginxconfig中写自己nginx位置！！！***\n\n设置文件的访问权限\n\nchmod a+x /etc/init.d/nginx   (a+x ==> all user can execute  所有用户可执行)\n\n这样在控制台就很容易的操作nginx了：查看Nginx当前状态、启动Nginx、停止Nginx、重启Nginx…\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307163714967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n同样的修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，\n\n##### 配置开机自启动：\n\n方式一：在/etc/rc.local中配置\n\n可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了\n\nvi /etc/rc.local\n\n加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。\n\n\n##### 将nginx配置成自启动的服务\n###### 添加至服务管理列表，并让其开机自动启动\n\n```\n[root@nginx ~]# chkconfig --add nginx\n[root@nginx ~]# chkconfig nginx on \n[root@nginx ~]# chkconfig nginx --list \nnginx              0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭\n```\n\n###### nginx启动、停止、无间断服务重启\n\n```\n[root@example ~]# service nginx start\n\n[root@example ~]# service nginx stop\n\n[root@example ~]# service nginx reload\n```\n\n###### 查看一下端口\n\n```\n[root@nginx ~]# netstat -ntlp | grep :80\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3889/nginx\n\n```\n对于其他服务也同样适用，比如Mysql,php-fpm等等\n\n###### 测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307163951737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n","slug":"nginx启动、重启、关闭","published":1,"date":"2019-04-20T12:20:10.490Z","updated":"2019-04-20T12:20:10.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu3003svq6b69gfwu7u","content":"<a id=\"more\"></a>\n<p>转载自： <a href=\"https://blog.csdn.net/helloxiaozhe/article/details/80596138\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/helloxiaozhe/article/details/80596138</a></p>\n<h4 id=\"方式一传统方法\">方式一：传统方法</h4>\n<h5 id=\"启动\">启动</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd usr/local/nginx/sbin</span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n<h5 id=\"重启\">重启</h5>\n<p><strong>更改配置重启nginx</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -HUP 主进程号或进程号文件路径</span><br><span class=\"line\">或者使用</span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure>\n<p><strong>判断配置文件是否正确</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">或者</span><br><span class=\"line\">cd  /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx -t</span><br></pre></td></tr></table></figure>\n<p><strong>关闭</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询nginx主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\">从容停止   kill -QUIT 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">快速停止   kill -TERM 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">强制停止   kill -9 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">若nginx.conf配置了pid文件路径，如果没有，则在logs目录下</span><br><span class=\"line\"></span><br><span class=\"line\">kill -信号类型 &apos;/usr/local/nginx/logs/nginx.pid&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式二通过配置etcinitdnginx文件来控制\">方式二：通过配置/etc/init.d/nginx文件来控制</h4>\n<p>这里使用的是编写shell脚本的方式来处理</p>\n<p>vi /etc/init.d/nginx  (输入下面的代码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.0.0.2 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\">#              It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"># pidfile: /var/run/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/var/run/nginx.pid</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">if [ -e $nginx_pid ];then</span><br><span class=\"line\">   echo &quot;nginx already running....&quot;</span><br><span class=\"line\">   exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">   echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">   daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">   RETVAL=$?</span><br><span class=\"line\">   echo</span><br><span class=\"line\">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</span><br><span class=\"line\">   return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">        killproc $nginxd</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># reload nginx service functions.</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit $RETVAL</span><br></pre></td></tr></table></figure>\n<p>:wq  保存并退出</p>\n<p><strong><em>注意： nginxd和nginxconfig中写自己nginx位置！！！</em></strong></p>\n<p>设置文件的访问权限</p>\n<p>chmod a+x /etc/init.d/nginx   (a+x ==&gt; all user can execute  所有用户可执行)</p>\n<p>这样在控制台就很容易的操作nginx了：查看Nginx当前状态、启动Nginx、停止Nginx、重启Nginx…</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190307163714967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n同样的修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，</p>\n<h5 id=\"配置开机自启动\">配置开机自启动：</h5>\n<p>方式一：在/etc/rc.local中配置</p>\n<p>可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了</p>\n<p>vi /etc/rc.local</p>\n<p>加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。</p>\n<h5 id=\"将nginx配置成自启动的服务\">将nginx配置成自启动的服务</h5>\n<h6 id=\"添加至服务管理列表并让其开机自动启动\">添加至服务管理列表，并让其开机自动启动</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@nginx ~]# chkconfig --add nginx</span><br><span class=\"line\">[root@nginx ~]# chkconfig nginx on </span><br><span class=\"line\">[root@nginx ~]# chkconfig nginx --list </span><br><span class=\"line\">nginx              0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</span><br></pre></td></tr></table></figure>\n<h6 id=\"nginx启动-停止-无间断服务重启\">nginx启动、停止、无间断服务重启</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@example ~]# service nginx start</span><br><span class=\"line\"></span><br><span class=\"line\">[root@example ~]# service nginx stop</span><br><span class=\"line\"></span><br><span class=\"line\">[root@example ~]# service nginx reload</span><br></pre></td></tr></table></figure>\n<h6 id=\"查看一下端口\">查看一下端口</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@nginx ~]# netstat -ntlp | grep :80</span><br><span class=\"line\">tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3889/nginx</span><br></pre></td></tr></table></figure>\n<p>对于其他服务也同样适用，比如Mysql,php-fpm等等</p>\n<h6 id=\"测试\">测试</h6>\n<p><img src=\"https://img-blog.csdnimg.cn/20190307163951737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载自： <a href=\"https://blog.csdn.net/helloxiaozhe/article/details/80596138\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/helloxiaozhe/article/details/80596138</a></p>\n<h4>方式一：传统方法</h4>\n<h5>启动</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd usr/local/nginx/sbin</span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n<h5>重启</h5>\n<p><strong>更改配置重启nginx</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -HUP 主进程号或进程号文件路径</span><br><span class=\"line\">或者使用</span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure>\n<p><strong>判断配置文件是否正确</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">或者</span><br><span class=\"line\">cd  /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx -t</span><br></pre></td></tr></table></figure>\n<p><strong>关闭</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询nginx主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\">从容停止   kill -QUIT 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">快速停止   kill -TERM 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">强制停止   kill -9 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">若nginx.conf配置了pid文件路径，如果没有，则在logs目录下</span><br><span class=\"line\"></span><br><span class=\"line\">kill -信号类型 &apos;/usr/local/nginx/logs/nginx.pid&apos;</span><br></pre></td></tr></table></figure>\n<h4>方式二：通过配置/etc/init.d/nginx文件来控制</h4>\n<p>这里使用的是编写shell脚本的方式来处理</p>\n<p>vi /etc/init.d/nginx  (输入下面的代码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.0.0.2 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\">#              It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"># pidfile: /var/run/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/var/run/nginx.pid</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">if [ -e $nginx_pid ];then</span><br><span class=\"line\">   echo &quot;nginx already running....&quot;</span><br><span class=\"line\">   exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">   echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">   daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">   RETVAL=$?</span><br><span class=\"line\">   echo</span><br><span class=\"line\">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</span><br><span class=\"line\">   return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">        killproc $nginxd</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># reload nginx service functions.</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit $RETVAL</span><br></pre></td></tr></table></figure>\n<p>:wq  保存并退出</p>\n<p><strong><em>注意： nginxd和nginxconfig中写自己nginx位置！！！</em></strong></p>\n<p>设置文件的访问权限</p>\n<p>chmod a+x /etc/init.d/nginx   (a+x ==&gt; all user can execute  所有用户可执行)</p>\n<p>这样在控制台就很容易的操作nginx了：查看Nginx当前状态、启动Nginx、停止Nginx、重启Nginx…</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190307163714967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n同样的修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，</p>\n<h5>配置开机自启动：</h5>\n<p>方式一：在/etc/rc.local中配置</p>\n<p>可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了</p>\n<p>vi /etc/rc.local</p>\n<p>加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。</p>\n<h5>将nginx配置成自启动的服务</h5>\n<h6>添加至服务管理列表，并让其开机自动启动</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@nginx ~]# chkconfig --add nginx</span><br><span class=\"line\">[root@nginx ~]# chkconfig nginx on </span><br><span class=\"line\">[root@nginx ~]# chkconfig nginx --list </span><br><span class=\"line\">nginx              0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</span><br></pre></td></tr></table></figure>\n<h6>nginx启动、停止、无间断服务重启</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@example ~]# service nginx start</span><br><span class=\"line\"></span><br><span class=\"line\">[root@example ~]# service nginx stop</span><br><span class=\"line\"></span><br><span class=\"line\">[root@example ~]# service nginx reload</span><br></pre></td></tr></table></figure>\n<h6>查看一下端口</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@nginx ~]# netstat -ntlp | grep :80</span><br><span class=\"line\">tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3889/nginx</span><br></pre></td></tr></table></figure>\n<p>对于其他服务也同样适用，比如Mysql,php-fpm等等</p>\n<h6>测试</h6>\n<p><img src=\"https://img-blog.csdnimg.cn/20190307163951737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>"},{"title":"Windows 关闭端口号","date":"2018-11-28T12:39:40.000Z","_content":"\n查询端口号占用的进程\n\n<!-- more -->\n\n```\nC:\\Users\\Administrator>netstat -ano | findstr 8080\n  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       9172\n  TCP    192.168.1.160:60855    47.92.114.119:8080     ESTABLISHED     9172\n  TCP    [::]:8080              [::]:0                 LISTENING       9172\n```\n\n9172就是进程号\n\n关闭进程\n```\nC:\\Users\\Administrator>taskkill -PID 9172 -F\n成功: 已终止 PID 为 9172 的进程。\n```\n\n","source":"_posts/Windows 关闭端口号.md","raw":"---\ntitle: Windows 关闭端口号\ncategories: winsw\ntags: winsw\ndate: 2018-11-28 20:39:40\n---\n\n查询端口号占用的进程\n\n<!-- more -->\n\n```\nC:\\Users\\Administrator>netstat -ano | findstr 8080\n  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       9172\n  TCP    192.168.1.160:60855    47.92.114.119:8080     ESTABLISHED     9172\n  TCP    [::]:8080              [::]:0                 LISTENING       9172\n```\n\n9172就是进程号\n\n关闭进程\n```\nC:\\Users\\Administrator>taskkill -PID 9172 -F\n成功: 已终止 PID 为 9172 的进程。\n```\n\n","slug":"Windows 关闭端口号","published":1,"updated":"2019-04-20T12:44:05.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu5003vvq6b9e0wo4e7","content":"<p>查询端口号占用的进程</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;netstat -ano | findstr 8080</span><br><span class=\"line\">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       9172</span><br><span class=\"line\">  TCP    192.168.1.160:60855    47.92.114.119:8080     ESTABLISHED     9172</span><br><span class=\"line\">  TCP    [::]:8080              [::]:0                 LISTENING       9172</span><br></pre></td></tr></table></figure>\n<p>9172就是进程号</p>\n<p>关闭进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;taskkill -PID 9172 -F</span><br><span class=\"line\">成功: 已终止 PID 为 9172 的进程。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>查询端口号占用的进程</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;netstat -ano | findstr 8080</span><br><span class=\"line\">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       9172</span><br><span class=\"line\">  TCP    192.168.1.160:60855    47.92.114.119:8080     ESTABLISHED     9172</span><br><span class=\"line\">  TCP    [::]:8080              [::]:0                 LISTENING       9172</span><br></pre></td></tr></table></figure>\n<p>9172就是进程号</p>\n<p>关闭进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;taskkill -PID 9172 -F</span><br><span class=\"line\">成功: 已终止 PID 为 9172 的进程。</span><br></pre></td></tr></table></figure>"},{"title":"Netty自定义协议上传","date":"2018-12-27T10:30:50.000Z","_content":"<!-- more -->\n* 客户端:\n```\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SocketClient {\n    public static void main(String[] args) throws InterruptedException {\n        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(eventLoopGroup)\n                    .channel(NioSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .handler(new SocketClientInitializer());\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 8899).sync();\n            channelFuture.channel().closeFuture().sync();\n        }\n        finally {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\n```\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\nimport java.io.*;\n\npublic class SocketClientHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);\n        ByteBuf buffer = allocator.buffer(20);\n\n//        String longMsgBody = \"\";\n\n        String device = \"T0001\";\n\n        String imgStr = getBytes();\n\n        int length = imgStr.length();\n        System.out.println(\"总长度: \" + length + device.length() + 8);\n        buffer.writeInt(length + device.length() + 8);\n\n//        buffer.writeBytes(new byte[]{0x0a, 0x0d});\n\n        buffer.writeInt(device.length());\n        buffer.writeInt(imgStr.length());\n        buffer.writeBytes(device.getBytes());\n\n        buffer.writeBytes(imgStr.getBytes());\n\n        ctx.writeAndFlush(buffer);\n    }\n\n    private static String getBytes() {\n        try {\n            StringBuffer sb = new StringBuffer();\n            FileInputStream fis = new FileInputStream(\"D:/mmmm.jpg\");\n            BufferedInputStream bis = new BufferedInputStream(fis);\n            java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();\n            byte[] buff = new byte[1024];\n            int len = 0;\n            while ((len = fis.read(buff)) != -1) {\n                bos.write(buff, 0, len);\n            }\n            // 得到图片的字节数组\n            byte[] result = bos.toByteArray();\n            System.out.println(byte2HexStr(result));\n            // 字节数组转成十六进制\n            String str = byte2HexStr(result);\n//            /*\n//             * 将十六进制串保存到txt文件中\n//                    */\n//            PrintWriter pw = new PrintWriter(\n//                    new FileWriter(\"D:/mmmm.txt\"));\n//            pw.println(str);\n//            pw.close();\n            return str;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n\n    /*\n     * 实现字节数组向十六进制的转换方法一\n     */\n    public static String byte2HexStr(byte[] b) {\n        String hs = \"\";\n        String stmp = \"\";\n        for (int n = 0; n < b.length; n++) {\n            stmp = (Integer.toHexString(b[n] & 0XFF));\n            if (stmp.length() == 1)\n                hs = hs + \"0\" + stmp;\n            else\n                hs = hs + stmp;\n        }\n        return hs.toUpperCase();\n    }\n\n    private static byte uniteBytes(String src0, String src1) {\n        byte b0 = Byte.decode(\"0x\" + src0).byteValue();\n        b0 = (byte) (b0 << 4);\n        byte b1 = Byte.decode(\"0x\" + src1).byteValue();\n        byte ret = (byte) (b0 | b1);\n        return ret;\n    }\n\n    /*\n     * 实现字节数组向十六进制的转换的方法二\n     */\n    public static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder(\"\");\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n}\n```\n\n```\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\npublic class SocketClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new SocketClientHandler());\n    }\n}\n```\n\n* 服务端 \n\n```\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SocketServer {\n    public static void main(String[] args) throws InterruptedException {\n        EventLoopGroup parentGroup = new NioEventLoopGroup();\n        EventLoopGroup childGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(parentGroup, childGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .childHandler(new SocketServerInitializer());\n\n            ChannelFuture channelFuture = serverBootstrap.bind(8899).sync();\n            channelFuture.channel().closeFuture().sync();\n        }\n        finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}\n\n```\n\n```\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport util.Consts;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\n\npublic class BusinessServerHandler extends ChannelInboundHandlerAdapter {\n    private static int count = 0;\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n\n        Consts.logger.info(\"BusinessServerHandler接收的二进制形式指令： \" + ByteBufUtil.hexDump(buf));\n        Consts.logger.info(\"BusinessServerHandler接收的ASCII形式指令： \" + buf.toString(Charset.forName(\"US-ASCII\")));\n        System.out.println(\"BusinessServerHandler call count=\" + ++count);\n\n        byte[] req = new byte[buf.readableBytes()];\n        buf.readBytes(req);\n\n        int total = ByteBuffer.wrap(req, 0, 4).getInt();\n        int devLength = ByteBuffer.wrap(req, 4, 4).getInt();\n        int imgLength = ByteBuffer.wrap(req, 8, 4).getInt();\n        String dev = getString(ByteBuffer.wrap(req, 12, devLength));\n        String img = getString(ByteBuffer.wrap(req, 12 + devLength, total - 12 - devLength));\n\n        Consts.logger.info(\"设备号： \" + dev);\n        Consts.logger.info(\"图片： \" + img);\n        saveToImgFile(img, \"D:/nnnn.jpg\");\n    }\n\n    /**\n     * ByteBuffer 转换 String\n     *\n     * @param buffer\n     * @return\n     */\n    public static String getString(ByteBuffer buffer) {\n        Charset charset = null;\n        CharsetDecoder decoder = null;\n        CharBuffer charBuffer = null;\n        try {\n            charset = Charset.forName(\"UTF-8\");\n            decoder = charset.newDecoder();\n            // charBuffer = decoder.decode(buffer);//用这个的话，只能输出来一次结果，第二次显示为空\n            charBuffer = decoder.decode(buffer.asReadOnlyBuffer());\n            return charBuffer.toString();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return \"\";\n        }\n    }\n\n    public void saveToImgFile(String src, String output) {\n        if (src == null || src.length() == 0) {\n            return;\n        }\n        try {\n            FileOutputStream out = new FileOutputStream(new File(output));\n            byte[] bytes = src.getBytes();\n            for (int i = 0; i < bytes.length; i += 2) {\n                out.write(charToInt(bytes[i]) * 16 + charToInt(bytes[i + 1]));\n            }\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private int charToInt(byte ch) {\n        int val = 0;\n        if (ch >= 0x30 && ch <= 0x39) {\n            val = ch - 0x30;\n        } else if (ch >= 0x41 && ch <= 0x46) {\n            val = ch - 0x41 + 10;\n        }\n        return val;\n    }\n\n}\n```\n\n```\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport util.Consts;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.List;\n\n/**\n *     0a0d  设备号长度4   图片长度4    图片\n */\npublic class SelfDefineEncodeHandler extends ByteToMessageDecoder {\n\n    private static int count = 0;\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf bufferIn, List<Object> out) throws Exception {\n        Consts.logger.info(\"decode接收的二进制形式指令： \" + ByteBufUtil.hexDump(bufferIn));\n        Consts.logger.info(\"decode接收的ASCII形式指令： \" + bufferIn.toString(Charset.forName(\"US-ASCII\")));\n        if (bufferIn.readableBytes() < 10) {\n            return;\n        }\n        int beginIndex = bufferIn.readerIndex();\n        int length = bufferIn.readInt();\n\n        System.out.println(\"decode call count=\"+ ++count);\n        System.out.println(\"bufferIn.readableBytes()=\"+bufferIn.readableBytes());\n        System.out.println(\"beginIndex=\"+beginIndex);\n\n        if (bufferIn.readableBytes() < length) {\n            bufferIn.readerIndex(beginIndex);\n            return;\n        }\n\n        bufferIn.readerIndex(beginIndex + length - 4);\n\n        ByteBuf otherByteBufRef = bufferIn.slice(beginIndex, length);\n\n        otherByteBufRef.retain();\n\n        out.add(otherByteBufRef);\n    }\n}\n\n```\n\n```\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\npublic class SocketServerInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new SelfDefineEncodeHandler());\n        pipeline.addLast(new BusinessServerHandler());\n    }\n}\n```\n\n","source":"_posts/netty自定义协议上传.md","raw":"---\ntitle: Netty自定义协议上传\ncategories: Netty\ntags: netty\ndate: 2018-12-27 18:30:50\n---\n<!-- more -->\n* 客户端:\n```\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SocketClient {\n    public static void main(String[] args) throws InterruptedException {\n        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(eventLoopGroup)\n                    .channel(NioSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .handler(new SocketClientInitializer());\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 8899).sync();\n            channelFuture.channel().closeFuture().sync();\n        }\n        finally {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\n```\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\nimport java.io.*;\n\npublic class SocketClientHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);\n        ByteBuf buffer = allocator.buffer(20);\n\n//        String longMsgBody = \"\";\n\n        String device = \"T0001\";\n\n        String imgStr = getBytes();\n\n        int length = imgStr.length();\n        System.out.println(\"总长度: \" + length + device.length() + 8);\n        buffer.writeInt(length + device.length() + 8);\n\n//        buffer.writeBytes(new byte[]{0x0a, 0x0d});\n\n        buffer.writeInt(device.length());\n        buffer.writeInt(imgStr.length());\n        buffer.writeBytes(device.getBytes());\n\n        buffer.writeBytes(imgStr.getBytes());\n\n        ctx.writeAndFlush(buffer);\n    }\n\n    private static String getBytes() {\n        try {\n            StringBuffer sb = new StringBuffer();\n            FileInputStream fis = new FileInputStream(\"D:/mmmm.jpg\");\n            BufferedInputStream bis = new BufferedInputStream(fis);\n            java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();\n            byte[] buff = new byte[1024];\n            int len = 0;\n            while ((len = fis.read(buff)) != -1) {\n                bos.write(buff, 0, len);\n            }\n            // 得到图片的字节数组\n            byte[] result = bos.toByteArray();\n            System.out.println(byte2HexStr(result));\n            // 字节数组转成十六进制\n            String str = byte2HexStr(result);\n//            /*\n//             * 将十六进制串保存到txt文件中\n//                    */\n//            PrintWriter pw = new PrintWriter(\n//                    new FileWriter(\"D:/mmmm.txt\"));\n//            pw.println(str);\n//            pw.close();\n            return str;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n\n    /*\n     * 实现字节数组向十六进制的转换方法一\n     */\n    public static String byte2HexStr(byte[] b) {\n        String hs = \"\";\n        String stmp = \"\";\n        for (int n = 0; n < b.length; n++) {\n            stmp = (Integer.toHexString(b[n] & 0XFF));\n            if (stmp.length() == 1)\n                hs = hs + \"0\" + stmp;\n            else\n                hs = hs + stmp;\n        }\n        return hs.toUpperCase();\n    }\n\n    private static byte uniteBytes(String src0, String src1) {\n        byte b0 = Byte.decode(\"0x\" + src0).byteValue();\n        b0 = (byte) (b0 << 4);\n        byte b1 = Byte.decode(\"0x\" + src1).byteValue();\n        byte ret = (byte) (b0 | b1);\n        return ret;\n    }\n\n    /*\n     * 实现字节数组向十六进制的转换的方法二\n     */\n    public static String bytesToHexString(byte[] src) {\n        StringBuilder stringBuilder = new StringBuilder(\"\");\n        if (src == null || src.length <= 0) {\n            return null;\n        }\n        for (int i = 0; i < src.length; i++) {\n            int v = src[i] & 0xFF;\n            String hv = Integer.toHexString(v);\n            if (hv.length() < 2) {\n                stringBuilder.append(0);\n            }\n            stringBuilder.append(hv);\n        }\n        return stringBuilder.toString();\n    }\n\n}\n```\n\n```\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\npublic class SocketClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new SocketClientHandler());\n    }\n}\n```\n\n* 服务端 \n\n```\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SocketServer {\n    public static void main(String[] args) throws InterruptedException {\n        EventLoopGroup parentGroup = new NioEventLoopGroup();\n        EventLoopGroup childGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(parentGroup, childGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .childHandler(new SocketServerInitializer());\n\n            ChannelFuture channelFuture = serverBootstrap.bind(8899).sync();\n            channelFuture.channel().closeFuture().sync();\n        }\n        finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}\n\n```\n\n```\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport util.Consts;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\n\npublic class BusinessServerHandler extends ChannelInboundHandlerAdapter {\n    private static int count = 0;\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n\n        Consts.logger.info(\"BusinessServerHandler接收的二进制形式指令： \" + ByteBufUtil.hexDump(buf));\n        Consts.logger.info(\"BusinessServerHandler接收的ASCII形式指令： \" + buf.toString(Charset.forName(\"US-ASCII\")));\n        System.out.println(\"BusinessServerHandler call count=\" + ++count);\n\n        byte[] req = new byte[buf.readableBytes()];\n        buf.readBytes(req);\n\n        int total = ByteBuffer.wrap(req, 0, 4).getInt();\n        int devLength = ByteBuffer.wrap(req, 4, 4).getInt();\n        int imgLength = ByteBuffer.wrap(req, 8, 4).getInt();\n        String dev = getString(ByteBuffer.wrap(req, 12, devLength));\n        String img = getString(ByteBuffer.wrap(req, 12 + devLength, total - 12 - devLength));\n\n        Consts.logger.info(\"设备号： \" + dev);\n        Consts.logger.info(\"图片： \" + img);\n        saveToImgFile(img, \"D:/nnnn.jpg\");\n    }\n\n    /**\n     * ByteBuffer 转换 String\n     *\n     * @param buffer\n     * @return\n     */\n    public static String getString(ByteBuffer buffer) {\n        Charset charset = null;\n        CharsetDecoder decoder = null;\n        CharBuffer charBuffer = null;\n        try {\n            charset = Charset.forName(\"UTF-8\");\n            decoder = charset.newDecoder();\n            // charBuffer = decoder.decode(buffer);//用这个的话，只能输出来一次结果，第二次显示为空\n            charBuffer = decoder.decode(buffer.asReadOnlyBuffer());\n            return charBuffer.toString();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return \"\";\n        }\n    }\n\n    public void saveToImgFile(String src, String output) {\n        if (src == null || src.length() == 0) {\n            return;\n        }\n        try {\n            FileOutputStream out = new FileOutputStream(new File(output));\n            byte[] bytes = src.getBytes();\n            for (int i = 0; i < bytes.length; i += 2) {\n                out.write(charToInt(bytes[i]) * 16 + charToInt(bytes[i + 1]));\n            }\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private int charToInt(byte ch) {\n        int val = 0;\n        if (ch >= 0x30 && ch <= 0x39) {\n            val = ch - 0x30;\n        } else if (ch >= 0x41 && ch <= 0x46) {\n            val = ch - 0x41 + 10;\n        }\n        return val;\n    }\n\n}\n```\n\n```\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport util.Consts;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.List;\n\n/**\n *     0a0d  设备号长度4   图片长度4    图片\n */\npublic class SelfDefineEncodeHandler extends ByteToMessageDecoder {\n\n    private static int count = 0;\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf bufferIn, List<Object> out) throws Exception {\n        Consts.logger.info(\"decode接收的二进制形式指令： \" + ByteBufUtil.hexDump(bufferIn));\n        Consts.logger.info(\"decode接收的ASCII形式指令： \" + bufferIn.toString(Charset.forName(\"US-ASCII\")));\n        if (bufferIn.readableBytes() < 10) {\n            return;\n        }\n        int beginIndex = bufferIn.readerIndex();\n        int length = bufferIn.readInt();\n\n        System.out.println(\"decode call count=\"+ ++count);\n        System.out.println(\"bufferIn.readableBytes()=\"+bufferIn.readableBytes());\n        System.out.println(\"beginIndex=\"+beginIndex);\n\n        if (bufferIn.readableBytes() < length) {\n            bufferIn.readerIndex(beginIndex);\n            return;\n        }\n\n        bufferIn.readerIndex(beginIndex + length - 4);\n\n        ByteBuf otherByteBufRef = bufferIn.slice(beginIndex, length);\n\n        otherByteBufRef.retain();\n\n        out.add(otherByteBufRef);\n    }\n}\n\n```\n\n```\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\npublic class SocketServerInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new SelfDefineEncodeHandler());\n        pipeline.addLast(new BusinessServerHandler());\n    }\n}\n```\n\n","slug":"netty自定义协议上传","published":1,"updated":"2019-04-20T12:43:11.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu6003xvq6bhwdy6i58","content":"<a id=\"more\"></a>\n<ul>\n<li>客户端:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\">import io.netty.channel.ChannelFuture;</span><br><span class=\"line\">import io.netty.channel.EventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\">import io.netty.handler.logging.LogLevel;</span><br><span class=\"line\">import io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClient &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">            bootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    .channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class=\"line\">                    .handler(new SocketClientInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;, 8899).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.UnpooledByteBufAllocator;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClientHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);</span><br><span class=\"line\">        ByteBuf buffer = allocator.buffer(20);</span><br><span class=\"line\"></span><br><span class=\"line\">//        String longMsgBody = &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String device = &quot;T0001&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String imgStr = getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">        int length = imgStr.length();</span><br><span class=\"line\">        System.out.println(&quot;总长度: &quot; + length + device.length() + 8);</span><br><span class=\"line\">        buffer.writeInt(length + device.length() + 8);</span><br><span class=\"line\"></span><br><span class=\"line\">//        buffer.writeBytes(new byte[]&#123;0x0a, 0x0d&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.writeInt(device.length());</span><br><span class=\"line\">        buffer.writeInt(imgStr.length());</span><br><span class=\"line\">        buffer.writeBytes(device.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.writeBytes(imgStr.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String getBytes() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">            FileInputStream fis = new FileInputStream(&quot;D:/mmmm.jpg&quot;);</span><br><span class=\"line\">            BufferedInputStream bis = new BufferedInputStream(fis);</span><br><span class=\"line\">            java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();</span><br><span class=\"line\">            byte[] buff = new byte[1024];</span><br><span class=\"line\">            int len = 0;</span><br><span class=\"line\">            while ((len = fis.read(buff)) != -1) &#123;</span><br><span class=\"line\">                bos.write(buff, 0, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 得到图片的字节数组</span><br><span class=\"line\">            byte[] result = bos.toByteArray();</span><br><span class=\"line\">            System.out.println(byte2HexStr(result));</span><br><span class=\"line\">            // 字节数组转成十六进制</span><br><span class=\"line\">            String str = byte2HexStr(result);</span><br><span class=\"line\">//            /*</span><br><span class=\"line\">//             * 将十六进制串保存到txt文件中</span><br><span class=\"line\">//                    */</span><br><span class=\"line\">//            PrintWriter pw = new PrintWriter(</span><br><span class=\"line\">//                    new FileWriter(&quot;D:/mmmm.txt&quot;));</span><br><span class=\"line\">//            pw.println(str);</span><br><span class=\"line\">//            pw.close();</span><br><span class=\"line\">            return str;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 实现字节数组向十六进制的转换方法一</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String byte2HexStr(byte[] b) &#123;</span><br><span class=\"line\">        String hs = &quot;&quot;;</span><br><span class=\"line\">        String stmp = &quot;&quot;;</span><br><span class=\"line\">        for (int n = 0; n &lt; b.length; n++) &#123;</span><br><span class=\"line\">            stmp = (Integer.toHexString(b[n] &amp; 0XFF));</span><br><span class=\"line\">            if (stmp.length() == 1)</span><br><span class=\"line\">                hs = hs + &quot;0&quot; + stmp;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                hs = hs + stmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hs.toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte uniteBytes(String src0, String src1) &#123;</span><br><span class=\"line\">        byte b0 = Byte.decode(&quot;0x&quot; + src0).byteValue();</span><br><span class=\"line\">        b0 = (byte) (b0 &lt;&lt; 4);</span><br><span class=\"line\">        byte b1 = Byte.decode(&quot;0x&quot; + src1).byteValue();</span><br><span class=\"line\">        byte ret = (byte) (b0 | b1);</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 实现字节数组向十六进制的转换的方法二</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String bytesToHexString(byte[] src) &#123;</span><br><span class=\"line\">        StringBuilder stringBuilder = new StringBuilder(&quot;&quot;);</span><br><span class=\"line\">        if (src == null || src.length &lt;= 0) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; src.length; i++) &#123;</span><br><span class=\"line\">            int v = src[i] &amp; 0xFF;</span><br><span class=\"line\">            String hv = Integer.toHexString(v);</span><br><span class=\"line\">            if (hv.length() &lt; 2) &#123;</span><br><span class=\"line\">                stringBuilder.append(0);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stringBuilder.append(hv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return stringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.channel.ChannelInitializer;</span><br><span class=\"line\">import io.netty.channel.ChannelPipeline;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClientInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(new SocketClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.ChannelFuture;</span><br><span class=\"line\">import io.netty.channel.EventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.logging.LogLevel;</span><br><span class=\"line\">import io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        EventLoopGroup parentGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup childGroup = new NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(parentGroup, childGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class=\"line\">                    .childHandler(new SocketServerInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(8899).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finally &#123;</span><br><span class=\"line\">            parentGroup.shutdownGracefully();</span><br><span class=\"line\">            childGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.CharBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.nio.charset.CharsetDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\">public class BusinessServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    private static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consts.logger.info(&quot;BusinessServerHandler接收的二进制形式指令： &quot; + ByteBufUtil.hexDump(buf));</span><br><span class=\"line\">        Consts.logger.info(&quot;BusinessServerHandler接收的ASCII形式指令： &quot; + buf.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        System.out.println(&quot;BusinessServerHandler call count=&quot; + ++count);</span><br><span class=\"line\"></span><br><span class=\"line\">        byte[] req = new byte[buf.readableBytes()];</span><br><span class=\"line\">        buf.readBytes(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        int total = ByteBuffer.wrap(req, 0, 4).getInt();</span><br><span class=\"line\">        int devLength = ByteBuffer.wrap(req, 4, 4).getInt();</span><br><span class=\"line\">        int imgLength = ByteBuffer.wrap(req, 8, 4).getInt();</span><br><span class=\"line\">        String dev = getString(ByteBuffer.wrap(req, 12, devLength));</span><br><span class=\"line\">        String img = getString(ByteBuffer.wrap(req, 12 + devLength, total - 12 - devLength));</span><br><span class=\"line\"></span><br><span class=\"line\">        Consts.logger.info(&quot;设备号： &quot; + dev);</span><br><span class=\"line\">        Consts.logger.info(&quot;图片： &quot; + img);</span><br><span class=\"line\">        saveToImgFile(img, &quot;D:/nnnn.jpg&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * ByteBuffer 转换 String</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param buffer</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getString(ByteBuffer buffer) &#123;</span><br><span class=\"line\">        Charset charset = null;</span><br><span class=\"line\">        CharsetDecoder decoder = null;</span><br><span class=\"line\">        CharBuffer charBuffer = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            charset = Charset.forName(&quot;UTF-8&quot;);</span><br><span class=\"line\">            decoder = charset.newDecoder();</span><br><span class=\"line\">            // charBuffer = decoder.decode(buffer);//用这个的话，只能输出来一次结果，第二次显示为空</span><br><span class=\"line\">            charBuffer = decoder.decode(buffer.asReadOnlyBuffer());</span><br><span class=\"line\">            return charBuffer.toString();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveToImgFile(String src, String output) &#123;</span><br><span class=\"line\">        if (src == null || src.length() == 0) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream out = new FileOutputStream(new File(output));</span><br><span class=\"line\">            byte[] bytes = src.getBytes();</span><br><span class=\"line\">            for (int i = 0; i &lt; bytes.length; i += 2) &#123;</span><br><span class=\"line\">                out.write(charToInt(bytes[i]) * 16 + charToInt(bytes[i + 1]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int charToInt(byte ch) &#123;</span><br><span class=\"line\">        int val = 0;</span><br><span class=\"line\">        if (ch &gt;= 0x30 &amp;&amp; ch &lt;= 0x39) &#123;</span><br><span class=\"line\">            val = ch - 0x30;</span><br><span class=\"line\">        &#125; else if (ch &gt;= 0x41 &amp;&amp; ch &lt;= 0x46) &#123;</span><br><span class=\"line\">            val = ch - 0x41 + 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *     0a0d  设备号长度4   图片长度4    图片</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SelfDefineEncodeHandler extends ByteToMessageDecoder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf bufferIn, List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        Consts.logger.info(&quot;decode接收的二进制形式指令： &quot; + ByteBufUtil.hexDump(bufferIn));</span><br><span class=\"line\">        Consts.logger.info(&quot;decode接收的ASCII形式指令： &quot; + bufferIn.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        if (bufferIn.readableBytes() &lt; 10) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int beginIndex = bufferIn.readerIndex();</span><br><span class=\"line\">        int length = bufferIn.readInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;decode call count=&quot;+ ++count);</span><br><span class=\"line\">        System.out.println(&quot;bufferIn.readableBytes()=&quot;+bufferIn.readableBytes());</span><br><span class=\"line\">        System.out.println(&quot;beginIndex=&quot;+beginIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (bufferIn.readableBytes() &lt; length) &#123;</span><br><span class=\"line\">            bufferIn.readerIndex(beginIndex);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bufferIn.readerIndex(beginIndex + length - 4);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf otherByteBufRef = bufferIn.slice(beginIndex, length);</span><br><span class=\"line\"></span><br><span class=\"line\">        otherByteBufRef.retain();</span><br><span class=\"line\"></span><br><span class=\"line\">        out.add(otherByteBufRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.channel.ChannelInitializer;</span><br><span class=\"line\">import io.netty.channel.ChannelPipeline;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(new SelfDefineEncodeHandler());</span><br><span class=\"line\">        pipeline.addLast(new BusinessServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>客户端:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\">import io.netty.channel.ChannelFuture;</span><br><span class=\"line\">import io.netty.channel.EventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\">import io.netty.handler.logging.LogLevel;</span><br><span class=\"line\">import io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClient &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">            bootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    .channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class=\"line\">                    .handler(new SocketClientInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;, 8899).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.UnpooledByteBufAllocator;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClientHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">        UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);</span><br><span class=\"line\">        ByteBuf buffer = allocator.buffer(20);</span><br><span class=\"line\"></span><br><span class=\"line\">//        String longMsgBody = &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String device = &quot;T0001&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String imgStr = getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">        int length = imgStr.length();</span><br><span class=\"line\">        System.out.println(&quot;总长度: &quot; + length + device.length() + 8);</span><br><span class=\"line\">        buffer.writeInt(length + device.length() + 8);</span><br><span class=\"line\"></span><br><span class=\"line\">//        buffer.writeBytes(new byte[]&#123;0x0a, 0x0d&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.writeInt(device.length());</span><br><span class=\"line\">        buffer.writeInt(imgStr.length());</span><br><span class=\"line\">        buffer.writeBytes(device.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.writeBytes(imgStr.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String getBytes() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">            FileInputStream fis = new FileInputStream(&quot;D:/mmmm.jpg&quot;);</span><br><span class=\"line\">            BufferedInputStream bis = new BufferedInputStream(fis);</span><br><span class=\"line\">            java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();</span><br><span class=\"line\">            byte[] buff = new byte[1024];</span><br><span class=\"line\">            int len = 0;</span><br><span class=\"line\">            while ((len = fis.read(buff)) != -1) &#123;</span><br><span class=\"line\">                bos.write(buff, 0, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 得到图片的字节数组</span><br><span class=\"line\">            byte[] result = bos.toByteArray();</span><br><span class=\"line\">            System.out.println(byte2HexStr(result));</span><br><span class=\"line\">            // 字节数组转成十六进制</span><br><span class=\"line\">            String str = byte2HexStr(result);</span><br><span class=\"line\">//            /*</span><br><span class=\"line\">//             * 将十六进制串保存到txt文件中</span><br><span class=\"line\">//                    */</span><br><span class=\"line\">//            PrintWriter pw = new PrintWriter(</span><br><span class=\"line\">//                    new FileWriter(&quot;D:/mmmm.txt&quot;));</span><br><span class=\"line\">//            pw.println(str);</span><br><span class=\"line\">//            pw.close();</span><br><span class=\"line\">            return str;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 实现字节数组向十六进制的转换方法一</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String byte2HexStr(byte[] b) &#123;</span><br><span class=\"line\">        String hs = &quot;&quot;;</span><br><span class=\"line\">        String stmp = &quot;&quot;;</span><br><span class=\"line\">        for (int n = 0; n &lt; b.length; n++) &#123;</span><br><span class=\"line\">            stmp = (Integer.toHexString(b[n] &amp; 0XFF));</span><br><span class=\"line\">            if (stmp.length() == 1)</span><br><span class=\"line\">                hs = hs + &quot;0&quot; + stmp;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                hs = hs + stmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hs.toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static byte uniteBytes(String src0, String src1) &#123;</span><br><span class=\"line\">        byte b0 = Byte.decode(&quot;0x&quot; + src0).byteValue();</span><br><span class=\"line\">        b0 = (byte) (b0 &lt;&lt; 4);</span><br><span class=\"line\">        byte b1 = Byte.decode(&quot;0x&quot; + src1).byteValue();</span><br><span class=\"line\">        byte ret = (byte) (b0 | b1);</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 实现字节数组向十六进制的转换的方法二</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String bytesToHexString(byte[] src) &#123;</span><br><span class=\"line\">        StringBuilder stringBuilder = new StringBuilder(&quot;&quot;);</span><br><span class=\"line\">        if (src == null || src.length &lt;= 0) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; src.length; i++) &#123;</span><br><span class=\"line\">            int v = src[i] &amp; 0xFF;</span><br><span class=\"line\">            String hv = Integer.toHexString(v);</span><br><span class=\"line\">            if (hv.length() &lt; 2) &#123;</span><br><span class=\"line\">                stringBuilder.append(0);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stringBuilder.append(hv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return stringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.channel.ChannelInitializer;</span><br><span class=\"line\">import io.netty.channel.ChannelPipeline;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketClientInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(new SocketClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.channel.ChannelFuture;</span><br><span class=\"line\">import io.netty.channel.EventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.handler.logging.LogLevel;</span><br><span class=\"line\">import io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        EventLoopGroup parentGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup childGroup = new NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(parentGroup, childGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class=\"line\">                    .childHandler(new SocketServerInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(8899).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finally &#123;</span><br><span class=\"line\">            parentGroup.shutdownGracefully();</span><br><span class=\"line\">            childGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.CharBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.nio.charset.CharsetDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\">public class BusinessServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    private static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consts.logger.info(&quot;BusinessServerHandler接收的二进制形式指令： &quot; + ByteBufUtil.hexDump(buf));</span><br><span class=\"line\">        Consts.logger.info(&quot;BusinessServerHandler接收的ASCII形式指令： &quot; + buf.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        System.out.println(&quot;BusinessServerHandler call count=&quot; + ++count);</span><br><span class=\"line\"></span><br><span class=\"line\">        byte[] req = new byte[buf.readableBytes()];</span><br><span class=\"line\">        buf.readBytes(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        int total = ByteBuffer.wrap(req, 0, 4).getInt();</span><br><span class=\"line\">        int devLength = ByteBuffer.wrap(req, 4, 4).getInt();</span><br><span class=\"line\">        int imgLength = ByteBuffer.wrap(req, 8, 4).getInt();</span><br><span class=\"line\">        String dev = getString(ByteBuffer.wrap(req, 12, devLength));</span><br><span class=\"line\">        String img = getString(ByteBuffer.wrap(req, 12 + devLength, total - 12 - devLength));</span><br><span class=\"line\"></span><br><span class=\"line\">        Consts.logger.info(&quot;设备号： &quot; + dev);</span><br><span class=\"line\">        Consts.logger.info(&quot;图片： &quot; + img);</span><br><span class=\"line\">        saveToImgFile(img, &quot;D:/nnnn.jpg&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * ByteBuffer 转换 String</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param buffer</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String getString(ByteBuffer buffer) &#123;</span><br><span class=\"line\">        Charset charset = null;</span><br><span class=\"line\">        CharsetDecoder decoder = null;</span><br><span class=\"line\">        CharBuffer charBuffer = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            charset = Charset.forName(&quot;UTF-8&quot;);</span><br><span class=\"line\">            decoder = charset.newDecoder();</span><br><span class=\"line\">            // charBuffer = decoder.decode(buffer);//用这个的话，只能输出来一次结果，第二次显示为空</span><br><span class=\"line\">            charBuffer = decoder.decode(buffer.asReadOnlyBuffer());</span><br><span class=\"line\">            return charBuffer.toString();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">            return &quot;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveToImgFile(String src, String output) &#123;</span><br><span class=\"line\">        if (src == null || src.length() == 0) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream out = new FileOutputStream(new File(output));</span><br><span class=\"line\">            byte[] bytes = src.getBytes();</span><br><span class=\"line\">            for (int i = 0; i &lt; bytes.length; i += 2) &#123;</span><br><span class=\"line\">                out.write(charToInt(bytes[i]) * 16 + charToInt(bytes[i + 1]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int charToInt(byte ch) &#123;</span><br><span class=\"line\">        int val = 0;</span><br><span class=\"line\">        if (ch &gt;= 0x30 &amp;&amp; ch &lt;= 0x39) &#123;</span><br><span class=\"line\">            val = ch - 0x30;</span><br><span class=\"line\">        &#125; else if (ch &gt;= 0x41 &amp;&amp; ch &lt;= 0x46) &#123;</span><br><span class=\"line\">            val = ch - 0x41 + 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\">import util.Consts;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *     0a0d  设备号长度4   图片长度4    图片</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SelfDefineEncodeHandler extends ByteToMessageDecoder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf bufferIn, List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        Consts.logger.info(&quot;decode接收的二进制形式指令： &quot; + ByteBufUtil.hexDump(bufferIn));</span><br><span class=\"line\">        Consts.logger.info(&quot;decode接收的ASCII形式指令： &quot; + bufferIn.toString(Charset.forName(&quot;US-ASCII&quot;)));</span><br><span class=\"line\">        if (bufferIn.readableBytes() &lt; 10) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int beginIndex = bufferIn.readerIndex();</span><br><span class=\"line\">        int length = bufferIn.readInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;decode call count=&quot;+ ++count);</span><br><span class=\"line\">        System.out.println(&quot;bufferIn.readableBytes()=&quot;+bufferIn.readableBytes());</span><br><span class=\"line\">        System.out.println(&quot;beginIndex=&quot;+beginIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (bufferIn.readableBytes() &lt; length) &#123;</span><br><span class=\"line\">            bufferIn.readerIndex(beginIndex);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bufferIn.readerIndex(beginIndex + length - 4);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf otherByteBufRef = bufferIn.slice(beginIndex, length);</span><br><span class=\"line\"></span><br><span class=\"line\">        otherByteBufRef.retain();</span><br><span class=\"line\"></span><br><span class=\"line\">        out.add(otherByteBufRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import io.netty.channel.ChannelInitializer;</span><br><span class=\"line\">import io.netty.channel.ChannelPipeline;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SocketServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(new SelfDefineEncodeHandler());</span><br><span class=\"line\">        pipeline.addLast(new BusinessServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"poi-tl生成Word","_content":"\n*  文档: http://deepoove.com/poi-tl/\n\n* 添加依赖\n1.  poi 版本必须大于3.14(我用的是3.17)\n2. ooxml 版本必须大于1.2(我用的是1.3)\n<!-- more -->\n```\n <!-- 模版引擎用到的jar包 -->\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi</artifactId>\n      <version>3.17</version>\n    </dependency>\n    \n    <dependency>\n      <groupId>com.deepoove</groupId>\n      <artifactId>poi-tl</artifactId>\n      <version>1.3.1</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-ooxml</artifactId>\n      <version>3.17</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-scratchpad</artifactId>\n      <version>3.17</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>ooxml-schemas</artifactId>\n      <version>1.3</version>\n    </dependency>\n```\n\n注意: 你可能遇到以下几个问题\n* poi版本过低：使用 poi 3.14 以上 \n```\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/poi/POIXMLTypeLoader\n\tat org.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument$Factory.parse(Unknown Source)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:136)\n\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:166)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.<init>(XWPFDocument.java:125)\n\tat com.deepoove.poi.NiceXWPFDocument.<init>(NiceXWPFDocument.java:85)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)\n\tat core.JingzhouDayReportDaemon.saveData2Word(JingzhouDayReportDaemon.java:187)\n\tat core.JingzhouDayReportDaemon.run(JingzhouDayReportDaemon.java:45)\n\tat core.JingzhouDayReportDaemon.main(JingzhouDayReportDaemon.java:289)\nCaused by: java.lang.ClassNotFoundException: org.apache.poi.POIXMLTypeLoader\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 12 more\n```\n\n```\n/-- Encapsulated exception ------------\\\njava.lang.NoClassDefFoundError: org/apache/poi/UnsupportedFileFormatException\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:324)\n\tat org.apache.poi.util.PackageHelper.open(PackageHelper.java:37)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.<init>(XWPFDocument.java:116)\n\tat com.deepoove.poi.NiceXWPFDocument.<init>(NiceXWPFDocument.java:85)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)\n\tat dao.analysis.daytimeReport.DaytimeReportDAO.saveData2Word(DaytimeReportDAO.java:702)\n\tat action.v3.Analysis.DayTimeReportAction.queryDayReport(DayTimeReportAction.java:369)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)\n\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)\n\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)\n\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)\n\tat ognl.ASTMethod.getValueBody(ASTMethod.java:91)\n\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n\tat ognl.SimpleNode.getValue(SimpleNode.java:258)\n\tat ognl.Ognl.getValue(Ognl.java:467)\n\tat ognl.Ognl.getValue(Ognl.java:431)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil$3.execute(OgnlUtil.java:352)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:404)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:350)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)\n\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:575)\n\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:452)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1087)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2536)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2525)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassNotFoundException: org.apache.poi.UnsupportedFileFormatException\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1892)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\t... 113 more\n```\n\n* 参考文档: https://blog.csdn.net/moshowgame/article/details/81702029\n","source":"_posts/poi-tl生成Word.md","raw":"---\ntitle: poi-tl生成Word\ncategories: Java\ntags: java, poi-tl\n---\n\n*  文档: http://deepoove.com/poi-tl/\n\n* 添加依赖\n1.  poi 版本必须大于3.14(我用的是3.17)\n2. ooxml 版本必须大于1.2(我用的是1.3)\n<!-- more -->\n```\n <!-- 模版引擎用到的jar包 -->\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi</artifactId>\n      <version>3.17</version>\n    </dependency>\n    \n    <dependency>\n      <groupId>com.deepoove</groupId>\n      <artifactId>poi-tl</artifactId>\n      <version>1.3.1</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-ooxml</artifactId>\n      <version>3.17</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-scratchpad</artifactId>\n      <version>3.17</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>ooxml-schemas</artifactId>\n      <version>1.3</version>\n    </dependency>\n```\n\n注意: 你可能遇到以下几个问题\n* poi版本过低：使用 poi 3.14 以上 \n```\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/poi/POIXMLTypeLoader\n\tat org.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument$Factory.parse(Unknown Source)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:136)\n\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:166)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.<init>(XWPFDocument.java:125)\n\tat com.deepoove.poi.NiceXWPFDocument.<init>(NiceXWPFDocument.java:85)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)\n\tat core.JingzhouDayReportDaemon.saveData2Word(JingzhouDayReportDaemon.java:187)\n\tat core.JingzhouDayReportDaemon.run(JingzhouDayReportDaemon.java:45)\n\tat core.JingzhouDayReportDaemon.main(JingzhouDayReportDaemon.java:289)\nCaused by: java.lang.ClassNotFoundException: org.apache.poi.POIXMLTypeLoader\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 12 more\n```\n\n```\n/-- Encapsulated exception ------------\\\njava.lang.NoClassDefFoundError: org/apache/poi/UnsupportedFileFormatException\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:324)\n\tat org.apache.poi.util.PackageHelper.open(PackageHelper.java:37)\n\tat org.apache.poi.xwpf.usermodel.XWPFDocument.<init>(XWPFDocument.java:116)\n\tat com.deepoove.poi.NiceXWPFDocument.<init>(NiceXWPFDocument.java:85)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)\n\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)\n\tat dao.analysis.daytimeReport.DaytimeReportDAO.saveData2Word(DaytimeReportDAO.java:702)\n\tat action.v3.Analysis.DayTimeReportAction.queryDayReport(DayTimeReportAction.java:369)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)\n\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)\n\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)\n\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)\n\tat ognl.ASTMethod.getValueBody(ASTMethod.java:91)\n\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n\tat ognl.SimpleNode.getValue(SimpleNode.java:258)\n\tat ognl.Ognl.getValue(Ognl.java:467)\n\tat ognl.Ognl.getValue(Ognl.java:431)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil$3.execute(OgnlUtil.java:352)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:404)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:350)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)\n\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:575)\n\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:452)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1087)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2536)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2525)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassNotFoundException: org.apache.poi.UnsupportedFileFormatException\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1892)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)\n\t... 113 more\n```\n\n* 参考文档: https://blog.csdn.net/moshowgame/article/details/81702029\n","slug":"poi-tl生成Word","published":1,"date":"2019-04-20T12:20:10.491Z","updated":"2019-04-20T12:20:10.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu80042vq6bpgzre5fl","content":"<ul>\n<li>\n<p>文档: <a href=\"http://deepoove.com/poi-tl/\" target=\"_blank\" rel=\"noopener\">http://deepoove.com/poi-tl/</a></p>\n</li>\n<li>\n<p>添加依赖</p>\n</li>\n</ul>\n<ol>\n<li>poi 版本必须大于3.14(我用的是3.17)</li>\n<li>ooxml 版本必须大于1.2(我用的是1.3)</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 模版引擎用到的jar包 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.deepoove&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-tl&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-scratchpad&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;ooxml-schemas&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.3&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>注意: 你可能遇到以下几个问题</p>\n<ul>\n<li>poi版本过低：使用 poi 3.14 以上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/poi/POIXMLTypeLoader</span><br><span class=\"line\">\tat org.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument$Factory.parse(Unknown Source)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:136)</span><br><span class=\"line\">\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:166)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:125)</span><br><span class=\"line\">\tat com.deepoove.poi.NiceXWPFDocument.&lt;init&gt;(NiceXWPFDocument.java:85)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.saveData2Word(JingzhouDayReportDaemon.java:187)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.run(JingzhouDayReportDaemon.java:45)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.main(JingzhouDayReportDaemon.java:289)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.poi.POIXMLTypeLoader</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\t... 12 more</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/-- Encapsulated exception ------------\\</span><br><span class=\"line\">java.lang.NoClassDefFoundError: org/apache/poi/UnsupportedFileFormatException</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:324)</span><br><span class=\"line\">\tat org.apache.poi.util.PackageHelper.open(PackageHelper.java:37)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:116)</span><br><span class=\"line\">\tat com.deepoove.poi.NiceXWPFDocument.&lt;init&gt;(NiceXWPFDocument.java:85)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)</span><br><span class=\"line\">\tat dao.analysis.daytimeReport.DaytimeReportDAO.saveData2Word(DaytimeReportDAO.java:702)</span><br><span class=\"line\">\tat action.v3.Analysis.DayTimeReportAction.queryDayReport(DayTimeReportAction.java:369)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)</span><br><span class=\"line\">\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)</span><br><span class=\"line\">\tat ognl.ASTMethod.getValueBody(ASTMethod.java:91)</span><br><span class=\"line\">\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)</span><br><span class=\"line\">\tat ognl.SimpleNode.getValue(SimpleNode.java:258)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:467)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:431)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil$3.execute(OgnlUtil.java:352)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:404)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:350)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:575)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class=\"line\">\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:452)</span><br><span class=\"line\">\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1087)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2536)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2525)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.poi.UnsupportedFileFormatException</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1892)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\t... 113 more</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档: <a href=\"https://blog.csdn.net/moshowgame/article/details/81702029\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/moshowgame/article/details/81702029</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>\n<p>文档: <a href=\"http://deepoove.com/poi-tl/\" target=\"_blank\" rel=\"noopener\">http://deepoove.com/poi-tl/</a></p>\n</li>\n<li>\n<p>添加依赖</p>\n</li>\n</ul>\n<ol>\n<li>poi 版本必须大于3.14(我用的是3.17)</li>\n<li>ooxml 版本必须大于1.2(我用的是1.3)</li>\n</ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 模版引擎用到的jar包 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.deepoove&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-tl&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;poi-scratchpad&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.17&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;ooxml-schemas&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.3&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>注意: 你可能遇到以下几个问题</p>\n<ul>\n<li>poi版本过低：使用 poi 3.14 以上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/poi/POIXMLTypeLoader</span><br><span class=\"line\">\tat org.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument$Factory.parse(Unknown Source)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:136)</span><br><span class=\"line\">\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:166)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:125)</span><br><span class=\"line\">\tat com.deepoove.poi.NiceXWPFDocument.&lt;init&gt;(NiceXWPFDocument.java:85)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.saveData2Word(JingzhouDayReportDaemon.java:187)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.run(JingzhouDayReportDaemon.java:45)</span><br><span class=\"line\">\tat core.JingzhouDayReportDaemon.main(JingzhouDayReportDaemon.java:289)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.poi.POIXMLTypeLoader</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\t... 12 more</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/-- Encapsulated exception ------------\\</span><br><span class=\"line\">java.lang.NoClassDefFoundError: org/apache/poi/UnsupportedFileFormatException</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3205)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:324)</span><br><span class=\"line\">\tat org.apache.poi.util.PackageHelper.open(PackageHelper.java:37)</span><br><span class=\"line\">\tat org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:116)</span><br><span class=\"line\">\tat com.deepoove.poi.NiceXWPFDocument.&lt;init&gt;(NiceXWPFDocument.java:85)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:129)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:110)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:78)</span><br><span class=\"line\">\tat com.deepoove.poi.XWPFTemplate.compile(XWPFTemplate.java:74)</span><br><span class=\"line\">\tat dao.analysis.daytimeReport.DaytimeReportDAO.saveData2Word(DaytimeReportDAO.java:702)</span><br><span class=\"line\">\tat action.v3.Analysis.DayTimeReportAction.queryDayReport(DayTimeReportAction.java:369)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)</span><br><span class=\"line\">\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)</span><br><span class=\"line\">\tat ognl.ASTMethod.getValueBody(ASTMethod.java:91)</span><br><span class=\"line\">\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)</span><br><span class=\"line\">\tat ognl.SimpleNode.getValue(SimpleNode.java:258)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:467)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:431)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil$3.execute(OgnlUtil.java:352)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecuteMethod(OgnlUtil.java:404)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(OgnlUtil.java:350)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:575)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class=\"line\">\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:452)</span><br><span class=\"line\">\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1087)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2536)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2525)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.poi.UnsupportedFileFormatException</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1892)</span><br><span class=\"line\">\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)</span><br><span class=\"line\">\t... 113 more</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档: <a href=\"https://blog.csdn.net/moshowgame/article/details/81702029\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/moshowgame/article/details/81702029</a></li>\n</ul>"},{"title":"《EffctiveJava》创建和销毁对象","date":"2018-07-14T13:34:14.000Z","_content":"\n# 创建和销毁对象\n## 用静态工厂方法代替构造器\n相比构造器的**优点**：\n-\t有名称：可以更明确方法的功能；\n-\t不必在调用时重复创建实例：使不可变类预先创建实例，或将实例缓存起来，避免重复创建对象，提高性能。\n-\t返回原返回类型的子类型的对象。\n-\t在创建参数化类型实例时，代码更简洁\n\t```\n\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t// 用静态工厂方法实现\n\tMap<String, String> map = HashMap.newInstence();\n\t```\n\t\n<!-- more --> \n\n相比构造器的**缺点**：\n-\t类如果不含共有的或者受保护的构造器，将不能被子类化。\n-\t与其他的静态方法没任何区别。\n\t静态工厂方法的一些命名习惯\n\t-- valueOf：类型转换方法\n\t-- of：更简洁的替代，在EnumSet中使用并流行起来\n\t-- getInstance：对于Singleton来说，该方法没有参数，只会返回一个实例。\n\t-- newInstance：与getInstance一样，但newInstance能够确保每个新实例与其他实例不同。\n\t-- getType：像getInstance一样，返回对象类型\n\t-- newType：想newInstance一样，返回对象类型\n\n综上：构造器和静态工厂方法各有优缺点，优先使用静态工厂方法。\n\n## 遇到多个构造器参数时要考虑用构建器\n> Builder模式：利用多个builder构建多个对象。推荐在多参数且参数大多数都是可选的的情况下使用。\n\n- 优点：易于阅读和编写，比JavaBean更安全。\n- 缺点：比重叠构造器冗长。\n\nBuilder模式示例：\n```\npublic class NutritionFacts {\n\n    private final int servingSize;\n\n    private final int servings;\n\n    private final int colorings;\n\n    private final int fat;\n\n    private final int sodium;\n\n    private final int carbohydrate;\n\n    public static class Builder {\n        // 必须的\n        private int servingSize = 0;\n\n        private int servings = 0;\n\n        // 非必须的\n        private int colorings = 0;\n\n        private int fat = 0;\n\n        private int sodium = 0;\n\n        private int carbohydrate = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servings = servings;\n            this.servingSize = servingSize;\n        }\n\n        public Builder calories(int colorings) {\n            this.colorings = colorings;\n            return this;\n        }\n\n        public Builder carbohydrate(int carbohydrate) {\n            this.carbohydrate = carbohydrate;\n            return this;\n        }\n\n        public Builder sodium(int sodium) {\n            this.sodium = sodium;\n            return this;\n        }\n\n        public Builder fat(int fat) {\n            this.fat = fat;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        this.servingSize = builder.servingSize;\n        this.servings =  builder.servings;\n        this.colorings =  builder.colorings;\n        this.fat =  builder.fat;\n        this.sodium =  builder.sodium;\n        this.carbohydrate =  builder.carbohydrate;\n    }\n}\n\n```\n调用：\n\n```\n NutritionFacts nutritionFacts = new NutritionFacts.Builder(1, 2)\n \t\t\t\t.calories(3).carbohydrate(4).fat(5).sodium(6)\n                .build();\n```\n\n## 用私有构造器或枚举类型强化Singleton属性\n> Singleton是指仅仅被实例化一次的类。Singleton通常被用来表示那些本质上唯一的系统组件，例如窗口管理器或文件系统。\n\n方式一：\n```\npublic class Elvis {\n\n    private Elvis() {\n        // 初始化相关操作\n    }\n\n    public static final Elvis INSTANCE = new Elvis();\n\n    public void leaveTheBuilding() {\n        // ...\n    }\n}\n```\n使用：\n\n```\nElvis.INSTANCE;\n```\n\n方式二：\n\n```\npublic class Elvis {\n\n    private Elvis() {\n        // 初始化相关操作\n    }\n    private static final Elvis INSTANCE = new Elvis();\n\n    public static Elvis getInstance() {\n        return INSTANCE;\n    }\n\n}\n\n```\n使用：\n```\nElvis.getInstance();\n```\n## 通过私有构造器强化不可实例化的能力\n一些工具类不希望被实例化，实例化对它没有任何意义。\n\n```\npublic class UtilityClass {\n\n    /**\n     * 私有构造方法，保证在任何情况下都不会被实例化\n     */\n    private UtilityClass() {\n        // 防止在当前类调用构造方法\n        throw new AssertionError();\n    }\n\n    public static boolean empty(String message) {\n        if (message == null || \"\".equals(message)) {\n            return Boolean.TRUE;\n        }\n        return Boolean.FALSE;\n    }\n}\n```\n使用：\n\n```\n UtilityClass.empty(\"hello Word\");\n```\n## 避免创建不必要的对象\n\n- 正确使用String\n反例：\n\n```\nString s  = new String(\"hello\");\t// hello本来就是字符串\n```\n正确：\n\n```\nString s = \"hello\";\n```\n\n- 自动装箱\n优先使用基本类型。\n\n## 消除过期的对象引用\n一般而言，只要类是自己管理内存，就应该警惕内存泄漏的问题。\n\n```\npublic class Stack {\n    private Object[] elements;\n\n    private int size = 0;\n\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size ++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0) {\n\n        }\n        Object e = elements[--size];\n        elements[size] = null;\n        return e;\n    }\n\n    private void ensureCapacity() {\n        if (elements.length == size) {\n            elements = Arrays.copyOf(elements, 2 * size+1);\n        }\n    }\n}\n\n```\n\n## 避免使用终结方法\ntry finally\n\n","source":"_posts/《EffctiveJava》创建和销毁对象.md","raw":"---\ntitle: 《EffctiveJava》创建和销毁对象\ncategories: EffctiveJava学习\ntags: java\ndate: 2018-07-14 21:34:14\n---\n\n# 创建和销毁对象\n## 用静态工厂方法代替构造器\n相比构造器的**优点**：\n-\t有名称：可以更明确方法的功能；\n-\t不必在调用时重复创建实例：使不可变类预先创建实例，或将实例缓存起来，避免重复创建对象，提高性能。\n-\t返回原返回类型的子类型的对象。\n-\t在创建参数化类型实例时，代码更简洁\n\t```\n\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t// 用静态工厂方法实现\n\tMap<String, String> map = HashMap.newInstence();\n\t```\n\t\n<!-- more --> \n\n相比构造器的**缺点**：\n-\t类如果不含共有的或者受保护的构造器，将不能被子类化。\n-\t与其他的静态方法没任何区别。\n\t静态工厂方法的一些命名习惯\n\t-- valueOf：类型转换方法\n\t-- of：更简洁的替代，在EnumSet中使用并流行起来\n\t-- getInstance：对于Singleton来说，该方法没有参数，只会返回一个实例。\n\t-- newInstance：与getInstance一样，但newInstance能够确保每个新实例与其他实例不同。\n\t-- getType：像getInstance一样，返回对象类型\n\t-- newType：想newInstance一样，返回对象类型\n\n综上：构造器和静态工厂方法各有优缺点，优先使用静态工厂方法。\n\n## 遇到多个构造器参数时要考虑用构建器\n> Builder模式：利用多个builder构建多个对象。推荐在多参数且参数大多数都是可选的的情况下使用。\n\n- 优点：易于阅读和编写，比JavaBean更安全。\n- 缺点：比重叠构造器冗长。\n\nBuilder模式示例：\n```\npublic class NutritionFacts {\n\n    private final int servingSize;\n\n    private final int servings;\n\n    private final int colorings;\n\n    private final int fat;\n\n    private final int sodium;\n\n    private final int carbohydrate;\n\n    public static class Builder {\n        // 必须的\n        private int servingSize = 0;\n\n        private int servings = 0;\n\n        // 非必须的\n        private int colorings = 0;\n\n        private int fat = 0;\n\n        private int sodium = 0;\n\n        private int carbohydrate = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servings = servings;\n            this.servingSize = servingSize;\n        }\n\n        public Builder calories(int colorings) {\n            this.colorings = colorings;\n            return this;\n        }\n\n        public Builder carbohydrate(int carbohydrate) {\n            this.carbohydrate = carbohydrate;\n            return this;\n        }\n\n        public Builder sodium(int sodium) {\n            this.sodium = sodium;\n            return this;\n        }\n\n        public Builder fat(int fat) {\n            this.fat = fat;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        this.servingSize = builder.servingSize;\n        this.servings =  builder.servings;\n        this.colorings =  builder.colorings;\n        this.fat =  builder.fat;\n        this.sodium =  builder.sodium;\n        this.carbohydrate =  builder.carbohydrate;\n    }\n}\n\n```\n调用：\n\n```\n NutritionFacts nutritionFacts = new NutritionFacts.Builder(1, 2)\n \t\t\t\t.calories(3).carbohydrate(4).fat(5).sodium(6)\n                .build();\n```\n\n## 用私有构造器或枚举类型强化Singleton属性\n> Singleton是指仅仅被实例化一次的类。Singleton通常被用来表示那些本质上唯一的系统组件，例如窗口管理器或文件系统。\n\n方式一：\n```\npublic class Elvis {\n\n    private Elvis() {\n        // 初始化相关操作\n    }\n\n    public static final Elvis INSTANCE = new Elvis();\n\n    public void leaveTheBuilding() {\n        // ...\n    }\n}\n```\n使用：\n\n```\nElvis.INSTANCE;\n```\n\n方式二：\n\n```\npublic class Elvis {\n\n    private Elvis() {\n        // 初始化相关操作\n    }\n    private static final Elvis INSTANCE = new Elvis();\n\n    public static Elvis getInstance() {\n        return INSTANCE;\n    }\n\n}\n\n```\n使用：\n```\nElvis.getInstance();\n```\n## 通过私有构造器强化不可实例化的能力\n一些工具类不希望被实例化，实例化对它没有任何意义。\n\n```\npublic class UtilityClass {\n\n    /**\n     * 私有构造方法，保证在任何情况下都不会被实例化\n     */\n    private UtilityClass() {\n        // 防止在当前类调用构造方法\n        throw new AssertionError();\n    }\n\n    public static boolean empty(String message) {\n        if (message == null || \"\".equals(message)) {\n            return Boolean.TRUE;\n        }\n        return Boolean.FALSE;\n    }\n}\n```\n使用：\n\n```\n UtilityClass.empty(\"hello Word\");\n```\n## 避免创建不必要的对象\n\n- 正确使用String\n反例：\n\n```\nString s  = new String(\"hello\");\t// hello本来就是字符串\n```\n正确：\n\n```\nString s = \"hello\";\n```\n\n- 自动装箱\n优先使用基本类型。\n\n## 消除过期的对象引用\n一般而言，只要类是自己管理内存，就应该警惕内存泄漏的问题。\n\n```\npublic class Stack {\n    private Object[] elements;\n\n    private int size = 0;\n\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size ++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0) {\n\n        }\n        Object e = elements[--size];\n        elements[size] = null;\n        return e;\n    }\n\n    private void ensureCapacity() {\n        if (elements.length == size) {\n            elements = Arrays.copyOf(elements, 2 * size+1);\n        }\n    }\n}\n\n```\n\n## 避免使用终结方法\ntry finally\n\n","slug":"《EffctiveJava》创建和销毁对象","published":1,"updated":"2019-04-20T12:25:15.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xu90045vq6bscgadwu9","content":"<h1 id=\"创建和销毁对象\">创建和销毁对象</h1>\n<h2 id=\"用静态工厂方法代替构造器\">用静态工厂方法代替构造器</h2>\n<p>相比构造器的<strong>优点</strong>：</p>\n<ul>\n<li>有名称：可以更明确方法的功能；</li>\n<li>不必在调用时重复创建实例：使不可变类预先创建实例，或将实例缓存起来，避免重复创建对象，提高性能。</li>\n<li>返回原返回类型的子类型的对象。</li>\n<li>在创建参数化类型实例时，代码更简洁<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class=\"line\">// 用静态工厂方法实现</span><br><span class=\"line\">Map&lt;String, String&gt; map = HashMap.newInstence();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a> \n<p>相比构造器的<strong>缺点</strong>：</p>\n<ul>\n<li>类如果不含共有的或者受保护的构造器，将不能被子类化。</li>\n<li>与其他的静态方法没任何区别。<br>\n静态工厂方法的一些命名习惯<br>\n– valueOf：类型转换方法<br>\n– of：更简洁的替代，在EnumSet中使用并流行起来<br>\n– getInstance：对于Singleton来说，该方法没有参数，只会返回一个实例。<br>\n– newInstance：与getInstance一样，但newInstance能够确保每个新实例与其他实例不同。<br>\n– getType：像getInstance一样，返回对象类型<br>\n– newType：想newInstance一样，返回对象类型</li>\n</ul>\n<p>综上：构造器和静态工厂方法各有优缺点，优先使用静态工厂方法。</p>\n<h2 id=\"遇到多个构造器参数时要考虑用构建器\">遇到多个构造器参数时要考虑用构建器</h2>\n<blockquote>\n<p>Builder模式：利用多个builder构建多个对象。推荐在多参数且参数大多数都是可选的的情况下使用。</p>\n</blockquote>\n<ul>\n<li>优点：易于阅读和编写，比JavaBean更安全。</li>\n<li>缺点：比重叠构造器冗长。</li>\n</ul>\n<p>Builder模式示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NutritionFacts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int servingSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int servings;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int colorings;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int fat;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int sodium;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int carbohydrate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        // 必须的</span><br><span class=\"line\">        private int servingSize = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int servings = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 非必须的</span><br><span class=\"line\">        private int colorings = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int fat = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int sodium = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int carbohydrate = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder(int servingSize, int servings) &#123;</span><br><span class=\"line\">            this.servings = servings;</span><br><span class=\"line\">            this.servingSize = servingSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder calories(int colorings) &#123;</span><br><span class=\"line\">            this.colorings = colorings;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder carbohydrate(int carbohydrate) &#123;</span><br><span class=\"line\">            this.carbohydrate = carbohydrate;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder sodium(int sodium) &#123;</span><br><span class=\"line\">            this.sodium = sodium;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder fat(int fat) &#123;</span><br><span class=\"line\">            this.fat = fat;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public NutritionFacts build() &#123;</span><br><span class=\"line\">            return new NutritionFacts(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NutritionFacts(Builder builder) &#123;</span><br><span class=\"line\">        this.servingSize = builder.servingSize;</span><br><span class=\"line\">        this.servings =  builder.servings;</span><br><span class=\"line\">        this.colorings =  builder.colorings;</span><br><span class=\"line\">        this.fat =  builder.fat;</span><br><span class=\"line\">        this.sodium =  builder.sodium;</span><br><span class=\"line\">        this.carbohydrate =  builder.carbohydrate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NutritionFacts nutritionFacts = new NutritionFacts.Builder(1, 2)</span><br><span class=\"line\">\t\t\t\t.calories(3).carbohydrate(4).fat(5).sodium(6)</span><br><span class=\"line\">               .build();</span><br></pre></td></tr></table></figure>\n<h2 id=\"用私有构造器或枚举类型强化singleton属性\">用私有构造器或枚举类型强化Singleton属性</h2>\n<blockquote>\n<p>Singleton是指仅仅被实例化一次的类。Singleton通常被用来表示那些本质上唯一的系统组件，例如窗口管理器或文件系统。</p>\n</blockquote>\n<p>方式一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elvis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Elvis() &#123;</span><br><span class=\"line\">        // 初始化相关操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final Elvis INSTANCE = new Elvis();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void leaveTheBuilding() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elvis.INSTANCE;</span><br></pre></td></tr></table></figure>\n<p>方式二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elvis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Elvis() &#123;</span><br><span class=\"line\">        // 初始化相关操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static final Elvis INSTANCE = new Elvis();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Elvis getInstance() &#123;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elvis.getInstance();</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过私有构造器强化不可实例化的能力\">通过私有构造器强化不可实例化的能力</h2>\n<p>一些工具类不希望被实例化，实例化对它没有任何意义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UtilityClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 私有构造方法，保证在任何情况下都不会被实例化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private UtilityClass() &#123;</span><br><span class=\"line\">        // 防止在当前类调用构造方法</span><br><span class=\"line\">        throw new AssertionError();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static boolean empty(String message) &#123;</span><br><span class=\"line\">        if (message == null || &quot;&quot;.equals(message)) &#123;</span><br><span class=\"line\">            return Boolean.TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Boolean.FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UtilityClass.empty(&quot;hello Word&quot;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"避免创建不必要的对象\">避免创建不必要的对象</h2>\n<ul>\n<li>正确使用String<br>\n反例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s  = new String(&quot;hello&quot;);\t// hello本来就是字符串</span><br></pre></td></tr></table></figure>\n<p>正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = &quot;hello&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自动装箱<br>\n优先使用基本类型。</li>\n</ul>\n<h2 id=\"消除过期的对象引用\">消除过期的对象引用</h2>\n<p>一般而言，只要类是自己管理内存，就应该警惕内存泄漏的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Stack &#123;</span><br><span class=\"line\">    private Object[] elements;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int size = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final int DEFAULT_INITIAL_CAPACITY = 16;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Stack() &#123;</span><br><span class=\"line\">        elements = new Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void push(Object e) &#123;</span><br><span class=\"line\">        ensureCapacity();</span><br><span class=\"line\">        elements[size ++] = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object pop() &#123;</span><br><span class=\"line\">        if (size == 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object e = elements[--size];</span><br><span class=\"line\">        elements[size] = null;</span><br><span class=\"line\">        return e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ensureCapacity() &#123;</span><br><span class=\"line\">        if (elements.length == size) &#123;</span><br><span class=\"line\">            elements = Arrays.copyOf(elements, 2 * size+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"避免使用终结方法\">避免使用终结方法</h2>\n<p>try finally</p>\n","site":{"data":{}},"excerpt":"<h1>创建和销毁对象</h1>\n<h2>用静态工厂方法代替构造器</h2>\n<p>相比构造器的<strong>优点</strong>：</p>\n<ul>\n<li>有名称：可以更明确方法的功能；</li>\n<li>不必在调用时重复创建实例：使不可变类预先创建实例，或将实例缓存起来，避免重复创建对象，提高性能。</li>\n<li>返回原返回类型的子类型的对象。</li>\n<li>在创建参数化类型实例时，代码更简洁<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class=\"line\">// 用静态工厂方法实现</span><br><span class=\"line\">Map&lt;String, String&gt; map = HashMap.newInstence();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>相比构造器的<strong>缺点</strong>：</p>\n<ul>\n<li>类如果不含共有的或者受保护的构造器，将不能被子类化。</li>\n<li>与其他的静态方法没任何区别。<br>\n静态工厂方法的一些命名习惯<br>\n– valueOf：类型转换方法<br>\n– of：更简洁的替代，在EnumSet中使用并流行起来<br>\n– getInstance：对于Singleton来说，该方法没有参数，只会返回一个实例。<br>\n– newInstance：与getInstance一样，但newInstance能够确保每个新实例与其他实例不同。<br>\n– getType：像getInstance一样，返回对象类型<br>\n– newType：想newInstance一样，返回对象类型</li>\n</ul>\n<p>综上：构造器和静态工厂方法各有优缺点，优先使用静态工厂方法。</p>\n<h2>遇到多个构造器参数时要考虑用构建器</h2>\n<blockquote>\n<p>Builder模式：利用多个builder构建多个对象。推荐在多参数且参数大多数都是可选的的情况下使用。</p>\n</blockquote>\n<ul>\n<li>优点：易于阅读和编写，比JavaBean更安全。</li>\n<li>缺点：比重叠构造器冗长。</li>\n</ul>\n<p>Builder模式示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NutritionFacts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int servingSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int servings;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int colorings;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int fat;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int sodium;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int carbohydrate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        // 必须的</span><br><span class=\"line\">        private int servingSize = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int servings = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 非必须的</span><br><span class=\"line\">        private int colorings = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int fat = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int sodium = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int carbohydrate = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder(int servingSize, int servings) &#123;</span><br><span class=\"line\">            this.servings = servings;</span><br><span class=\"line\">            this.servingSize = servingSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder calories(int colorings) &#123;</span><br><span class=\"line\">            this.colorings = colorings;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder carbohydrate(int carbohydrate) &#123;</span><br><span class=\"line\">            this.carbohydrate = carbohydrate;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder sodium(int sodium) &#123;</span><br><span class=\"line\">            this.sodium = sodium;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Builder fat(int fat) &#123;</span><br><span class=\"line\">            this.fat = fat;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public NutritionFacts build() &#123;</span><br><span class=\"line\">            return new NutritionFacts(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NutritionFacts(Builder builder) &#123;</span><br><span class=\"line\">        this.servingSize = builder.servingSize;</span><br><span class=\"line\">        this.servings =  builder.servings;</span><br><span class=\"line\">        this.colorings =  builder.colorings;</span><br><span class=\"line\">        this.fat =  builder.fat;</span><br><span class=\"line\">        this.sodium =  builder.sodium;</span><br><span class=\"line\">        this.carbohydrate =  builder.carbohydrate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NutritionFacts nutritionFacts = new NutritionFacts.Builder(1, 2)</span><br><span class=\"line\">\t\t\t\t.calories(3).carbohydrate(4).fat(5).sodium(6)</span><br><span class=\"line\">               .build();</span><br></pre></td></tr></table></figure>\n<h2>用私有构造器或枚举类型强化Singleton属性</h2>\n<blockquote>\n<p>Singleton是指仅仅被实例化一次的类。Singleton通常被用来表示那些本质上唯一的系统组件，例如窗口管理器或文件系统。</p>\n</blockquote>\n<p>方式一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elvis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Elvis() &#123;</span><br><span class=\"line\">        // 初始化相关操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final Elvis INSTANCE = new Elvis();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void leaveTheBuilding() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elvis.INSTANCE;</span><br></pre></td></tr></table></figure>\n<p>方式二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elvis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Elvis() &#123;</span><br><span class=\"line\">        // 初始化相关操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static final Elvis INSTANCE = new Elvis();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Elvis getInstance() &#123;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elvis.getInstance();</span><br></pre></td></tr></table></figure>\n<h2>通过私有构造器强化不可实例化的能力</h2>\n<p>一些工具类不希望被实例化，实例化对它没有任何意义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UtilityClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 私有构造方法，保证在任何情况下都不会被实例化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private UtilityClass() &#123;</span><br><span class=\"line\">        // 防止在当前类调用构造方法</span><br><span class=\"line\">        throw new AssertionError();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static boolean empty(String message) &#123;</span><br><span class=\"line\">        if (message == null || &quot;&quot;.equals(message)) &#123;</span><br><span class=\"line\">            return Boolean.TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Boolean.FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UtilityClass.empty(&quot;hello Word&quot;);</span><br></pre></td></tr></table></figure>\n<h2>避免创建不必要的对象</h2>\n<ul>\n<li>正确使用String<br>\n反例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s  = new String(&quot;hello&quot;);\t// hello本来就是字符串</span><br></pre></td></tr></table></figure>\n<p>正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = &quot;hello&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自动装箱<br>\n优先使用基本类型。</li>\n</ul>\n<h2>消除过期的对象引用</h2>\n<p>一般而言，只要类是自己管理内存，就应该警惕内存泄漏的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Stack &#123;</span><br><span class=\"line\">    private Object[] elements;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int size = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final int DEFAULT_INITIAL_CAPACITY = 16;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Stack() &#123;</span><br><span class=\"line\">        elements = new Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void push(Object e) &#123;</span><br><span class=\"line\">        ensureCapacity();</span><br><span class=\"line\">        elements[size ++] = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object pop() &#123;</span><br><span class=\"line\">        if (size == 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object e = elements[--size];</span><br><span class=\"line\">        elements[size] = null;</span><br><span class=\"line\">        return e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ensureCapacity() &#123;</span><br><span class=\"line\">        if (elements.length == size) &#123;</span><br><span class=\"line\">            elements = Arrays.copyOf(elements, 2 * size+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>避免使用终结方法</h2>\n<p>try finally</p>"},{"title":"《EffctiveJava》对于所有对象都通用的方法","date":"2018-08-14T13:34:14.000Z","_content":"\n# 对于所有对象都通用的方法\n## 覆盖equals\n* 不覆盖equals方法，每个类只与他本身相等\n\n什么时候应该覆盖equals方法呢？\n* 类具有自己的 “逻辑相等”，通常属于“值类（value class）”，例如Integer和Date，必须覆盖equals方法，而且可以用作映射表（map)的键（key），或者集合（set）的元素。\n* 有一种“值类”不需要覆盖equals方法，即用实例受控确保“每个值至多只存在一个对象”的类。例如枚举，对于这样的类，逻辑相同与对象相同是一回事，因此Object的equals方法等同于逻辑意义上的equals方法。\n\n<!-- more -->\n\n覆盖equals需要注意哪些约定？\n* 自反性（reflexive）：if  x != null ，x.equals(x) == true；\n* 对称性（symmetric）：x.equals(y) == y.equals(x)\n* 传递性（transitive）：x.equals(y), y.equals(z),  则 x.equals(z)\n* 一致性（consistent）：多次调用x.equals(y),结果都一样\n* 非空性（Non-Nullity）：对于任何非null的值调用x.equals(null) 结果为false\n\n高质量的equals诀窍：\n* 使用==操作符检查“参数是否为这个对象的引用”。如果是，则返回true。\n* 使用instanceof检查“参数是否为正确的类型”。如果不是，则返回为false。\n* 把参数转成正确的类型。因为转换之前用instanceof测试，确保会成功。\n* 对于该类中的关键域，检查参数中的域与该对象中对应的域相匹配。\n* 编写完equals，检查是否遵循对称，传递，一致性。\n\n告诫：\n* 覆盖equals总要覆盖hashCode（hashCode的通用约定）\n* 不要让equals过于智能（复杂）\n* 不要将equals声明中的Object对象替换为其他的类型。\n\n```\npublic boolean equals(Object o) {\n\t...\n}\n// 而不是\npublic boolean equals(MyObject o) {\n\t...\n}\n```\n## 覆盖equals方法总要覆盖hashCode\n覆盖equals方法时不覆盖hashCode，就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和HashTable。\n\n## 始终要覆盖toString\n建议所有的子类都覆盖这个方法。\n\n## 考虑重写comparable接口\n\n```\npublic class Person implements Comparable {\n\n    private String name;\n\n    private int age;\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n    public int compareTo(Object o) {\n        if (o instanceof Person) {\n            Person o1 = (Person) o;\n            return o1.getName().compareTo(name) > 0 ? 1 : (o1.getName().compareTo(name) == 0 ? 0 : -1);\n        }\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        List<Person> peoples = new ArrayList<Person>(\n                Arrays.asList(\n                        new Person(\"a\", 1),\n                        new Person(\"b\", 2),\n                        new Person(\"a\", 1),\n                        new Person(\"d\", 3),\n                        new Person(\"f\", 5))\n        );\n        Collections.sort(peoples);\n        peoples.forEach(people -> System.out.println(people));\n\n    }\n}\n\n```\n输出\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190328150632161.png)\n\n","source":"_posts/《EffctiveJava》对于所有对象都通用的方法.md","raw":"---\ntitle: 《EffctiveJava》对于所有对象都通用的方法\ncategories: EffctiveJava学习\ntags: java\ndate: 2018-08-14 21:34:14\n---\n\n# 对于所有对象都通用的方法\n## 覆盖equals\n* 不覆盖equals方法，每个类只与他本身相等\n\n什么时候应该覆盖equals方法呢？\n* 类具有自己的 “逻辑相等”，通常属于“值类（value class）”，例如Integer和Date，必须覆盖equals方法，而且可以用作映射表（map)的键（key），或者集合（set）的元素。\n* 有一种“值类”不需要覆盖equals方法，即用实例受控确保“每个值至多只存在一个对象”的类。例如枚举，对于这样的类，逻辑相同与对象相同是一回事，因此Object的equals方法等同于逻辑意义上的equals方法。\n\n<!-- more -->\n\n覆盖equals需要注意哪些约定？\n* 自反性（reflexive）：if  x != null ，x.equals(x) == true；\n* 对称性（symmetric）：x.equals(y) == y.equals(x)\n* 传递性（transitive）：x.equals(y), y.equals(z),  则 x.equals(z)\n* 一致性（consistent）：多次调用x.equals(y),结果都一样\n* 非空性（Non-Nullity）：对于任何非null的值调用x.equals(null) 结果为false\n\n高质量的equals诀窍：\n* 使用==操作符检查“参数是否为这个对象的引用”。如果是，则返回true。\n* 使用instanceof检查“参数是否为正确的类型”。如果不是，则返回为false。\n* 把参数转成正确的类型。因为转换之前用instanceof测试，确保会成功。\n* 对于该类中的关键域，检查参数中的域与该对象中对应的域相匹配。\n* 编写完equals，检查是否遵循对称，传递，一致性。\n\n告诫：\n* 覆盖equals总要覆盖hashCode（hashCode的通用约定）\n* 不要让equals过于智能（复杂）\n* 不要将equals声明中的Object对象替换为其他的类型。\n\n```\npublic boolean equals(Object o) {\n\t...\n}\n// 而不是\npublic boolean equals(MyObject o) {\n\t...\n}\n```\n## 覆盖equals方法总要覆盖hashCode\n覆盖equals方法时不覆盖hashCode，就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和HashTable。\n\n## 始终要覆盖toString\n建议所有的子类都覆盖这个方法。\n\n## 考虑重写comparable接口\n\n```\npublic class Person implements Comparable {\n\n    private String name;\n\n    private int age;\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n    public int compareTo(Object o) {\n        if (o instanceof Person) {\n            Person o1 = (Person) o;\n            return o1.getName().compareTo(name) > 0 ? 1 : (o1.getName().compareTo(name) == 0 ? 0 : -1);\n        }\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        List<Person> peoples = new ArrayList<Person>(\n                Arrays.asList(\n                        new Person(\"a\", 1),\n                        new Person(\"b\", 2),\n                        new Person(\"a\", 1),\n                        new Person(\"d\", 3),\n                        new Person(\"f\", 5))\n        );\n        Collections.sort(peoples);\n        peoples.forEach(people -> System.out.println(people));\n\n    }\n}\n\n```\n输出\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190328150632161.png)\n\n","slug":"《EffctiveJava》对于所有对象都通用的方法","published":1,"updated":"2019-04-20T12:25:38.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xud004avq6bbhgbantj","content":"<h1 id=\"对于所有对象都通用的方法\">对于所有对象都通用的方法</h1>\n<h2 id=\"覆盖equals\">覆盖equals</h2>\n<ul>\n<li>不覆盖equals方法，每个类只与他本身相等</li>\n</ul>\n<p>什么时候应该覆盖equals方法呢？</p>\n<ul>\n<li>类具有自己的 “逻辑相等”，通常属于“值类（value class）”，例如Integer和Date，必须覆盖equals方法，而且可以用作映射表（map)的键（key），或者集合（set）的元素。</li>\n<li>有一种“值类”不需要覆盖equals方法，即用实例受控确保“每个值至多只存在一个对象”的类。例如枚举，对于这样的类，逻辑相同与对象相同是一回事，因此Object的equals方法等同于逻辑意义上的equals方法。</li>\n</ul>\n<a id=\"more\"></a>\n<p>覆盖equals需要注意哪些约定？</p>\n<ul>\n<li>自反性（reflexive）：if  x != null ，x.equals(x) == true；</li>\n<li>对称性（symmetric）：x.equals(y) == y.equals(x)</li>\n<li>传递性（transitive）：x.equals(y), y.equals(z),  则 x.equals(z)</li>\n<li>一致性（consistent）：多次调用x.equals(y),结果都一样</li>\n<li>非空性（Non-Nullity）：对于任何非null的值调用x.equals(null) 结果为false</li>\n</ul>\n<p>高质量的equals诀窍：</p>\n<ul>\n<li>使用==操作符检查“参数是否为这个对象的引用”。如果是，则返回true。</li>\n<li>使用instanceof检查“参数是否为正确的类型”。如果不是，则返回为false。</li>\n<li>把参数转成正确的类型。因为转换之前用instanceof测试，确保会成功。</li>\n<li>对于该类中的关键域，检查参数中的域与该对象中对应的域相匹配。</li>\n<li>编写完equals，检查是否遵循对称，传递，一致性。</li>\n</ul>\n<p>告诫：</p>\n<ul>\n<li>覆盖equals总要覆盖hashCode（hashCode的通用约定）</li>\n<li>不要让equals过于智能（复杂）</li>\n<li>不要将equals声明中的Object对象替换为其他的类型。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object o) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 而不是</span><br><span class=\"line\">public boolean equals(MyObject o) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"覆盖equals方法总要覆盖hashcode\">覆盖equals方法总要覆盖hashCode</h2>\n<p>覆盖equals方法时不覆盖hashCode，就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和HashTable。</p>\n<h2 id=\"始终要覆盖tostring\">始终要覆盖toString</h2>\n<p>建议所有的子类都覆盖这个方法。</p>\n<h2 id=\"考虑重写comparable接口\">考虑重写comparable接口</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Comparable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;Person&#123;&quot; +</span><br><span class=\"line\">                &quot;name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int compareTo(Object o) &#123;</span><br><span class=\"line\">        if (o instanceof Person) &#123;</span><br><span class=\"line\">            Person o1 = (Person) o;</span><br><span class=\"line\">            return o1.getName().compareTo(name) &gt; 0 ? 1 : (o1.getName().compareTo(name) == 0 ? 0 : -1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        List&lt;Person&gt; peoples = new ArrayList&lt;Person&gt;(</span><br><span class=\"line\">                Arrays.asList(</span><br><span class=\"line\">                        new Person(&quot;a&quot;, 1),</span><br><span class=\"line\">                        new Person(&quot;b&quot;, 2),</span><br><span class=\"line\">                        new Person(&quot;a&quot;, 1),</span><br><span class=\"line\">                        new Person(&quot;d&quot;, 3),</span><br><span class=\"line\">                        new Person(&quot;f&quot;, 5))</span><br><span class=\"line\">        );</span><br><span class=\"line\">        Collections.sort(peoples);</span><br><span class=\"line\">        peoples.forEach(people -&gt; System.out.println(people));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"https://img-blog.csdnimg.cn/20190328150632161.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h1>对于所有对象都通用的方法</h1>\n<h2>覆盖equals</h2>\n<ul>\n<li>不覆盖equals方法，每个类只与他本身相等</li>\n</ul>\n<p>什么时候应该覆盖equals方法呢？</p>\n<ul>\n<li>类具有自己的 “逻辑相等”，通常属于“值类（value class）”，例如Integer和Date，必须覆盖equals方法，而且可以用作映射表（map)的键（key），或者集合（set）的元素。</li>\n<li>有一种“值类”不需要覆盖equals方法，即用实例受控确保“每个值至多只存在一个对象”的类。例如枚举，对于这样的类，逻辑相同与对象相同是一回事，因此Object的equals方法等同于逻辑意义上的equals方法。</li>\n</ul>","more":"<p>覆盖equals需要注意哪些约定？</p>\n<ul>\n<li>自反性（reflexive）：if  x != null ，x.equals(x) == true；</li>\n<li>对称性（symmetric）：x.equals(y) == y.equals(x)</li>\n<li>传递性（transitive）：x.equals(y), y.equals(z),  则 x.equals(z)</li>\n<li>一致性（consistent）：多次调用x.equals(y),结果都一样</li>\n<li>非空性（Non-Nullity）：对于任何非null的值调用x.equals(null) 结果为false</li>\n</ul>\n<p>高质量的equals诀窍：</p>\n<ul>\n<li>使用==操作符检查“参数是否为这个对象的引用”。如果是，则返回true。</li>\n<li>使用instanceof检查“参数是否为正确的类型”。如果不是，则返回为false。</li>\n<li>把参数转成正确的类型。因为转换之前用instanceof测试，确保会成功。</li>\n<li>对于该类中的关键域，检查参数中的域与该对象中对应的域相匹配。</li>\n<li>编写完equals，检查是否遵循对称，传递，一致性。</li>\n</ul>\n<p>告诫：</p>\n<ul>\n<li>覆盖equals总要覆盖hashCode（hashCode的通用约定）</li>\n<li>不要让equals过于智能（复杂）</li>\n<li>不要将equals声明中的Object对象替换为其他的类型。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object o) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 而不是</span><br><span class=\"line\">public boolean equals(MyObject o) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>覆盖equals方法总要覆盖hashCode</h2>\n<p>覆盖equals方法时不覆盖hashCode，就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和HashTable。</p>\n<h2>始终要覆盖toString</h2>\n<p>建议所有的子类都覆盖这个方法。</p>\n<h2>考虑重写comparable接口</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Comparable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;Person&#123;&quot; +</span><br><span class=\"line\">                &quot;name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int compareTo(Object o) &#123;</span><br><span class=\"line\">        if (o instanceof Person) &#123;</span><br><span class=\"line\">            Person o1 = (Person) o;</span><br><span class=\"line\">            return o1.getName().compareTo(name) &gt; 0 ? 1 : (o1.getName().compareTo(name) == 0 ? 0 : -1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        List&lt;Person&gt; peoples = new ArrayList&lt;Person&gt;(</span><br><span class=\"line\">                Arrays.asList(</span><br><span class=\"line\">                        new Person(&quot;a&quot;, 1),</span><br><span class=\"line\">                        new Person(&quot;b&quot;, 2),</span><br><span class=\"line\">                        new Person(&quot;a&quot;, 1),</span><br><span class=\"line\">                        new Person(&quot;d&quot;, 3),</span><br><span class=\"line\">                        new Person(&quot;f&quot;, 5))</span><br><span class=\"line\">        );</span><br><span class=\"line\">        Collections.sort(peoples);</span><br><span class=\"line\">        peoples.forEach(people -&gt; System.out.println(people));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"https://img-blog.csdnimg.cn/20190328150632161.png\" alt=\"在这里插入图片描述\"></p>"},{"title":"书签","date":"2018-02-27T15:34:14.000Z","_content":"\n### Json格式化\n很全的json工具 [http://www.bejson.com](http://www.bejson.com)\n比较智能的json工具[https://www.json.cn/](https://www.json.cn/)\n\n<!-- more -->\n\n### Java\nJava8 API [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/)\nMongoDB API [https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors](https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors)\n简明Python教程 [http://wiki.jikexueyuan.com/project/simple-python-course](http://wiki.jikexueyuan.com/project/simple-python-course)\n知乎Python库[https://www.zhihu.com/question/24590883](https://www.zhihu.com/question/24590883)\n\n\n### UI\niconfont [http://iconfont.cn/collections/detail?cid=918](http://iconfont.cn/collections/detail?cid=918)\n\n### 学习资源 \nitsource [http://www.itsource.com.cn/forum.php](http://www.itsource.com.cn/forum.php)\n","source":"_posts/书签.md","raw":"---\ntitle: 书签\ncategories: Other\ntags: other\ndate: 2018-02-27 23:34:14\n---\n\n### Json格式化\n很全的json工具 [http://www.bejson.com](http://www.bejson.com)\n比较智能的json工具[https://www.json.cn/](https://www.json.cn/)\n\n<!-- more -->\n\n### Java\nJava8 API [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/)\nMongoDB API [https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors](https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors)\n简明Python教程 [http://wiki.jikexueyuan.com/project/simple-python-course](http://wiki.jikexueyuan.com/project/simple-python-course)\n知乎Python库[https://www.zhihu.com/question/24590883](https://www.zhihu.com/question/24590883)\n\n\n### UI\niconfont [http://iconfont.cn/collections/detail?cid=918](http://iconfont.cn/collections/detail?cid=918)\n\n### 学习资源 \nitsource [http://www.itsource.com.cn/forum.php](http://www.itsource.com.cn/forum.php)\n","slug":"书签","published":1,"updated":"2019-04-20T12:26:53.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xue004dvq6bghoudu54","content":"<h3 id=\"json格式化\">Json格式化</h3>\n<p>很全的json工具 <a href=\"http://www.bejson.com\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a><br>\n比较智能的json工具<a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">https://www.json.cn/</a></p>\n<a id=\"more\"></a>\n<h3 id=\"java\">Java</h3>\n<p>Java8 API <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/api/</a><br>\nMongoDB API <a href=\"https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors</a><br>\n简明Python教程 <a href=\"http://wiki.jikexueyuan.com/project/simple-python-course\" target=\"_blank\" rel=\"noopener\">http://wiki.jikexueyuan.com/project/simple-python-course</a><br>\n知乎Python库<a href=\"https://www.zhihu.com/question/24590883\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24590883</a></p>\n<h3 id=\"ui\">UI</h3>\n<p>iconfont <a href=\"http://iconfont.cn/collections/detail?cid=918\" target=\"_blank\" rel=\"noopener\">http://iconfont.cn/collections/detail?cid=918</a></p>\n<h3 id=\"学习资源\">学习资源</h3>\n<p>itsource <a href=\"http://www.itsource.com.cn/forum.php\" target=\"_blank\" rel=\"noopener\">http://www.itsource.com.cn/forum.php</a></p>\n","site":{"data":{}},"excerpt":"<h3>Json格式化</h3>\n<p>很全的json工具 <a href=\"http://www.bejson.com\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a><br>\n比较智能的json工具<a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">https://www.json.cn/</a></p>","more":"<h3>Java</h3>\n<p>Java8 API <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/api/</a><br>\nMongoDB API <a href=\"https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/data-mongo/docs/1.7.0.RC1/reference/html/#mongodb-connectors</a><br>\n简明Python教程 <a href=\"http://wiki.jikexueyuan.com/project/simple-python-course\" target=\"_blank\" rel=\"noopener\">http://wiki.jikexueyuan.com/project/simple-python-course</a><br>\n知乎Python库<a href=\"https://www.zhihu.com/question/24590883\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24590883</a></p>\n<h3>UI</h3>\n<p>iconfont <a href=\"http://iconfont.cn/collections/detail?cid=918\" target=\"_blank\" rel=\"noopener\">http://iconfont.cn/collections/detail?cid=918</a></p>\n<h3>学习资源</h3>\n<p>itsource <a href=\"http://www.itsource.com.cn/forum.php\" target=\"_blank\" rel=\"noopener\">http://www.itsource.com.cn/forum.php</a></p>"},{"title":"从Java内存模型讲双重检查锁原理","date":"2018-02-19T13:34:14.000Z","_content":"\n转载： 超赞的两篇文章 \nhttps://www.jianshu.com/p/4586cb11c62d\n\nhttps://www.cnblogs.com/xz816111/p/8470048.html\n","source":"_posts/从Java内存模型讲双重检查锁原理.md","raw":"---\ntitle: 从Java内存模型讲双重检查锁原理\ncategories: Java\ntags: java\ndate: 2018-02-19 21:34:14\n---\n\n转载： 超赞的两篇文章 \nhttps://www.jianshu.com/p/4586cb11c62d\n\nhttps://www.cnblogs.com/xz816111/p/8470048.html\n","slug":"从Java内存模型讲双重检查锁原理","published":1,"updated":"2019-04-20T12:26:27.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xug004ivq6b5n5b6c50","content":"<p>转载： 超赞的两篇文章<br>\n<a href=\"https://www.jianshu.com/p/4586cb11c62d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4586cb11c62d</a></p>\n<p><a href=\"https://www.cnblogs.com/xz816111/p/8470048.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xz816111/p/8470048.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载： 超赞的两篇文章<br>\n<a href=\"https://www.jianshu.com/p/4586cb11c62d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4586cb11c62d</a></p>\n<p><a href=\"https://www.cnblogs.com/xz816111/p/8470048.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xz816111/p/8470048.html</a></p>\n"},{"title":"对象及变量的并发访问","time":"2019-04-21T00:36:04.000Z","_content":"# synchronized同步方法\n“非线程安全”会在多个线程中的同一对象的实例变量在并发访问时发生，产生的后果就是“脏读”，即读到的数据其实是被更改过的。\n“线程安全”就是以获得的实例变量的值是经过同步处理过的，不会出现“脏读”现象。\n## 方法内的变量为线程安全\n“非线程安全”问题存在与“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，即线程安全。\n## 实例变量非线程安全\n如果多个线程访问一个对象的实例变量，则有可能产生“非线程安全”问题。\n\n```\npublic class HasSelfPrivateNum {\n\n    private int num = 0;\n\n\n    public void addNum(String name) {\n        try {\n            if (\"a\".equals(name)) {\n                num = 100;\n                System.out.println(\"a set over\");\n                Thread.sleep(200);\n            } else {\n                num = 200;\n                System.out.println(\"b set over\");\n            }\n            System.out.println(name + \" num=\" + num);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();\n        Test1 test1 = new Test1(hasSelfPrivateNum);\n        Test2 test2 = new Test2(hasSelfPrivateNum);\n        test1.start();\n        test2.start();\n    }\n\n}\n\nclass Test1 extends Thread {\n    private HasSelfPrivateNum hasSelfPrivateNum;\n    Test1(HasSelfPrivateNum hasSelfPrivateNum) {\n        this.hasSelfPrivateNum = hasSelfPrivateNum;\n    }\n    @Override\n    public void run() {\n        super.run();\n        hasSelfPrivateNum.addNum(\"a\");\n    }\n}\n\nclass Test2 extends Thread {\n    private HasSelfPrivateNum hasSelfPrivateNum;\n    Test2(HasSelfPrivateNum hasSelfPrivateNum) {\n        this.hasSelfPrivateNum = hasSelfPrivateNum;\n    }\n    @Override\n    public void run() {\n        super.run();\n        hasSelfPrivateNum.addNum(\"b\");\n    }\n}\n```\n运行结果：\n\n```\na set over\nb set over\nb num=200\na num=200\n```\n\n分析：Test1和Test2两个线程同时访问一个没有同步的方法addNum，则出现了线程不安全的问题。解决方式只需要给addNum方法前加synchronized关键字。\n\n加锁后的执行效果：\n```\na set over\na num=100\nb set over\nb num=200\n```\n\n## 多个对象多个锁\n\n```\n public static void main(String[] args) {\n        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();\n        HasSelfPrivateNum hasSelfPrivateNum2 = new HasSelfPrivateNum();\n        Test1 test1 = new Test1(hasSelfPrivateNum);\n        Test2 test2 = new Test2(hasSelfPrivateNum2);\n        test1.start();\n        test2.start();\n    }\n\n```\n运行结果：\n```\na set over\nb set over\nb num=200\na num=100\n```\n分析：两个线程分别访问同一个类的两个不同实例的相同名称的同步方法，效果却是异步的方式运行的。\n关键字synchronized取得的锁是对象锁，而不是把一段代码或方法作为锁，所以在上面的示例中哪个线程先执行带synchrozined关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。但如果多个线程访问多个对象，例如上面示例中创建了2个HasSelfPrivateNum.java对象，所以就会产生2个锁，会异步执行。\n\n## synchronized方法与锁对象\n验证synchronized与对象的关系\n```\npublic class SynchronizedMethodLock {\n\n    public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run\");\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SynchronizedMethodLock obj = new SynchronizedMethodLock();\n        ThreadA threadA = new ThreadA(obj);\n        threadA.setName(\"A\");\n        ThreadB threadB = new ThreadB(obj);\n        threadB.setName(\"B\");\n        threadA.start();\n        threadB.start();\n    }\n\n}\n\nclass ThreadA extends Thread {\n    private SynchronizedMethodLock lock;\n\n    public ThreadA(SynchronizedMethodLock obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n\nclass ThreadB extends Thread {\n    private SynchronizedMethodLock lock;\n\n    public ThreadB(SynchronizedMethodLock obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n```\n运行结果：\n\n```\nA run\nB run\nend\nend\n```\n分析：给methodA不加锁的情况下，是异步执行的；\n\n```\n synchronized public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run\");\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n给methodA加锁后是同步执行的，即排队执行。\n\n```\nA run\nend\nB run\nend\n```\n结论：\n1.调用synchronized声明的方法是排队运行的；\n2.共享资源的读写需要同步化，否则就没有同步的必要。\n\n同步方法和普通方法执行验证\n\n```\npublic class SynchronizedMethodLock2 {\n\n    synchronized public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run：\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void methodB() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run：\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SynchronizedMethodLock2 obj = new SynchronizedMethodLock2();\n        ThreadC threadC = new ThreadC(obj);\n        threadC.setName(\"C\");\n        ThreadD threadD = new ThreadD(obj);\n        threadD.setName(\"D\");\n        threadC.start();\n        threadD.start();\n    }\n\n}\n\nclass ThreadC extends Thread {\n    private SynchronizedMethodLock2 lock;\n\n    public ThreadC(SynchronizedMethodLock2 obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n\nclass ThreadD extends Thread {\n    private SynchronizedMethodLock2 lock;\n\n    public ThreadD(SynchronizedMethodLock2 obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodB();\n    }\n}\n```\n运行结果：\n\n```\nC run：1555810474080\nD run：1555810474080\nend\nend\n```\n给methodB加锁后运行\n\n```\nC run：1555810535023\nend\nD run：1555810540026\nend\n```\n结论：\n1.ThreadA线程持有object锁，B线程可以以异步的方式调用object中的非synchronized类型的方法；\n2.ThreadA线程持有object锁，B线程如果在这时调用object对象中的synchronized类型的方法则需要等待，也就是同步。\n\n## 脏读\n在赋值时虽然同步，但在取值时可能发生意想不到的意外，这种情况就是脏读（dirtyRead）。\n发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。\n\n```\npublic class DirtyRead {\n\n    private String username = \"A\";\n\n    private String password = \"AA\";\n\n    synchronized public void setValue(String username, String password) {\n        try {\n            this.username = username;\n            Thread.sleep(5000);\n            this.password = password;\n            System.out.println(\"setValue：\" + Thread.currentThread().getName()\n                    + \" username: \" + username + \" password: \" + password);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void getValue() {\n        System.out.println(\"getValue：\" + Thread.currentThread().getName()\n                + \" username: \" + username + \" password: \" + password);\n    }\n}\n\nclass ThreadF extends Thread {\n\n    private DirtyRead dirtyRead;\n\n    public ThreadF (DirtyRead dirtyRead) {\n        this.dirtyRead = dirtyRead;\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        dirtyRead.setValue(\"B\", \"BB\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        DirtyRead dirtyRead = new DirtyRead();\n        ThreadF threadF = new ThreadF(dirtyRead);\n        threadF.start();\n        Thread.sleep(200);\n        dirtyRead.getValue();\n    }\n}\n\n```\n运行结果：\n\n```\ngetValue：main username: B password: AA\nsetValue：Thread-0 username: B password: BB\n```\n分析：出现脏读的原因是因为getValue方法不是同步的，所以可以在任意时刻调用；\n解决方法是添加synchronized关键字。\n\n```\nsynchronized public void getValue() {\n        System.out.println(\"getValue：\" + Thread.currentThread().getName()\n                + \" username: \" + username + \" password: \" + password);\n    }\n```\n\n运行结果：OK！\n```\nsetValue：Thread-0 username: B password: BB\ngetValue：main username: B password: BB\n```\n分析：setValue和getValue方法被依次执行。\n\n结论：\n1.当A线程调用对象中的synchronized方法X时，A线程就获取到了对象锁，其他线程必须等A执行完后才可以调用X方法，但B线程可以随意调用非synchronized方法。如果调用的是其他synchronized方法，也需要等待顺序执行；\n2.脏读一定出现中操作实例变量的情况下，这也是不同线程“争抢”实例变量的结果。\n\n## synchronized锁重入\n关键字synchronized拥有锁重入的功能，也就是在使用synchronized时，当一个线程得到对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。这也证明在一个synchronized方法的内部调用本类的其他synchronized方法时，是永远可以得到锁的。如果不可重入锁的话，就会造成**死锁**。\n\n”可重入锁“的概念：自己可以再次获取自己的内部锁。\n```\npublic class SynLockIn {\n\n    synchronized public void method1() {\n        System.out.println(\"method1\");\n        method2();\n    }\n\n    synchronized public void method2() {\n        System.out.println(\"method2\");\n        method3();\n    }\n\n    synchronized public void method3() {\n        System.out.println(\"method3\");\n\n    }\n}\n\nclass ThreadG extends Thread {\n    SynLockIn synLockIn;\n\n    public ThreadG(SynLockIn synLockIn) {\n        this.synLockIn = synLockIn;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synLockIn.method1();\n    }\n\n    public static void main(String[] args) {\n        SynLockIn synLockIn = new SynLockIn();\n        ThreadG threadG = new ThreadG(synLockIn);\n        threadG.start();\n    }\n}\n```\n运行结果：\n\n```\nmethod1\nmethod2\nmethod3\n```\n\n继承关系——重入锁\n\n```\npublic class SynLockInExtends {\n\n    public static void main(String[] args) {\n        ThreadH threadH = new ThreadH();\n        threadH.start();\n    }\n}\n\nclass ThreadH extends Thread{\n    @Override\n    public void run() {\n        super.run();\n        Sub sub = new Sub();\n        sub.operateISubMethod();\n    }\n}\n\nclass Main {\n\n    public int i = 10;\n\n    synchronized public void operateIMainMethod() {\n        try {\n            i --;\n            System.out.println(\"main i = \" + i);\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass Sub extends Main{\n\n    synchronized public void operateISubMethod() {\n        try {\n            while (i > 0) {\n                i --;\n                System.out.println(\"sub i = \" + i);\n                Thread.sleep(100);\n                this.operateIMainMethod();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n运行结果：\n\n```\nsub i = 9\nmain i = 8\nsub i = 7\nmain i = 6\nsub i = 5\nmain i = 4\nsub i = 3\nmain i = 2\nsub i = 1\nmain i = 0\n```\n结论：当存在继承关系是，子类可以通过“可重入锁”访问父类的同步方法。\n\n## 出现异常，锁自动释放\n当一个线程执行的代码出现异常时，其持有的锁会自动释放。\n\n## 同步不具有继承性\n同步不可以继承。即使父类的方法是synchronized，那么子类重写父类的方法想要同步效果，也要加synchronized关键字。\n\n# synchronized同步语句块\n用关键字synchronized声明方法在某些情况下是有弊端的，例如A线程执行同步方法需要一个很长的时间，那么B线程则必须等待比较长的时间。在这样的情况下使用synchronized同步语句块来解决。synchronized方法是对当前对象加锁，而synchronized代码块是对某一个对象进行加锁。\n## synchronized方法的弊端\n其他线程等待时间过长。\n\n```\npublic class SynchronizedLongTime {\n\n    private String getData1;\n\n    private String getData2;\n\n    synchronized public void doLongTimeTask(String data1, String data2) {\n        try {\n            System.out.println(\"begin task\");\n            System.out.println(\"线程：\" + Thread.currentThread().getName());\n            Thread.sleep(3000);\n            // 线程安全主要在这儿！\n            setData(data1, data2);\n            System.out.println(Thread.currentThread().getName() + \" getData1=\" + getData1 + \"; getData2=\" + getData1);\n            System.out.println(\"end task\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void setData(String data1, String data2) {\n        this.getData1 = data1;\n        this.getData2 = data2;\n    }\n\n    public static void main(String[] args) {\n        SynchronizedLongTime task = new SynchronizedLongTime();\n        ThreadI threadI = new ThreadI(task);\n        threadI.start();\n        ThreadJ threadJ = new ThreadJ(task);\n        threadJ.start();\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long begin = CommonUtils.beginTime1;\n        if(CommonUtils.beginTime1 > CommonUtils.beginTime2) {\n            begin = CommonUtils.beginTime2;\n        }\n        long end = CommonUtils.endTime1;\n        if (CommonUtils.endTime1 < CommonUtils.endTime2) {\n            end = CommonUtils.endTime2;\n        }\n        System.out.println(\"总耗时：\" + (end - begin)/1000 + \" 秒\");\n    }\n}\n\nclass ThreadI extends Thread {\n    SynchronizedLongTime synchronizedLongTime;\n    public ThreadI(SynchronizedLongTime synchronizedLongTime) {\n        this.synchronizedLongTime = synchronizedLongTime;\n    }\n    @Override\n    public void run() {\n        super.run();\n        CommonUtils.beginTime1 = System.currentTimeMillis();\n        synchronizedLongTime.doLongTimeTask(\"AAA\", \"aaa\");\n        CommonUtils.endTime1 = System.currentTimeMillis();\n    }\n}\n\nclass ThreadJ extends Thread {\n    SynchronizedLongTime synchronizedLongTime;\n    public ThreadJ(SynchronizedLongTime synchronizedLongTime) {\n        this.synchronizedLongTime = synchronizedLongTime;\n    }\n    @Override\n    public void run() {\n        super.run();\n        CommonUtils.beginTime2 = System.currentTimeMillis();\n        synchronizedLongTime.doLongTimeTask(\"BBB\", \"bbb\");\n        CommonUtils.endTime2 = System.currentTimeMillis();\n    }\n}\n```\n运行结果：\n\n```\nConnected to the target VM, address: '127.0.0.1:63459', transport: 'socket'\nbegin task\n线程：Thread-0\nThread-0 getData1=AAA; getData2=AAA\nend task\nbegin task\n线程：Thread-1\nThread-1 getData1=BBB; getData2=BBB\nend task\nDisconnected from the target VM, address: '127.0.0.1:63459', transport: 'socket'\n总耗时：6 秒\n```\n\n## synchronized同步代码块的使用\n当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程被执行，另一个线程必须等待第一个线程执行完后方可被执行。\n\n优化doLongTimeTask同步方法\n\n```\npublic void doLongTimeTask(String data1, String data2) {\n        try {\n            System.out.println(\"begin task\");\n            System.out.println(\"线程：\" + Thread.currentThread().getName());\n            Thread.sleep(3000);\n            // 线程安全主要在这儿！\n            synchronized(this) {\n                setData(data1, data2);\n            }\n            System.out.println(Thread.currentThread().getName() + \" getData1=\" + getData1 + \"; getData2=\" + getData1);\n            System.out.println(\"end task\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n```\nbegin task\n线程：Thread-0\nbegin task\n线程：Thread-1\nThread-0 getData1=AAA; getData2=AAA\nend task\nThread-1 getData1=BBB; getData2=BBB\nend task\n总耗时：3 秒\n```\n总结： 同步代码块比同步方法时间更少，运行效率更块。\n\n## 一半同步，一半异步\n不在synchronized中的代码异步执行，在synchronized中的是同步执行。\n\n## synchronized代码块间的同步性\n在使用同步代码块的时候注意，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的“对象监视器”是一个。\n\n## 验证同步synchronized(this)代码块是锁定当前对象的\n和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。\n\n1.A线程调用同步代码块x，B线程调用非同步代码块y，则x和y是异步执行的；\n2.A线程调用同步代码块x，B线程调用同步代码块z，则x和z是同步执行的，即按顺序执行。\n\n## 将任意对象作为对象监视器\n\n```\npublic class SynBlockString {\n\n    private String username;\n    private String password;\n    private String string = new String();\n\n    public void setUsernamePassword(String username, String password) {\n        synchronized (string) {\n            try {\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 进入同步块\");\n                this.password = password;\n                Thread.sleep(3000);\n                this.username = username;\n                System.out.println(Thread.currentThread().getName() + \" username: \" + username + \" password:\" + password);\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 离开同步块\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        SynBlockString synBlockString = new SynBlockString();\n        ThreadK threadK = new ThreadK(synBlockString);\n        threadK.setName(\"线程A\");\n        threadK.start();\n        ThreadL threadL = new ThreadL(synBlockString);\n        threadL.setName(\"线程B\");\n        threadL.start();\n    }\n}\n\nclass ThreadK extends Thread{\n    SynBlockString synBlockString;\n    public ThreadK(SynBlockString synBlockString) {\n        this.synBlockString = synBlockString;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synBlockString.setUsernamePassword(\"A\", \"a\");\n    }\n}\n\nclass ThreadL extends Thread{\n    SynBlockString synBlockString;\n    public ThreadL(SynBlockString synBlockString) {\n        this.synBlockString = synBlockString;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synBlockString.setUsernamePassword(\"B\", \"b\");\n    }\n}\n\n```\n运行结果：\n\n```\n线程A 在：1555822223367 进入同步块\n线程A username: A password:a\n线程A 在：1555822226369 离开同步块\n线程B 在：1555822226370 进入同步块\n线程B username: B password:b\n线程B 在：1555822229370 离开同步块\n\n```\n锁非this对象具有一定的优点：如果一个类中有多个synchronized方法，这时能实现同步，但会受到阻塞，所以影响效率；\n但如果用同步代码块锁非this对象，则是异步的，不与其他锁this同步方法争抢this锁，则可大大提高效率。\n\n修改代码\n```\n public void setUsernamePassword(String username, String password) {\n        String string = new String(); // 每次调用都产生一个新的String对象\n        synchronized (string) {\n            try {\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 进入同步块\");\n                this.password = password;\n                Thread.sleep(3000);\n                this.username = username;\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 离开同步块\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n执行结果：\n\n```\n线程A 在：1555822247681 进入同步块\n线程B 在：1555822247683 进入同步块\n线程A username: A password:a\n线程A 在：1555822250682 离开同步块\n线程B username: B password:b\n线程B 在：1555822250685 离开同步块\n```\n 分析：使用synchronized(非this对象x)同步代码块进行同步操作时，对象监视器必须是同一个对象。如果不是同一个对象监视器，运行的结果就是异步调用的，就会交叉执行。\n\n\n```\npublic class SynList {\n\n    private List<Integer> list = new ArrayList<Integer>();\n\n    synchronized public void addA(Integer value) {\n        System.out.println(Thread.currentThread().getName() + \" 开始执行addA方法\");\n        list.add(value);\n        System.out.println(Thread.currentThread().getName() + \" 退出addA方法\");\n    }\n\n\n    synchronized public void addB(Integer value) {\n        System.out.println(Thread.currentThread().getName() + \" 开始执行addB方法\");\n        list.add(value);\n        System.out.println(Thread.currentThread().getName() + \" 退出addB方法\");\n    }\n\n    public static void main(String[] args) {\n        SynList synList = new SynList();\n        ThreadM threadM = new ThreadM(synList);\n        threadM.setName(\"M\");\n        threadM.start();\n        ThreadN threadN = new ThreadN(synList);\n        threadN.setName(\"N\");\n        threadN.start();\n\n    }\n}\n\nclass ThreadM extends Thread {\n    SynList synList = new SynList();\n    public ThreadM(SynList synList) {\n        this.synList = synList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 10000; i++) {\n            synList.addA(i);\n        }\n    }\n}\n\nclass ThreadN extends Thread {\n    SynList synList = new SynList();\n    public ThreadN(SynList synList) {\n        this.synList = synList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 10000; i++) {\n            synList.addB(i);\n        }\n    }\n}\n```\n\n运行结果：\n\n```\n省略...\nM 退出addA方法\nM 开始执行addA方法\nM 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\n省略...\nN 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\nM 开始执行addA方法\nM 退出addA方法\n省略...\n```\n分析：线程M和N异步执行了，可能会出现脏读的问题。\n\n```\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SynNotThisDirtyRead {\n    public static void main(String[] args) {\n        OneList oneList = new OneList();\n        ThreadO threadO = new ThreadO(oneList);\n        threadO.start();\n\n        ThreadP threadp = new ThreadP(oneList);\n        threadp.start();\n\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"oneList.getSize = \" + oneList.getSize());\n    }\n}\n\nclass OneList {\n    private List<Integer> list = new ArrayList<Integer>();\n    public void add(Integer value) {\n        list.add(value);\n    }\n\n    public int getSize() {\n        return list.size();\n    }\n}\n\nclass OneListService {\n    synchronized public OneList addServiceMethod(OneList oneList, Integer value) {\n        if (oneList.getSize() < 1) {\n            try {\n                // 模拟从远程获取数据的时间\n                Thread.sleep(2000);\n                oneList.add(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return oneList;\n    }\n}\n\nclass ThreadO extends Thread {\n\n    private OneList oneList;\n\n    public ThreadO(OneList oneList) {\n        this.oneList = oneList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        OneListService service = new OneListService();\n        service.addServiceMethod(oneList, 1);\n    }\n}\n\nclass ThreadP extends Thread {\n\n    private OneList oneList;\n\n    public ThreadP(OneList oneList) {\n        this.oneList = oneList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        OneListService service = new OneListService();\n        service.addServiceMethod(oneList, 1);\n    }\n}\n```\n执行结果：\n```\noneList.getSize = 2\n```\n分析：“脏读”出现了，出现的原因是两个线程以异步的方式返回list参数的size大小。\n解决办法是“同步化”。\n\n修改OneListService.addServiceMethod方法\n\n```\nclass OneListService {\n    public OneList addServiceMethod(OneList oneList, Integer value) {\n        synchronized (oneList) {\n            if (oneList.getSize() < 1) {\n                try {\n                    // 模拟从远程获取数据的时间\n                    Thread.sleep(2000);\n                    oneList.add(value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return oneList;\n    }\n}\n```\n执行结果：\n\n```\noneList.getSize = 1\n```\n分析：由于list参数对象在项目中是一份实例，是单例的，而且也正是对list参数的getSize方法做同步的调用，所以就对list参数进行同步处理。\n\n## 细化验证3个结论\n1.当多个线程同时执行synchronized(x){}同步代码块时呈同步效果\n2.当其他线程执行x对象中的synchronized同步方法时呈同步效果\n3.当其他线程执行x对象方法里面的synchronized(this)代码块时也呈同步效果\n\n\n\n","source":"_posts/对象及变量的并发访问.md","raw":"---\ntitle: 对象及变量的并发访问\ncategories: Java多线程编程核心技术\ntags: 多线程\ntime: 2019-04-21 08:36:04\n---\n# synchronized同步方法\n“非线程安全”会在多个线程中的同一对象的实例变量在并发访问时发生，产生的后果就是“脏读”，即读到的数据其实是被更改过的。\n“线程安全”就是以获得的实例变量的值是经过同步处理过的，不会出现“脏读”现象。\n## 方法内的变量为线程安全\n“非线程安全”问题存在与“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，即线程安全。\n## 实例变量非线程安全\n如果多个线程访问一个对象的实例变量，则有可能产生“非线程安全”问题。\n\n```\npublic class HasSelfPrivateNum {\n\n    private int num = 0;\n\n\n    public void addNum(String name) {\n        try {\n            if (\"a\".equals(name)) {\n                num = 100;\n                System.out.println(\"a set over\");\n                Thread.sleep(200);\n            } else {\n                num = 200;\n                System.out.println(\"b set over\");\n            }\n            System.out.println(name + \" num=\" + num);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();\n        Test1 test1 = new Test1(hasSelfPrivateNum);\n        Test2 test2 = new Test2(hasSelfPrivateNum);\n        test1.start();\n        test2.start();\n    }\n\n}\n\nclass Test1 extends Thread {\n    private HasSelfPrivateNum hasSelfPrivateNum;\n    Test1(HasSelfPrivateNum hasSelfPrivateNum) {\n        this.hasSelfPrivateNum = hasSelfPrivateNum;\n    }\n    @Override\n    public void run() {\n        super.run();\n        hasSelfPrivateNum.addNum(\"a\");\n    }\n}\n\nclass Test2 extends Thread {\n    private HasSelfPrivateNum hasSelfPrivateNum;\n    Test2(HasSelfPrivateNum hasSelfPrivateNum) {\n        this.hasSelfPrivateNum = hasSelfPrivateNum;\n    }\n    @Override\n    public void run() {\n        super.run();\n        hasSelfPrivateNum.addNum(\"b\");\n    }\n}\n```\n运行结果：\n\n```\na set over\nb set over\nb num=200\na num=200\n```\n\n分析：Test1和Test2两个线程同时访问一个没有同步的方法addNum，则出现了线程不安全的问题。解决方式只需要给addNum方法前加synchronized关键字。\n\n加锁后的执行效果：\n```\na set over\na num=100\nb set over\nb num=200\n```\n\n## 多个对象多个锁\n\n```\n public static void main(String[] args) {\n        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();\n        HasSelfPrivateNum hasSelfPrivateNum2 = new HasSelfPrivateNum();\n        Test1 test1 = new Test1(hasSelfPrivateNum);\n        Test2 test2 = new Test2(hasSelfPrivateNum2);\n        test1.start();\n        test2.start();\n    }\n\n```\n运行结果：\n```\na set over\nb set over\nb num=200\na num=100\n```\n分析：两个线程分别访问同一个类的两个不同实例的相同名称的同步方法，效果却是异步的方式运行的。\n关键字synchronized取得的锁是对象锁，而不是把一段代码或方法作为锁，所以在上面的示例中哪个线程先执行带synchrozined关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。但如果多个线程访问多个对象，例如上面示例中创建了2个HasSelfPrivateNum.java对象，所以就会产生2个锁，会异步执行。\n\n## synchronized方法与锁对象\n验证synchronized与对象的关系\n```\npublic class SynchronizedMethodLock {\n\n    public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run\");\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SynchronizedMethodLock obj = new SynchronizedMethodLock();\n        ThreadA threadA = new ThreadA(obj);\n        threadA.setName(\"A\");\n        ThreadB threadB = new ThreadB(obj);\n        threadB.setName(\"B\");\n        threadA.start();\n        threadB.start();\n    }\n\n}\n\nclass ThreadA extends Thread {\n    private SynchronizedMethodLock lock;\n\n    public ThreadA(SynchronizedMethodLock obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n\nclass ThreadB extends Thread {\n    private SynchronizedMethodLock lock;\n\n    public ThreadB(SynchronizedMethodLock obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n```\n运行结果：\n\n```\nA run\nB run\nend\nend\n```\n分析：给methodA不加锁的情况下，是异步执行的；\n\n```\n synchronized public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run\");\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n给methodA加锁后是同步执行的，即排队执行。\n\n```\nA run\nend\nB run\nend\n```\n结论：\n1.调用synchronized声明的方法是排队运行的；\n2.共享资源的读写需要同步化，否则就没有同步的必要。\n\n同步方法和普通方法执行验证\n\n```\npublic class SynchronizedMethodLock2 {\n\n    synchronized public void methodA() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run：\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void methodB() {\n        try {\n            System.out.println(Thread.currentThread().getName() + \" run：\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SynchronizedMethodLock2 obj = new SynchronizedMethodLock2();\n        ThreadC threadC = new ThreadC(obj);\n        threadC.setName(\"C\");\n        ThreadD threadD = new ThreadD(obj);\n        threadD.setName(\"D\");\n        threadC.start();\n        threadD.start();\n    }\n\n}\n\nclass ThreadC extends Thread {\n    private SynchronizedMethodLock2 lock;\n\n    public ThreadC(SynchronizedMethodLock2 obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodA();\n    }\n}\n\nclass ThreadD extends Thread {\n    private SynchronizedMethodLock2 lock;\n\n    public ThreadD(SynchronizedMethodLock2 obj) {\n        this.lock = obj;\n    }\n    @Override\n    public void run() {\n        super.run();\n        lock.methodB();\n    }\n}\n```\n运行结果：\n\n```\nC run：1555810474080\nD run：1555810474080\nend\nend\n```\n给methodB加锁后运行\n\n```\nC run：1555810535023\nend\nD run：1555810540026\nend\n```\n结论：\n1.ThreadA线程持有object锁，B线程可以以异步的方式调用object中的非synchronized类型的方法；\n2.ThreadA线程持有object锁，B线程如果在这时调用object对象中的synchronized类型的方法则需要等待，也就是同步。\n\n## 脏读\n在赋值时虽然同步，但在取值时可能发生意想不到的意外，这种情况就是脏读（dirtyRead）。\n发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。\n\n```\npublic class DirtyRead {\n\n    private String username = \"A\";\n\n    private String password = \"AA\";\n\n    synchronized public void setValue(String username, String password) {\n        try {\n            this.username = username;\n            Thread.sleep(5000);\n            this.password = password;\n            System.out.println(\"setValue：\" + Thread.currentThread().getName()\n                    + \" username: \" + username + \" password: \" + password);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void getValue() {\n        System.out.println(\"getValue：\" + Thread.currentThread().getName()\n                + \" username: \" + username + \" password: \" + password);\n    }\n}\n\nclass ThreadF extends Thread {\n\n    private DirtyRead dirtyRead;\n\n    public ThreadF (DirtyRead dirtyRead) {\n        this.dirtyRead = dirtyRead;\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        dirtyRead.setValue(\"B\", \"BB\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        DirtyRead dirtyRead = new DirtyRead();\n        ThreadF threadF = new ThreadF(dirtyRead);\n        threadF.start();\n        Thread.sleep(200);\n        dirtyRead.getValue();\n    }\n}\n\n```\n运行结果：\n\n```\ngetValue：main username: B password: AA\nsetValue：Thread-0 username: B password: BB\n```\n分析：出现脏读的原因是因为getValue方法不是同步的，所以可以在任意时刻调用；\n解决方法是添加synchronized关键字。\n\n```\nsynchronized public void getValue() {\n        System.out.println(\"getValue：\" + Thread.currentThread().getName()\n                + \" username: \" + username + \" password: \" + password);\n    }\n```\n\n运行结果：OK！\n```\nsetValue：Thread-0 username: B password: BB\ngetValue：main username: B password: BB\n```\n分析：setValue和getValue方法被依次执行。\n\n结论：\n1.当A线程调用对象中的synchronized方法X时，A线程就获取到了对象锁，其他线程必须等A执行完后才可以调用X方法，但B线程可以随意调用非synchronized方法。如果调用的是其他synchronized方法，也需要等待顺序执行；\n2.脏读一定出现中操作实例变量的情况下，这也是不同线程“争抢”实例变量的结果。\n\n## synchronized锁重入\n关键字synchronized拥有锁重入的功能，也就是在使用synchronized时，当一个线程得到对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。这也证明在一个synchronized方法的内部调用本类的其他synchronized方法时，是永远可以得到锁的。如果不可重入锁的话，就会造成**死锁**。\n\n”可重入锁“的概念：自己可以再次获取自己的内部锁。\n```\npublic class SynLockIn {\n\n    synchronized public void method1() {\n        System.out.println(\"method1\");\n        method2();\n    }\n\n    synchronized public void method2() {\n        System.out.println(\"method2\");\n        method3();\n    }\n\n    synchronized public void method3() {\n        System.out.println(\"method3\");\n\n    }\n}\n\nclass ThreadG extends Thread {\n    SynLockIn synLockIn;\n\n    public ThreadG(SynLockIn synLockIn) {\n        this.synLockIn = synLockIn;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synLockIn.method1();\n    }\n\n    public static void main(String[] args) {\n        SynLockIn synLockIn = new SynLockIn();\n        ThreadG threadG = new ThreadG(synLockIn);\n        threadG.start();\n    }\n}\n```\n运行结果：\n\n```\nmethod1\nmethod2\nmethod3\n```\n\n继承关系——重入锁\n\n```\npublic class SynLockInExtends {\n\n    public static void main(String[] args) {\n        ThreadH threadH = new ThreadH();\n        threadH.start();\n    }\n}\n\nclass ThreadH extends Thread{\n    @Override\n    public void run() {\n        super.run();\n        Sub sub = new Sub();\n        sub.operateISubMethod();\n    }\n}\n\nclass Main {\n\n    public int i = 10;\n\n    synchronized public void operateIMainMethod() {\n        try {\n            i --;\n            System.out.println(\"main i = \" + i);\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass Sub extends Main{\n\n    synchronized public void operateISubMethod() {\n        try {\n            while (i > 0) {\n                i --;\n                System.out.println(\"sub i = \" + i);\n                Thread.sleep(100);\n                this.operateIMainMethod();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n运行结果：\n\n```\nsub i = 9\nmain i = 8\nsub i = 7\nmain i = 6\nsub i = 5\nmain i = 4\nsub i = 3\nmain i = 2\nsub i = 1\nmain i = 0\n```\n结论：当存在继承关系是，子类可以通过“可重入锁”访问父类的同步方法。\n\n## 出现异常，锁自动释放\n当一个线程执行的代码出现异常时，其持有的锁会自动释放。\n\n## 同步不具有继承性\n同步不可以继承。即使父类的方法是synchronized，那么子类重写父类的方法想要同步效果，也要加synchronized关键字。\n\n# synchronized同步语句块\n用关键字synchronized声明方法在某些情况下是有弊端的，例如A线程执行同步方法需要一个很长的时间，那么B线程则必须等待比较长的时间。在这样的情况下使用synchronized同步语句块来解决。synchronized方法是对当前对象加锁，而synchronized代码块是对某一个对象进行加锁。\n## synchronized方法的弊端\n其他线程等待时间过长。\n\n```\npublic class SynchronizedLongTime {\n\n    private String getData1;\n\n    private String getData2;\n\n    synchronized public void doLongTimeTask(String data1, String data2) {\n        try {\n            System.out.println(\"begin task\");\n            System.out.println(\"线程：\" + Thread.currentThread().getName());\n            Thread.sleep(3000);\n            // 线程安全主要在这儿！\n            setData(data1, data2);\n            System.out.println(Thread.currentThread().getName() + \" getData1=\" + getData1 + \"; getData2=\" + getData1);\n            System.out.println(\"end task\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void setData(String data1, String data2) {\n        this.getData1 = data1;\n        this.getData2 = data2;\n    }\n\n    public static void main(String[] args) {\n        SynchronizedLongTime task = new SynchronizedLongTime();\n        ThreadI threadI = new ThreadI(task);\n        threadI.start();\n        ThreadJ threadJ = new ThreadJ(task);\n        threadJ.start();\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long begin = CommonUtils.beginTime1;\n        if(CommonUtils.beginTime1 > CommonUtils.beginTime2) {\n            begin = CommonUtils.beginTime2;\n        }\n        long end = CommonUtils.endTime1;\n        if (CommonUtils.endTime1 < CommonUtils.endTime2) {\n            end = CommonUtils.endTime2;\n        }\n        System.out.println(\"总耗时：\" + (end - begin)/1000 + \" 秒\");\n    }\n}\n\nclass ThreadI extends Thread {\n    SynchronizedLongTime synchronizedLongTime;\n    public ThreadI(SynchronizedLongTime synchronizedLongTime) {\n        this.synchronizedLongTime = synchronizedLongTime;\n    }\n    @Override\n    public void run() {\n        super.run();\n        CommonUtils.beginTime1 = System.currentTimeMillis();\n        synchronizedLongTime.doLongTimeTask(\"AAA\", \"aaa\");\n        CommonUtils.endTime1 = System.currentTimeMillis();\n    }\n}\n\nclass ThreadJ extends Thread {\n    SynchronizedLongTime synchronizedLongTime;\n    public ThreadJ(SynchronizedLongTime synchronizedLongTime) {\n        this.synchronizedLongTime = synchronizedLongTime;\n    }\n    @Override\n    public void run() {\n        super.run();\n        CommonUtils.beginTime2 = System.currentTimeMillis();\n        synchronizedLongTime.doLongTimeTask(\"BBB\", \"bbb\");\n        CommonUtils.endTime2 = System.currentTimeMillis();\n    }\n}\n```\n运行结果：\n\n```\nConnected to the target VM, address: '127.0.0.1:63459', transport: 'socket'\nbegin task\n线程：Thread-0\nThread-0 getData1=AAA; getData2=AAA\nend task\nbegin task\n线程：Thread-1\nThread-1 getData1=BBB; getData2=BBB\nend task\nDisconnected from the target VM, address: '127.0.0.1:63459', transport: 'socket'\n总耗时：6 秒\n```\n\n## synchronized同步代码块的使用\n当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程被执行，另一个线程必须等待第一个线程执行完后方可被执行。\n\n优化doLongTimeTask同步方法\n\n```\npublic void doLongTimeTask(String data1, String data2) {\n        try {\n            System.out.println(\"begin task\");\n            System.out.println(\"线程：\" + Thread.currentThread().getName());\n            Thread.sleep(3000);\n            // 线程安全主要在这儿！\n            synchronized(this) {\n                setData(data1, data2);\n            }\n            System.out.println(Thread.currentThread().getName() + \" getData1=\" + getData1 + \"; getData2=\" + getData1);\n            System.out.println(\"end task\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n```\nbegin task\n线程：Thread-0\nbegin task\n线程：Thread-1\nThread-0 getData1=AAA; getData2=AAA\nend task\nThread-1 getData1=BBB; getData2=BBB\nend task\n总耗时：3 秒\n```\n总结： 同步代码块比同步方法时间更少，运行效率更块。\n\n## 一半同步，一半异步\n不在synchronized中的代码异步执行，在synchronized中的是同步执行。\n\n## synchronized代码块间的同步性\n在使用同步代码块的时候注意，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的“对象监视器”是一个。\n\n## 验证同步synchronized(this)代码块是锁定当前对象的\n和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。\n\n1.A线程调用同步代码块x，B线程调用非同步代码块y，则x和y是异步执行的；\n2.A线程调用同步代码块x，B线程调用同步代码块z，则x和z是同步执行的，即按顺序执行。\n\n## 将任意对象作为对象监视器\n\n```\npublic class SynBlockString {\n\n    private String username;\n    private String password;\n    private String string = new String();\n\n    public void setUsernamePassword(String username, String password) {\n        synchronized (string) {\n            try {\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 进入同步块\");\n                this.password = password;\n                Thread.sleep(3000);\n                this.username = username;\n                System.out.println(Thread.currentThread().getName() + \" username: \" + username + \" password:\" + password);\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 离开同步块\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        SynBlockString synBlockString = new SynBlockString();\n        ThreadK threadK = new ThreadK(synBlockString);\n        threadK.setName(\"线程A\");\n        threadK.start();\n        ThreadL threadL = new ThreadL(synBlockString);\n        threadL.setName(\"线程B\");\n        threadL.start();\n    }\n}\n\nclass ThreadK extends Thread{\n    SynBlockString synBlockString;\n    public ThreadK(SynBlockString synBlockString) {\n        this.synBlockString = synBlockString;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synBlockString.setUsernamePassword(\"A\", \"a\");\n    }\n}\n\nclass ThreadL extends Thread{\n    SynBlockString synBlockString;\n    public ThreadL(SynBlockString synBlockString) {\n        this.synBlockString = synBlockString;\n    }\n    @Override\n    public void run() {\n        super.run();\n        synBlockString.setUsernamePassword(\"B\", \"b\");\n    }\n}\n\n```\n运行结果：\n\n```\n线程A 在：1555822223367 进入同步块\n线程A username: A password:a\n线程A 在：1555822226369 离开同步块\n线程B 在：1555822226370 进入同步块\n线程B username: B password:b\n线程B 在：1555822229370 离开同步块\n\n```\n锁非this对象具有一定的优点：如果一个类中有多个synchronized方法，这时能实现同步，但会受到阻塞，所以影响效率；\n但如果用同步代码块锁非this对象，则是异步的，不与其他锁this同步方法争抢this锁，则可大大提高效率。\n\n修改代码\n```\n public void setUsernamePassword(String username, String password) {\n        String string = new String(); // 每次调用都产生一个新的String对象\n        synchronized (string) {\n            try {\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 进入同步块\");\n                this.password = password;\n                Thread.sleep(3000);\n                this.username = username;\n                System.out.println(Thread.currentThread().getName() + \" 在：\" + System.currentTimeMillis() + \" 离开同步块\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n执行结果：\n\n```\n线程A 在：1555822247681 进入同步块\n线程B 在：1555822247683 进入同步块\n线程A username: A password:a\n线程A 在：1555822250682 离开同步块\n线程B username: B password:b\n线程B 在：1555822250685 离开同步块\n```\n 分析：使用synchronized(非this对象x)同步代码块进行同步操作时，对象监视器必须是同一个对象。如果不是同一个对象监视器，运行的结果就是异步调用的，就会交叉执行。\n\n\n```\npublic class SynList {\n\n    private List<Integer> list = new ArrayList<Integer>();\n\n    synchronized public void addA(Integer value) {\n        System.out.println(Thread.currentThread().getName() + \" 开始执行addA方法\");\n        list.add(value);\n        System.out.println(Thread.currentThread().getName() + \" 退出addA方法\");\n    }\n\n\n    synchronized public void addB(Integer value) {\n        System.out.println(Thread.currentThread().getName() + \" 开始执行addB方法\");\n        list.add(value);\n        System.out.println(Thread.currentThread().getName() + \" 退出addB方法\");\n    }\n\n    public static void main(String[] args) {\n        SynList synList = new SynList();\n        ThreadM threadM = new ThreadM(synList);\n        threadM.setName(\"M\");\n        threadM.start();\n        ThreadN threadN = new ThreadN(synList);\n        threadN.setName(\"N\");\n        threadN.start();\n\n    }\n}\n\nclass ThreadM extends Thread {\n    SynList synList = new SynList();\n    public ThreadM(SynList synList) {\n        this.synList = synList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 10000; i++) {\n            synList.addA(i);\n        }\n    }\n}\n\nclass ThreadN extends Thread {\n    SynList synList = new SynList();\n    public ThreadN(SynList synList) {\n        this.synList = synList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        for (int i = 0; i < 10000; i++) {\n            synList.addB(i);\n        }\n    }\n}\n```\n\n运行结果：\n\n```\n省略...\nM 退出addA方法\nM 开始执行addA方法\nM 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\n省略...\nN 退出addA方法\nN 开始执行addA方法\nN 退出addA方法\nM 开始执行addA方法\nM 退出addA方法\n省略...\n```\n分析：线程M和N异步执行了，可能会出现脏读的问题。\n\n```\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SynNotThisDirtyRead {\n    public static void main(String[] args) {\n        OneList oneList = new OneList();\n        ThreadO threadO = new ThreadO(oneList);\n        threadO.start();\n\n        ThreadP threadp = new ThreadP(oneList);\n        threadp.start();\n\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"oneList.getSize = \" + oneList.getSize());\n    }\n}\n\nclass OneList {\n    private List<Integer> list = new ArrayList<Integer>();\n    public void add(Integer value) {\n        list.add(value);\n    }\n\n    public int getSize() {\n        return list.size();\n    }\n}\n\nclass OneListService {\n    synchronized public OneList addServiceMethod(OneList oneList, Integer value) {\n        if (oneList.getSize() < 1) {\n            try {\n                // 模拟从远程获取数据的时间\n                Thread.sleep(2000);\n                oneList.add(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return oneList;\n    }\n}\n\nclass ThreadO extends Thread {\n\n    private OneList oneList;\n\n    public ThreadO(OneList oneList) {\n        this.oneList = oneList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        OneListService service = new OneListService();\n        service.addServiceMethod(oneList, 1);\n    }\n}\n\nclass ThreadP extends Thread {\n\n    private OneList oneList;\n\n    public ThreadP(OneList oneList) {\n        this.oneList = oneList;\n    }\n    @Override\n    public void run() {\n        super.run();\n        OneListService service = new OneListService();\n        service.addServiceMethod(oneList, 1);\n    }\n}\n```\n执行结果：\n```\noneList.getSize = 2\n```\n分析：“脏读”出现了，出现的原因是两个线程以异步的方式返回list参数的size大小。\n解决办法是“同步化”。\n\n修改OneListService.addServiceMethod方法\n\n```\nclass OneListService {\n    public OneList addServiceMethod(OneList oneList, Integer value) {\n        synchronized (oneList) {\n            if (oneList.getSize() < 1) {\n                try {\n                    // 模拟从远程获取数据的时间\n                    Thread.sleep(2000);\n                    oneList.add(value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return oneList;\n    }\n}\n```\n执行结果：\n\n```\noneList.getSize = 1\n```\n分析：由于list参数对象在项目中是一份实例，是单例的，而且也正是对list参数的getSize方法做同步的调用，所以就对list参数进行同步处理。\n\n## 细化验证3个结论\n1.当多个线程同时执行synchronized(x){}同步代码块时呈同步效果\n2.当其他线程执行x对象中的synchronized同步方法时呈同步效果\n3.当其他线程执行x对象方法里面的synchronized(this)代码块时也呈同步效果\n\n\n\n","slug":"对象及变量的并发访问","published":1,"date":"2019-04-22T12:22:43.190Z","updated":"2019-04-22T12:22:43.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xui004lvq6b7iufq6cj","content":"<h1 id=\"synchronized同步方法\">synchronized同步方法</h1>\n<p>“非线程安全”会在多个线程中的同一对象的实例变量在并发访问时发生，产生的后果就是“脏读”，即读到的数据其实是被更改过的。<br>\n“线程安全”就是以获得的实例变量的值是经过同步处理过的，不会出现“脏读”现象。</p>\n<h2 id=\"方法内的变量为线程安全\">方法内的变量为线程安全</h2>\n<p>“非线程安全”问题存在与“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，即线程安全。</p>\n<h2 id=\"实例变量非线程安全\">实例变量非线程安全</h2>\n<p>如果多个线程访问一个对象的实例变量，则有可能产生“非线程安全”问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HasSelfPrivateNum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int num = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void addNum(String name) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (&quot;a&quot;.equals(name)) &#123;</span><br><span class=\"line\">                num = 100;</span><br><span class=\"line\">                System.out.println(&quot;a set over&quot;);</span><br><span class=\"line\">                Thread.sleep(200);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                num = 200;</span><br><span class=\"line\">                System.out.println(&quot;b set over&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(name + &quot; num=&quot; + num);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();</span><br><span class=\"line\">        Test1 test1 = new Test1(hasSelfPrivateNum);</span><br><span class=\"line\">        Test2 test2 = new Test2(hasSelfPrivateNum);</span><br><span class=\"line\">        test1.start();</span><br><span class=\"line\">        test2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test1 extends Thread &#123;</span><br><span class=\"line\">    private HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class=\"line\">    Test1(HasSelfPrivateNum hasSelfPrivateNum) &#123;</span><br><span class=\"line\">        this.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        hasSelfPrivateNum.addNum(&quot;a&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test2 extends Thread &#123;</span><br><span class=\"line\">    private HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class=\"line\">    Test2(HasSelfPrivateNum hasSelfPrivateNum) &#123;</span><br><span class=\"line\">        this.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        hasSelfPrivateNum.addNum(&quot;b&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br><span class=\"line\">a num=200</span><br></pre></td></tr></table></figure>\n<p>分析：Test1和Test2两个线程同时访问一个没有同步的方法addNum，则出现了线程不安全的问题。解决方式只需要给addNum方法前加synchronized关键字。</p>\n<p>加锁后的执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">a num=100</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br></pre></td></tr></table></figure>\n<h2 id=\"多个对象多个锁\">多个对象多个锁</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">       HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();</span><br><span class=\"line\">       HasSelfPrivateNum hasSelfPrivateNum2 = new HasSelfPrivateNum();</span><br><span class=\"line\">       Test1 test1 = new Test1(hasSelfPrivateNum);</span><br><span class=\"line\">       Test2 test2 = new Test2(hasSelfPrivateNum2);</span><br><span class=\"line\">       test1.start();</span><br><span class=\"line\">       test2.start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br><span class=\"line\">a num=100</span><br></pre></td></tr></table></figure>\n<p>分析：两个线程分别访问同一个类的两个不同实例的相同名称的同步方法，效果却是异步的方式运行的。<br>\n关键字synchronized取得的锁是对象锁，而不是把一段代码或方法作为锁，所以在上面的示例中哪个线程先执行带synchrozined关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。但如果多个线程访问多个对象，例如上面示例中创建了2个HasSelfPrivateNum.java对象，所以就会产生2个锁，会异步执行。</p>\n<h2 id=\"synchronized方法与锁对象\">synchronized方法与锁对象</h2>\n<p>验证synchronized与对象的关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedMethodLock &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void methodA() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run&quot;);</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedMethodLock obj = new SynchronizedMethodLock();</span><br><span class=\"line\">        ThreadA threadA = new ThreadA(obj);</span><br><span class=\"line\">        threadA.setName(&quot;A&quot;);</span><br><span class=\"line\">        ThreadB threadB = new ThreadB(obj);</span><br><span class=\"line\">        threadB.setName(&quot;B&quot;);</span><br><span class=\"line\">        threadA.start();</span><br><span class=\"line\">        threadB.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadA extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadA(SynchronizedMethodLock obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadB extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadB(SynchronizedMethodLock obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A run</span><br><span class=\"line\">B run</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：给methodA不加锁的情况下，是异步执行的；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized public void methodA() &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName() + &quot; run&quot;);</span><br><span class=\"line\">           Thread.sleep(5000);</span><br><span class=\"line\">           System.out.println(&quot;end&quot;);</span><br><span class=\"line\">       &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>给methodA加锁后是同步执行的，即排队执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A run</span><br><span class=\"line\">end</span><br><span class=\"line\">B run</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.调用synchronized声明的方法是排队运行的；<br>\n2.共享资源的读写需要同步化，否则就没有同步的必要。</p>\n<p>同步方法和普通方法执行验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedMethodLock2 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void methodA() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run：&quot; + System.currentTimeMillis());</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void methodB() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run：&quot; + System.currentTimeMillis());</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedMethodLock2 obj = new SynchronizedMethodLock2();</span><br><span class=\"line\">        ThreadC threadC = new ThreadC(obj);</span><br><span class=\"line\">        threadC.setName(&quot;C&quot;);</span><br><span class=\"line\">        ThreadD threadD = new ThreadD(obj);</span><br><span class=\"line\">        threadD.setName(&quot;D&quot;);</span><br><span class=\"line\">        threadC.start();</span><br><span class=\"line\">        threadD.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadC extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock2 lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadC(SynchronizedMethodLock2 obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadD extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock2 lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadD(SynchronizedMethodLock2 obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C run：1555810474080</span><br><span class=\"line\">D run：1555810474080</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>给methodB加锁后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C run：1555810535023</span><br><span class=\"line\">end</span><br><span class=\"line\">D run：1555810540026</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.ThreadA线程持有object锁，B线程可以以异步的方式调用object中的非synchronized类型的方法；<br>\n2.ThreadA线程持有object锁，B线程如果在这时调用object对象中的synchronized类型的方法则需要等待，也就是同步。</p>\n<h2 id=\"脏读\">脏读</h2>\n<p>在赋值时虽然同步，但在取值时可能发生意想不到的意外，这种情况就是脏读（dirtyRead）。<br>\n发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DirtyRead &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username = &quot;A&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String password = &quot;AA&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void setValue(String username, String password) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            this.username = username;</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            this.password = password;</span><br><span class=\"line\">            System.out.println(&quot;setValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                    + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void getValue() &#123;</span><br><span class=\"line\">        System.out.println(&quot;getValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadF extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private DirtyRead dirtyRead;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadF (DirtyRead dirtyRead) &#123;</span><br><span class=\"line\">        this.dirtyRead = dirtyRead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        dirtyRead.setValue(&quot;B&quot;, &quot;BB&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        DirtyRead dirtyRead = new DirtyRead();</span><br><span class=\"line\">        ThreadF threadF = new ThreadF(dirtyRead);</span><br><span class=\"line\">        threadF.start();</span><br><span class=\"line\">        Thread.sleep(200);</span><br><span class=\"line\">        dirtyRead.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getValue：main username: B password: AA</span><br><span class=\"line\">setValue：Thread-0 username: B password: BB</span><br></pre></td></tr></table></figure>\n<p>分析：出现脏读的原因是因为getValue方法不是同步的，所以可以在任意时刻调用；<br>\n解决方法是添加synchronized关键字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized public void getValue() &#123;</span><br><span class=\"line\">        System.out.println(&quot;getValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：OK！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setValue：Thread-0 username: B password: BB</span><br><span class=\"line\">getValue：main username: B password: BB</span><br></pre></td></tr></table></figure>\n<p>分析：setValue和getValue方法被依次执行。</p>\n<p>结论：<br>\n1.当A线程调用对象中的synchronized方法X时，A线程就获取到了对象锁，其他线程必须等A执行完后才可以调用X方法，但B线程可以随意调用非synchronized方法。如果调用的是其他synchronized方法，也需要等待顺序执行；<br>\n2.脏读一定出现中操作实例变量的情况下，这也是不同线程“争抢”实例变量的结果。</p>\n<h2 id=\"synchronized锁重入\">synchronized锁重入</h2>\n<p>关键字synchronized拥有锁重入的功能，也就是在使用synchronized时，当一个线程得到对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。这也证明在一个synchronized方法的内部调用本类的其他synchronized方法时，是永远可以得到锁的。如果不可重入锁的话，就会造成<strong>死锁</strong>。</p>\n<p>”可重入锁“的概念：自己可以再次获取自己的内部锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynLockIn &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method1() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method1&quot;);</span><br><span class=\"line\">        method2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method2() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method2&quot;);</span><br><span class=\"line\">        method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method3() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadG extends Thread &#123;</span><br><span class=\"line\">    SynLockIn synLockIn;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadG(SynLockIn synLockIn) &#123;</span><br><span class=\"line\">        this.synLockIn = synLockIn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synLockIn.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynLockIn synLockIn = new SynLockIn();</span><br><span class=\"line\">        ThreadG threadG = new ThreadG(synLockIn);</span><br><span class=\"line\">        threadG.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method1</span><br><span class=\"line\">method2</span><br><span class=\"line\">method3</span><br></pre></td></tr></table></figure>\n<p>继承关系——重入锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynLockInExtends &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ThreadH threadH = new ThreadH();</span><br><span class=\"line\">        threadH.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadH extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        Sub sub = new Sub();</span><br><span class=\"line\">        sub.operateISubMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int i = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void operateIMainMethod() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            i --;</span><br><span class=\"line\">            System.out.println(&quot;main i = &quot; + i);</span><br><span class=\"line\">            Thread.sleep(100);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Sub extends Main&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void operateISubMethod() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (i &gt; 0) &#123;</span><br><span class=\"line\">                i --;</span><br><span class=\"line\">                System.out.println(&quot;sub i = &quot; + i);</span><br><span class=\"line\">                Thread.sleep(100);</span><br><span class=\"line\">                this.operateIMainMethod();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sub i = 9</span><br><span class=\"line\">main i = 8</span><br><span class=\"line\">sub i = 7</span><br><span class=\"line\">main i = 6</span><br><span class=\"line\">sub i = 5</span><br><span class=\"line\">main i = 4</span><br><span class=\"line\">sub i = 3</span><br><span class=\"line\">main i = 2</span><br><span class=\"line\">sub i = 1</span><br><span class=\"line\">main i = 0</span><br></pre></td></tr></table></figure>\n<p>结论：当存在继承关系是，子类可以通过“可重入锁”访问父类的同步方法。</p>\n<h2 id=\"出现异常锁自动释放\">出现异常，锁自动释放</h2>\n<p>当一个线程执行的代码出现异常时，其持有的锁会自动释放。</p>\n<h2 id=\"同步不具有继承性\">同步不具有继承性</h2>\n<p>同步不可以继承。即使父类的方法是synchronized，那么子类重写父类的方法想要同步效果，也要加synchronized关键字。</p>\n<h1 id=\"synchronized同步语句块\">synchronized同步语句块</h1>\n<p>用关键字synchronized声明方法在某些情况下是有弊端的，例如A线程执行同步方法需要一个很长的时间，那么B线程则必须等待比较长的时间。在这样的情况下使用synchronized同步语句块来解决。synchronized方法是对当前对象加锁，而synchronized代码块是对某一个对象进行加锁。</p>\n<h2 id=\"synchronized方法的弊端\">synchronized方法的弊端</h2>\n<p>其他线程等待时间过长。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedLongTime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getData1;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getData2;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void doLongTimeTask(String data1, String data2) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;begin task&quot;);</span><br><span class=\"line\">            System.out.println(&quot;线程：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">            Thread.sleep(3000);</span><br><span class=\"line\">            // 线程安全主要在这儿！</span><br><span class=\"line\">            setData(data1, data2);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; getData1=&quot; + getData1 + &quot;; getData2=&quot; + getData1);</span><br><span class=\"line\">            System.out.println(&quot;end task&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void setData(String data1, String data2) &#123;</span><br><span class=\"line\">        this.getData1 = data1;</span><br><span class=\"line\">        this.getData2 = data2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedLongTime task = new SynchronizedLongTime();</span><br><span class=\"line\">        ThreadI threadI = new ThreadI(task);</span><br><span class=\"line\">        threadI.start();</span><br><span class=\"line\">        ThreadJ threadJ = new ThreadJ(task);</span><br><span class=\"line\">        threadJ.start();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(10000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long begin = CommonUtils.beginTime1;</span><br><span class=\"line\">        if(CommonUtils.beginTime1 &gt; CommonUtils.beginTime2) &#123;</span><br><span class=\"line\">            begin = CommonUtils.beginTime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long end = CommonUtils.endTime1;</span><br><span class=\"line\">        if (CommonUtils.endTime1 &lt; CommonUtils.endTime2) &#123;</span><br><span class=\"line\">            end = CommonUtils.endTime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;总耗时：&quot; + (end - begin)/1000 + &quot; 秒&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadI extends Thread &#123;</span><br><span class=\"line\">    SynchronizedLongTime synchronizedLongTime;</span><br><span class=\"line\">    public ThreadI(SynchronizedLongTime synchronizedLongTime) &#123;</span><br><span class=\"line\">        this.synchronizedLongTime = synchronizedLongTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        CommonUtils.beginTime1 = System.currentTimeMillis();</span><br><span class=\"line\">        synchronizedLongTime.doLongTimeTask(&quot;AAA&quot;, &quot;aaa&quot;);</span><br><span class=\"line\">        CommonUtils.endTime1 = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadJ extends Thread &#123;</span><br><span class=\"line\">    SynchronizedLongTime synchronizedLongTime;</span><br><span class=\"line\">    public ThreadJ(SynchronizedLongTime synchronizedLongTime) &#123;</span><br><span class=\"line\">        this.synchronizedLongTime = synchronizedLongTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        CommonUtils.beginTime2 = System.currentTimeMillis();</span><br><span class=\"line\">        synchronizedLongTime.doLongTimeTask(&quot;BBB&quot;, &quot;bbb&quot;);</span><br><span class=\"line\">        CommonUtils.endTime2 = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connected to the target VM, address: &apos;127.0.0.1:63459&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-0</span><br><span class=\"line\">Thread-0 getData1=AAA; getData2=AAA</span><br><span class=\"line\">end task</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-1</span><br><span class=\"line\">Thread-1 getData1=BBB; getData2=BBB</span><br><span class=\"line\">end task</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:63459&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">总耗时：6 秒</span><br></pre></td></tr></table></figure>\n<h2 id=\"synchronized同步代码块的使用\">synchronized同步代码块的使用</h2>\n<p>当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程被执行，另一个线程必须等待第一个线程执行完后方可被执行。</p>\n<p>优化doLongTimeTask同步方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void doLongTimeTask(String data1, String data2) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;begin task&quot;);</span><br><span class=\"line\">            System.out.println(&quot;线程：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">            Thread.sleep(3000);</span><br><span class=\"line\">            // 线程安全主要在这儿！</span><br><span class=\"line\">            synchronized(this) &#123;</span><br><span class=\"line\">                setData(data1, data2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; getData1=&quot; + getData1 + &quot;; getData2=&quot; + getData1);</span><br><span class=\"line\">            System.out.println(&quot;end task&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-0</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-1</span><br><span class=\"line\">Thread-0 getData1=AAA; getData2=AAA</span><br><span class=\"line\">end task</span><br><span class=\"line\">Thread-1 getData1=BBB; getData2=BBB</span><br><span class=\"line\">end task</span><br><span class=\"line\">总耗时：3 秒</span><br></pre></td></tr></table></figure>\n<p>总结： 同步代码块比同步方法时间更少，运行效率更块。</p>\n<h2 id=\"一半同步一半异步\">一半同步，一半异步</h2>\n<p>不在synchronized中的代码异步执行，在synchronized中的是同步执行。</p>\n<h2 id=\"synchronized代码块间的同步性\">synchronized代码块间的同步性</h2>\n<p>在使用同步代码块的时候注意，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的“对象监视器”是一个。</p>\n<h2 id=\"验证同步synchronizedthis代码块是锁定当前对象的\">验证同步synchronized(this)代码块是锁定当前对象的</h2>\n<p>和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。</p>\n<p>1.A线程调用同步代码块x，B线程调用非同步代码块y，则x和y是异步执行的；<br>\n2.A线程调用同步代码块x，B线程调用同步代码块z，则x和z是同步执行的，即按顺序执行。</p>\n<h2 id=\"将任意对象作为对象监视器\">将任意对象作为对象监视器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynBlockString &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username;</span><br><span class=\"line\">    private String password;</span><br><span class=\"line\">    private String string = new String();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUsernamePassword(String username, String password) &#123;</span><br><span class=\"line\">        synchronized (string) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 进入同步块&quot;);</span><br><span class=\"line\">                this.password = password;</span><br><span class=\"line\">                Thread.sleep(3000);</span><br><span class=\"line\">                this.username = username;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; username: &quot; + username + &quot; password:&quot; + password);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 离开同步块&quot;);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynBlockString synBlockString = new SynBlockString();</span><br><span class=\"line\">        ThreadK threadK = new ThreadK(synBlockString);</span><br><span class=\"line\">        threadK.setName(&quot;线程A&quot;);</span><br><span class=\"line\">        threadK.start();</span><br><span class=\"line\">        ThreadL threadL = new ThreadL(synBlockString);</span><br><span class=\"line\">        threadL.setName(&quot;线程B&quot;);</span><br><span class=\"line\">        threadL.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadK extends Thread&#123;</span><br><span class=\"line\">    SynBlockString synBlockString;</span><br><span class=\"line\">    public ThreadK(SynBlockString synBlockString) &#123;</span><br><span class=\"line\">        this.synBlockString = synBlockString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synBlockString.setUsernamePassword(&quot;A&quot;, &quot;a&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadL extends Thread&#123;</span><br><span class=\"line\">    SynBlockString synBlockString;</span><br><span class=\"line\">    public ThreadL(SynBlockString synBlockString) &#123;</span><br><span class=\"line\">        this.synBlockString = synBlockString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synBlockString.setUsernamePassword(&quot;B&quot;, &quot;b&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A 在：1555822223367 进入同步块</span><br><span class=\"line\">线程A username: A password:a</span><br><span class=\"line\">线程A 在：1555822226369 离开同步块</span><br><span class=\"line\">线程B 在：1555822226370 进入同步块</span><br><span class=\"line\">线程B username: B password:b</span><br><span class=\"line\">线程B 在：1555822229370 离开同步块</span><br></pre></td></tr></table></figure>\n<p>锁非this对象具有一定的优点：如果一个类中有多个synchronized方法，这时能实现同步，但会受到阻塞，所以影响效率；<br>\n但如果用同步代码块锁非this对象，则是异步的，不与其他锁this同步方法争抢this锁，则可大大提高效率。</p>\n<p>修改代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setUsernamePassword(String username, String password) &#123;</span><br><span class=\"line\">       String string = new String(); // 每次调用都产生一个新的String对象</span><br><span class=\"line\">       synchronized (string) &#123;</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 进入同步块&quot;);</span><br><span class=\"line\">               this.password = password;</span><br><span class=\"line\">               Thread.sleep(3000);</span><br><span class=\"line\">               this.username = username;</span><br><span class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 离开同步块&quot;);</span><br><span class=\"line\">           &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">               e.printStackTrace();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A 在：1555822247681 进入同步块</span><br><span class=\"line\">线程B 在：1555822247683 进入同步块</span><br><span class=\"line\">线程A username: A password:a</span><br><span class=\"line\">线程A 在：1555822250682 离开同步块</span><br><span class=\"line\">线程B username: B password:b</span><br><span class=\"line\">线程B 在：1555822250685 离开同步块</span><br></pre></td></tr></table></figure>\n<p>分析：使用synchronized(非this对象x)同步代码块进行同步操作时，对象监视器必须是同一个对象。如果不是同一个对象监视器，运行的结果就是异步调用的，就会交叉执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynList &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void addA(Integer value) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 开始执行addA方法&quot;);</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 退出addA方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void addB(Integer value) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 开始执行addB方法&quot;);</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 退出addB方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynList synList = new SynList();</span><br><span class=\"line\">        ThreadM threadM = new ThreadM(synList);</span><br><span class=\"line\">        threadM.setName(&quot;M&quot;);</span><br><span class=\"line\">        threadM.start();</span><br><span class=\"line\">        ThreadN threadN = new ThreadN(synList);</span><br><span class=\"line\">        threadN.setName(&quot;N&quot;);</span><br><span class=\"line\">        threadN.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadM extends Thread &#123;</span><br><span class=\"line\">    SynList synList = new SynList();</span><br><span class=\"line\">    public ThreadM(SynList synList) &#123;</span><br><span class=\"line\">        this.synList = synList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">            synList.addA(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadN extends Thread &#123;</span><br><span class=\"line\">    SynList synList = new SynList();</span><br><span class=\"line\">    public ThreadN(SynList synList) &#123;</span><br><span class=\"line\">        this.synList = synList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">            synList.addB(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">M 开始执行addA方法</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">省略...</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">M 开始执行addA方法</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">省略...</span><br></pre></td></tr></table></figure>\n<p>分析：线程M和N异步执行了，可能会出现脏读的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SynNotThisDirtyRead &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        OneList oneList = new OneList();</span><br><span class=\"line\">        ThreadO threadO = new ThreadO(oneList);</span><br><span class=\"line\">        threadO.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadP threadp = new ThreadP(oneList);</span><br><span class=\"line\">        threadp.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;oneList.getSize = &quot; + oneList.getSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OneList &#123;</span><br><span class=\"line\">    private List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    public void add(Integer value) &#123;</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getSize() &#123;</span><br><span class=\"line\">        return list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OneListService &#123;</span><br><span class=\"line\">    synchronized public OneList addServiceMethod(OneList oneList, Integer value) &#123;</span><br><span class=\"line\">        if (oneList.getSize() &lt; 1) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 模拟从远程获取数据的时间</span><br><span class=\"line\">                Thread.sleep(2000);</span><br><span class=\"line\">                oneList.add(value);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadO extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private OneList oneList;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadO(OneList oneList) &#123;</span><br><span class=\"line\">        this.oneList = oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        OneListService service = new OneListService();</span><br><span class=\"line\">        service.addServiceMethod(oneList, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadP extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private OneList oneList;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadP(OneList oneList) &#123;</span><br><span class=\"line\">        this.oneList = oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        OneListService service = new OneListService();</span><br><span class=\"line\">        service.addServiceMethod(oneList, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneList.getSize = 2</span><br></pre></td></tr></table></figure>\n<p>分析：“脏读”出现了，出现的原因是两个线程以异步的方式返回list参数的size大小。<br>\n解决办法是“同步化”。</p>\n<p>修改OneListService.addServiceMethod方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OneListService &#123;</span><br><span class=\"line\">    public OneList addServiceMethod(OneList oneList, Integer value) &#123;</span><br><span class=\"line\">        synchronized (oneList) &#123;</span><br><span class=\"line\">            if (oneList.getSize() &lt; 1) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    // 模拟从远程获取数据的时间</span><br><span class=\"line\">                    Thread.sleep(2000);</span><br><span class=\"line\">                    oneList.add(value);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneList.getSize = 1</span><br></pre></td></tr></table></figure>\n<p>分析：由于list参数对象在项目中是一份实例，是单例的，而且也正是对list参数的getSize方法做同步的调用，所以就对list参数进行同步处理。</p>\n<h2 id=\"细化验证3个结论\">细化验证3个结论</h2>\n<p>1.当多个线程同时执行synchronized(x){}同步代码块时呈同步效果<br>\n2.当其他线程执行x对象中的synchronized同步方法时呈同步效果<br>\n3.当其他线程执行x对象方法里面的synchronized(this)代码块时也呈同步效果</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>synchronized同步方法</h1>\n<p>“非线程安全”会在多个线程中的同一对象的实例变量在并发访问时发生，产生的后果就是“脏读”，即读到的数据其实是被更改过的。<br>\n“线程安全”就是以获得的实例变量的值是经过同步处理过的，不会出现“脏读”现象。</p>\n<h2>方法内的变量为线程安全</h2>\n<p>“非线程安全”问题存在与“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，即线程安全。</p>\n<h2>实例变量非线程安全</h2>\n<p>如果多个线程访问一个对象的实例变量，则有可能产生“非线程安全”问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HasSelfPrivateNum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int num = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void addNum(String name) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (&quot;a&quot;.equals(name)) &#123;</span><br><span class=\"line\">                num = 100;</span><br><span class=\"line\">                System.out.println(&quot;a set over&quot;);</span><br><span class=\"line\">                Thread.sleep(200);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                num = 200;</span><br><span class=\"line\">                System.out.println(&quot;b set over&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(name + &quot; num=&quot; + num);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();</span><br><span class=\"line\">        Test1 test1 = new Test1(hasSelfPrivateNum);</span><br><span class=\"line\">        Test2 test2 = new Test2(hasSelfPrivateNum);</span><br><span class=\"line\">        test1.start();</span><br><span class=\"line\">        test2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test1 extends Thread &#123;</span><br><span class=\"line\">    private HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class=\"line\">    Test1(HasSelfPrivateNum hasSelfPrivateNum) &#123;</span><br><span class=\"line\">        this.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        hasSelfPrivateNum.addNum(&quot;a&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test2 extends Thread &#123;</span><br><span class=\"line\">    private HasSelfPrivateNum hasSelfPrivateNum;</span><br><span class=\"line\">    Test2(HasSelfPrivateNum hasSelfPrivateNum) &#123;</span><br><span class=\"line\">        this.hasSelfPrivateNum = hasSelfPrivateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        hasSelfPrivateNum.addNum(&quot;b&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br><span class=\"line\">a num=200</span><br></pre></td></tr></table></figure>\n<p>分析：Test1和Test2两个线程同时访问一个没有同步的方法addNum，则出现了线程不安全的问题。解决方式只需要给addNum方法前加synchronized关键字。</p>\n<p>加锁后的执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">a num=100</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br></pre></td></tr></table></figure>\n<h2>多个对象多个锁</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">       HasSelfPrivateNum hasSelfPrivateNum = new HasSelfPrivateNum();</span><br><span class=\"line\">       HasSelfPrivateNum hasSelfPrivateNum2 = new HasSelfPrivateNum();</span><br><span class=\"line\">       Test1 test1 = new Test1(hasSelfPrivateNum);</span><br><span class=\"line\">       Test2 test2 = new Test2(hasSelfPrivateNum2);</span><br><span class=\"line\">       test1.start();</span><br><span class=\"line\">       test2.start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a set over</span><br><span class=\"line\">b set over</span><br><span class=\"line\">b num=200</span><br><span class=\"line\">a num=100</span><br></pre></td></tr></table></figure>\n<p>分析：两个线程分别访问同一个类的两个不同实例的相同名称的同步方法，效果却是异步的方式运行的。<br>\n关键字synchronized取得的锁是对象锁，而不是把一段代码或方法作为锁，所以在上面的示例中哪个线程先执行带synchrozined关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。但如果多个线程访问多个对象，例如上面示例中创建了2个HasSelfPrivateNum.java对象，所以就会产生2个锁，会异步执行。</p>\n<h2>synchronized方法与锁对象</h2>\n<p>验证synchronized与对象的关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedMethodLock &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void methodA() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run&quot;);</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedMethodLock obj = new SynchronizedMethodLock();</span><br><span class=\"line\">        ThreadA threadA = new ThreadA(obj);</span><br><span class=\"line\">        threadA.setName(&quot;A&quot;);</span><br><span class=\"line\">        ThreadB threadB = new ThreadB(obj);</span><br><span class=\"line\">        threadB.setName(&quot;B&quot;);</span><br><span class=\"line\">        threadA.start();</span><br><span class=\"line\">        threadB.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadA extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadA(SynchronizedMethodLock obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadB extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadB(SynchronizedMethodLock obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A run</span><br><span class=\"line\">B run</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>分析：给methodA不加锁的情况下，是异步执行的；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized public void methodA() &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           System.out.println(Thread.currentThread().getName() + &quot; run&quot;);</span><br><span class=\"line\">           Thread.sleep(5000);</span><br><span class=\"line\">           System.out.println(&quot;end&quot;);</span><br><span class=\"line\">       &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>给methodA加锁后是同步执行的，即排队执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A run</span><br><span class=\"line\">end</span><br><span class=\"line\">B run</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.调用synchronized声明的方法是排队运行的；<br>\n2.共享资源的读写需要同步化，否则就没有同步的必要。</p>\n<p>同步方法和普通方法执行验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedMethodLock2 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void methodA() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run：&quot; + System.currentTimeMillis());</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void methodB() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; run：&quot; + System.currentTimeMillis());</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedMethodLock2 obj = new SynchronizedMethodLock2();</span><br><span class=\"line\">        ThreadC threadC = new ThreadC(obj);</span><br><span class=\"line\">        threadC.setName(&quot;C&quot;);</span><br><span class=\"line\">        ThreadD threadD = new ThreadD(obj);</span><br><span class=\"line\">        threadD.setName(&quot;D&quot;);</span><br><span class=\"line\">        threadC.start();</span><br><span class=\"line\">        threadD.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadC extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock2 lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadC(SynchronizedMethodLock2 obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadD extends Thread &#123;</span><br><span class=\"line\">    private SynchronizedMethodLock2 lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadD(SynchronizedMethodLock2 obj) &#123;</span><br><span class=\"line\">        this.lock = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        lock.methodB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C run：1555810474080</span><br><span class=\"line\">D run：1555810474080</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>给methodB加锁后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C run：1555810535023</span><br><span class=\"line\">end</span><br><span class=\"line\">D run：1555810540026</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>结论：<br>\n1.ThreadA线程持有object锁，B线程可以以异步的方式调用object中的非synchronized类型的方法；<br>\n2.ThreadA线程持有object锁，B线程如果在这时调用object对象中的synchronized类型的方法则需要等待，也就是同步。</p>\n<h2>脏读</h2>\n<p>在赋值时虽然同步，但在取值时可能发生意想不到的意外，这种情况就是脏读（dirtyRead）。<br>\n发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DirtyRead &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username = &quot;A&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String password = &quot;AA&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void setValue(String username, String password) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            this.username = username;</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">            this.password = password;</span><br><span class=\"line\">            System.out.println(&quot;setValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                    + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void getValue() &#123;</span><br><span class=\"line\">        System.out.println(&quot;getValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadF extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private DirtyRead dirtyRead;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadF (DirtyRead dirtyRead) &#123;</span><br><span class=\"line\">        this.dirtyRead = dirtyRead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        dirtyRead.setValue(&quot;B&quot;, &quot;BB&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        DirtyRead dirtyRead = new DirtyRead();</span><br><span class=\"line\">        ThreadF threadF = new ThreadF(dirtyRead);</span><br><span class=\"line\">        threadF.start();</span><br><span class=\"line\">        Thread.sleep(200);</span><br><span class=\"line\">        dirtyRead.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getValue：main username: B password: AA</span><br><span class=\"line\">setValue：Thread-0 username: B password: BB</span><br></pre></td></tr></table></figure>\n<p>分析：出现脏读的原因是因为getValue方法不是同步的，所以可以在任意时刻调用；<br>\n解决方法是添加synchronized关键字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized public void getValue() &#123;</span><br><span class=\"line\">        System.out.println(&quot;getValue：&quot; + Thread.currentThread().getName()</span><br><span class=\"line\">                + &quot; username: &quot; + username + &quot; password: &quot; + password);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：OK！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setValue：Thread-0 username: B password: BB</span><br><span class=\"line\">getValue：main username: B password: BB</span><br></pre></td></tr></table></figure>\n<p>分析：setValue和getValue方法被依次执行。</p>\n<p>结论：<br>\n1.当A线程调用对象中的synchronized方法X时，A线程就获取到了对象锁，其他线程必须等A执行完后才可以调用X方法，但B线程可以随意调用非synchronized方法。如果调用的是其他synchronized方法，也需要等待顺序执行；<br>\n2.脏读一定出现中操作实例变量的情况下，这也是不同线程“争抢”实例变量的结果。</p>\n<h2>synchronized锁重入</h2>\n<p>关键字synchronized拥有锁重入的功能，也就是在使用synchronized时，当一个线程得到对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。这也证明在一个synchronized方法的内部调用本类的其他synchronized方法时，是永远可以得到锁的。如果不可重入锁的话，就会造成<strong>死锁</strong>。</p>\n<p>”可重入锁“的概念：自己可以再次获取自己的内部锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynLockIn &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method1() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method1&quot;);</span><br><span class=\"line\">        method2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method2() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method2&quot;);</span><br><span class=\"line\">        method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void method3() &#123;</span><br><span class=\"line\">        System.out.println(&quot;method3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadG extends Thread &#123;</span><br><span class=\"line\">    SynLockIn synLockIn;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadG(SynLockIn synLockIn) &#123;</span><br><span class=\"line\">        this.synLockIn = synLockIn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synLockIn.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynLockIn synLockIn = new SynLockIn();</span><br><span class=\"line\">        ThreadG threadG = new ThreadG(synLockIn);</span><br><span class=\"line\">        threadG.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method1</span><br><span class=\"line\">method2</span><br><span class=\"line\">method3</span><br></pre></td></tr></table></figure>\n<p>继承关系——重入锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynLockInExtends &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ThreadH threadH = new ThreadH();</span><br><span class=\"line\">        threadH.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadH extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        Sub sub = new Sub();</span><br><span class=\"line\">        sub.operateISubMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int i = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void operateIMainMethod() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            i --;</span><br><span class=\"line\">            System.out.println(&quot;main i = &quot; + i);</span><br><span class=\"line\">            Thread.sleep(100);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Sub extends Main&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void operateISubMethod() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (i &gt; 0) &#123;</span><br><span class=\"line\">                i --;</span><br><span class=\"line\">                System.out.println(&quot;sub i = &quot; + i);</span><br><span class=\"line\">                Thread.sleep(100);</span><br><span class=\"line\">                this.operateIMainMethod();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sub i = 9</span><br><span class=\"line\">main i = 8</span><br><span class=\"line\">sub i = 7</span><br><span class=\"line\">main i = 6</span><br><span class=\"line\">sub i = 5</span><br><span class=\"line\">main i = 4</span><br><span class=\"line\">sub i = 3</span><br><span class=\"line\">main i = 2</span><br><span class=\"line\">sub i = 1</span><br><span class=\"line\">main i = 0</span><br></pre></td></tr></table></figure>\n<p>结论：当存在继承关系是，子类可以通过“可重入锁”访问父类的同步方法。</p>\n<h2>出现异常，锁自动释放</h2>\n<p>当一个线程执行的代码出现异常时，其持有的锁会自动释放。</p>\n<h2>同步不具有继承性</h2>\n<p>同步不可以继承。即使父类的方法是synchronized，那么子类重写父类的方法想要同步效果，也要加synchronized关键字。</p>\n<h1>synchronized同步语句块</h1>\n<p>用关键字synchronized声明方法在某些情况下是有弊端的，例如A线程执行同步方法需要一个很长的时间，那么B线程则必须等待比较长的时间。在这样的情况下使用synchronized同步语句块来解决。synchronized方法是对当前对象加锁，而synchronized代码块是对某一个对象进行加锁。</p>\n<h2>synchronized方法的弊端</h2>\n<p>其他线程等待时间过长。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynchronizedLongTime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getData1;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getData2;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void doLongTimeTask(String data1, String data2) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;begin task&quot;);</span><br><span class=\"line\">            System.out.println(&quot;线程：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">            Thread.sleep(3000);</span><br><span class=\"line\">            // 线程安全主要在这儿！</span><br><span class=\"line\">            setData(data1, data2);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; getData1=&quot; + getData1 + &quot;; getData2=&quot; + getData1);</span><br><span class=\"line\">            System.out.println(&quot;end task&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void setData(String data1, String data2) &#123;</span><br><span class=\"line\">        this.getData1 = data1;</span><br><span class=\"line\">        this.getData2 = data2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynchronizedLongTime task = new SynchronizedLongTime();</span><br><span class=\"line\">        ThreadI threadI = new ThreadI(task);</span><br><span class=\"line\">        threadI.start();</span><br><span class=\"line\">        ThreadJ threadJ = new ThreadJ(task);</span><br><span class=\"line\">        threadJ.start();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(10000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long begin = CommonUtils.beginTime1;</span><br><span class=\"line\">        if(CommonUtils.beginTime1 &gt; CommonUtils.beginTime2) &#123;</span><br><span class=\"line\">            begin = CommonUtils.beginTime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long end = CommonUtils.endTime1;</span><br><span class=\"line\">        if (CommonUtils.endTime1 &lt; CommonUtils.endTime2) &#123;</span><br><span class=\"line\">            end = CommonUtils.endTime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;总耗时：&quot; + (end - begin)/1000 + &quot; 秒&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadI extends Thread &#123;</span><br><span class=\"line\">    SynchronizedLongTime synchronizedLongTime;</span><br><span class=\"line\">    public ThreadI(SynchronizedLongTime synchronizedLongTime) &#123;</span><br><span class=\"line\">        this.synchronizedLongTime = synchronizedLongTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        CommonUtils.beginTime1 = System.currentTimeMillis();</span><br><span class=\"line\">        synchronizedLongTime.doLongTimeTask(&quot;AAA&quot;, &quot;aaa&quot;);</span><br><span class=\"line\">        CommonUtils.endTime1 = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadJ extends Thread &#123;</span><br><span class=\"line\">    SynchronizedLongTime synchronizedLongTime;</span><br><span class=\"line\">    public ThreadJ(SynchronizedLongTime synchronizedLongTime) &#123;</span><br><span class=\"line\">        this.synchronizedLongTime = synchronizedLongTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        CommonUtils.beginTime2 = System.currentTimeMillis();</span><br><span class=\"line\">        synchronizedLongTime.doLongTimeTask(&quot;BBB&quot;, &quot;bbb&quot;);</span><br><span class=\"line\">        CommonUtils.endTime2 = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connected to the target VM, address: &apos;127.0.0.1:63459&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-0</span><br><span class=\"line\">Thread-0 getData1=AAA; getData2=AAA</span><br><span class=\"line\">end task</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-1</span><br><span class=\"line\">Thread-1 getData1=BBB; getData2=BBB</span><br><span class=\"line\">end task</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:63459&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">总耗时：6 秒</span><br></pre></td></tr></table></figure>\n<h2>synchronized同步代码块的使用</h2>\n<p>当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程被执行，另一个线程必须等待第一个线程执行完后方可被执行。</p>\n<p>优化doLongTimeTask同步方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void doLongTimeTask(String data1, String data2) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;begin task&quot;);</span><br><span class=\"line\">            System.out.println(&quot;线程：&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">            Thread.sleep(3000);</span><br><span class=\"line\">            // 线程安全主要在这儿！</span><br><span class=\"line\">            synchronized(this) &#123;</span><br><span class=\"line\">                setData(data1, data2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + &quot; getData1=&quot; + getData1 + &quot;; getData2=&quot; + getData1);</span><br><span class=\"line\">            System.out.println(&quot;end task&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-0</span><br><span class=\"line\">begin task</span><br><span class=\"line\">线程：Thread-1</span><br><span class=\"line\">Thread-0 getData1=AAA; getData2=AAA</span><br><span class=\"line\">end task</span><br><span class=\"line\">Thread-1 getData1=BBB; getData2=BBB</span><br><span class=\"line\">end task</span><br><span class=\"line\">总耗时：3 秒</span><br></pre></td></tr></table></figure>\n<p>总结： 同步代码块比同步方法时间更少，运行效率更块。</p>\n<h2>一半同步，一半异步</h2>\n<p>不在synchronized中的代码异步执行，在synchronized中的是同步执行。</p>\n<h2>synchronized代码块间的同步性</h2>\n<p>在使用同步代码块的时候注意，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的“对象监视器”是一个。</p>\n<h2>验证同步synchronized(this)代码块是锁定当前对象的</h2>\n<p>和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。</p>\n<p>1.A线程调用同步代码块x，B线程调用非同步代码块y，则x和y是异步执行的；<br>\n2.A线程调用同步代码块x，B线程调用同步代码块z，则x和z是同步执行的，即按顺序执行。</p>\n<h2>将任意对象作为对象监视器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynBlockString &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username;</span><br><span class=\"line\">    private String password;</span><br><span class=\"line\">    private String string = new String();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUsernamePassword(String username, String password) &#123;</span><br><span class=\"line\">        synchronized (string) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 进入同步块&quot;);</span><br><span class=\"line\">                this.password = password;</span><br><span class=\"line\">                Thread.sleep(3000);</span><br><span class=\"line\">                this.username = username;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; username: &quot; + username + &quot; password:&quot; + password);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 离开同步块&quot;);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynBlockString synBlockString = new SynBlockString();</span><br><span class=\"line\">        ThreadK threadK = new ThreadK(synBlockString);</span><br><span class=\"line\">        threadK.setName(&quot;线程A&quot;);</span><br><span class=\"line\">        threadK.start();</span><br><span class=\"line\">        ThreadL threadL = new ThreadL(synBlockString);</span><br><span class=\"line\">        threadL.setName(&quot;线程B&quot;);</span><br><span class=\"line\">        threadL.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadK extends Thread&#123;</span><br><span class=\"line\">    SynBlockString synBlockString;</span><br><span class=\"line\">    public ThreadK(SynBlockString synBlockString) &#123;</span><br><span class=\"line\">        this.synBlockString = synBlockString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synBlockString.setUsernamePassword(&quot;A&quot;, &quot;a&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadL extends Thread&#123;</span><br><span class=\"line\">    SynBlockString synBlockString;</span><br><span class=\"line\">    public ThreadL(SynBlockString synBlockString) &#123;</span><br><span class=\"line\">        this.synBlockString = synBlockString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        synBlockString.setUsernamePassword(&quot;B&quot;, &quot;b&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A 在：1555822223367 进入同步块</span><br><span class=\"line\">线程A username: A password:a</span><br><span class=\"line\">线程A 在：1555822226369 离开同步块</span><br><span class=\"line\">线程B 在：1555822226370 进入同步块</span><br><span class=\"line\">线程B username: B password:b</span><br><span class=\"line\">线程B 在：1555822229370 离开同步块</span><br></pre></td></tr></table></figure>\n<p>锁非this对象具有一定的优点：如果一个类中有多个synchronized方法，这时能实现同步，但会受到阻塞，所以影响效率；<br>\n但如果用同步代码块锁非this对象，则是异步的，不与其他锁this同步方法争抢this锁，则可大大提高效率。</p>\n<p>修改代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setUsernamePassword(String username, String password) &#123;</span><br><span class=\"line\">       String string = new String(); // 每次调用都产生一个新的String对象</span><br><span class=\"line\">       synchronized (string) &#123;</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 进入同步块&quot;);</span><br><span class=\"line\">               this.password = password;</span><br><span class=\"line\">               Thread.sleep(3000);</span><br><span class=\"line\">               this.username = username;</span><br><span class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; 在：&quot; + System.currentTimeMillis() + &quot; 离开同步块&quot;);</span><br><span class=\"line\">           &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">               e.printStackTrace();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A 在：1555822247681 进入同步块</span><br><span class=\"line\">线程B 在：1555822247683 进入同步块</span><br><span class=\"line\">线程A username: A password:a</span><br><span class=\"line\">线程A 在：1555822250682 离开同步块</span><br><span class=\"line\">线程B username: B password:b</span><br><span class=\"line\">线程B 在：1555822250685 离开同步块</span><br></pre></td></tr></table></figure>\n<p>分析：使用synchronized(非this对象x)同步代码块进行同步操作时，对象监视器必须是同一个对象。如果不是同一个对象监视器，运行的结果就是异步调用的，就会交叉执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SynList &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void addA(Integer value) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 开始执行addA方法&quot;);</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 退出addA方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized public void addB(Integer value) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 开始执行addB方法&quot;);</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot; 退出addB方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SynList synList = new SynList();</span><br><span class=\"line\">        ThreadM threadM = new ThreadM(synList);</span><br><span class=\"line\">        threadM.setName(&quot;M&quot;);</span><br><span class=\"line\">        threadM.start();</span><br><span class=\"line\">        ThreadN threadN = new ThreadN(synList);</span><br><span class=\"line\">        threadN.setName(&quot;N&quot;);</span><br><span class=\"line\">        threadN.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadM extends Thread &#123;</span><br><span class=\"line\">    SynList synList = new SynList();</span><br><span class=\"line\">    public ThreadM(SynList synList) &#123;</span><br><span class=\"line\">        this.synList = synList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">            synList.addA(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadN extends Thread &#123;</span><br><span class=\"line\">    SynList synList = new SynList();</span><br><span class=\"line\">    public ThreadN(SynList synList) &#123;</span><br><span class=\"line\">        this.synList = synList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">            synList.addB(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">省略...</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">M 开始执行addA方法</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">省略...</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">N 开始执行addA方法</span><br><span class=\"line\">N 退出addA方法</span><br><span class=\"line\">M 开始执行addA方法</span><br><span class=\"line\">M 退出addA方法</span><br><span class=\"line\">省略...</span><br></pre></td></tr></table></figure>\n<p>分析：线程M和N异步执行了，可能会出现脏读的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SynNotThisDirtyRead &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        OneList oneList = new OneList();</span><br><span class=\"line\">        ThreadO threadO = new ThreadO(oneList);</span><br><span class=\"line\">        threadO.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadP threadp = new ThreadP(oneList);</span><br><span class=\"line\">        threadp.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(5000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;oneList.getSize = &quot; + oneList.getSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OneList &#123;</span><br><span class=\"line\">    private List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    public void add(Integer value) &#123;</span><br><span class=\"line\">        list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getSize() &#123;</span><br><span class=\"line\">        return list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OneListService &#123;</span><br><span class=\"line\">    synchronized public OneList addServiceMethod(OneList oneList, Integer value) &#123;</span><br><span class=\"line\">        if (oneList.getSize() &lt; 1) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 模拟从远程获取数据的时间</span><br><span class=\"line\">                Thread.sleep(2000);</span><br><span class=\"line\">                oneList.add(value);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadO extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private OneList oneList;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadO(OneList oneList) &#123;</span><br><span class=\"line\">        this.oneList = oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        OneListService service = new OneListService();</span><br><span class=\"line\">        service.addServiceMethod(oneList, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ThreadP extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private OneList oneList;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ThreadP(OneList oneList) &#123;</span><br><span class=\"line\">        this.oneList = oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        super.run();</span><br><span class=\"line\">        OneListService service = new OneListService();</span><br><span class=\"line\">        service.addServiceMethod(oneList, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneList.getSize = 2</span><br></pre></td></tr></table></figure>\n<p>分析：“脏读”出现了，出现的原因是两个线程以异步的方式返回list参数的size大小。<br>\n解决办法是“同步化”。</p>\n<p>修改OneListService.addServiceMethod方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OneListService &#123;</span><br><span class=\"line\">    public OneList addServiceMethod(OneList oneList, Integer value) &#123;</span><br><span class=\"line\">        synchronized (oneList) &#123;</span><br><span class=\"line\">            if (oneList.getSize() &lt; 1) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    // 模拟从远程获取数据的时间</span><br><span class=\"line\">                    Thread.sleep(2000);</span><br><span class=\"line\">                    oneList.add(value);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return oneList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneList.getSize = 1</span><br></pre></td></tr></table></figure>\n<p>分析：由于list参数对象在项目中是一份实例，是单例的，而且也正是对list参数的getSize方法做同步的调用，所以就对list参数进行同步处理。</p>\n<h2>细化验证3个结论</h2>\n<p>1.当多个线程同时执行synchronized(x){}同步代码块时呈同步效果<br>\n2.当其他线程执行x对象中的synchronized同步方法时呈同步效果<br>\n3.当其他线程执行x对象方法里面的synchronized(this)代码块时也呈同步效果</p>\n"},{"title":"吐血推荐 _ 那些提升开发人员工作效率的在线工具","date":"2018-11-11T03:34:14.000Z","_content":"\n转自：https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ\n\n作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。\n\n<!-- more -->\n\nHollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。\n\n# Java源代码搜索\n\n```\nhttp://grepcode.com/\n```\nGrepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311103935370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 开源代码及文档搜索\n\n```\nhttps://searchcode.com/\n```\nSearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104010761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 电子书搜索\n\n```\nhttps://www.jiumodiary.com/\n```\n鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104045643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 网盘资源搜索\n\n```\nhttp://pansou.com/\n```\n这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019031110411749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 无版权图片搜索\n\n```\nhttps://unsplash.com\n```\n不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。\n\nunsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104149732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线UML制图\n\n```\nhttps://www.processon.com/\n```\nProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、\nBPMN、UML图、UI界面原型设计、iOS界面原型设计等。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104228574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Json在线验证及格式化\n\n```\nhttps://www.json.cn/\n```\n我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019031110430455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Diff Check\n\n```\nhttps://www.diffchecker.com/\n```\n使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104338557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# MarkDown编辑器\n\n```\nMaHua ：http://mahua.jser.me/\n\n马克飞象 ：https://maxiang.io/\n\nCmd ：https://www.zybuluo.com/mdeditor\n```\n以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104415971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Maven依赖查询\n\n```\nhttp://mvnrepository.com/\n```\nmvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104442532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线代码运行\n\n```\nhttps://tool.lu/coderunner/\n```\ncoderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104513843.png)\n\n# 在线翻译\n\n```\nGoogle翻译 ：https://translate.google.cn/\n\n百度翻译 ：http://fanyi.baidu.com/\n\n有道翻译 ：http://fanyi.youdao.com/\n```\n说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。\n\n不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104552780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# SQL自动生成Java代码\n\n```\nhttp://www.autojcode.com/code/sql2class.jsp\n```\nAutoJCode可以从sql的建表语句中生成一个DO类。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104621862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# json生成java类\n\n```\nhttp://www.bejson.com/json2javapojo\n```\njson是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104649747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# SQL美化/格式化/压缩\n\n```\nhttps://tool.lu/sql/\n```\nsql在线美化，格式化，压缩：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104721341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 编码转换\n\n```\nhttp://tool.chinaz.com/tools/unicode.aspx\n```\n站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104751609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Corn表达式生成\n\n```\nhttp://www.pdtools.net/tools/becron.jsp\n```\nCron 一般用于配置定时任务的执行。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104824473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 正则验证\n\n```\nhttp://tool.chinaz.com/regex\n```\nJava开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104902757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 正则代码生成\n\n```\nhttp://tool.chinaz.com/tools/regexgenerate\n```\n站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104941195.png)\n\n# 时间戳转换\n\n```\nhttp://tool.chinaz.com/Tools/unixtime.aspx\n```\n时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\n\n\n\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105009835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 世界时间转换\n\n```\nhttp://www.timebie.com/cn/easternbeijing.php\n```\n世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105046966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 加密解密\n\n```\nhttp://tool.chinaz.com/tools/textencrypt.aspx\n```\n加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105116593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n# 查看网页源代码\n\n```\nhttp://s.tool.chinaz.com/tools/pagecode.aspx\n```\n这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105200126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 单位换算\n\n```\nhttps://www.convertworld.com/zh-hans/\n```\nconvertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105227429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线调色板\n\n```\nhttp://tool.chinaz.com/Tools/OnlineColor.aspx\n```\n这个对前端开发比较有用，可以在线调色。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105309971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# ASCII ART生成\n\n```\nhttp://patorjk.com/software/taag/\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105406891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 常用对照表\n\nASCII对照表 ： http://tool.oschina.net/commons?type=4\n\nHTTP状态码 ： http://tool.oschina.net/commons?type=5\n\nHTTP Content-type ： http://tool.oschina.net/commons\n\nTCP/UDP常见端口参考 ： http://tool.oschina.net/commons?type=7\n\nHTML转义字符 ： http://tool.oschina.net/commons?type=2\n\nRGB颜色参考 ： http://tool.oschina.net/commons?type=3\n\n网页字体参考 ： http://tool.oschina.net/commons?type=8\n","source":"_posts/吐血推荐 _ 那些提升开发人员工作效率的在线工具.md","raw":"---\ntitle: 吐血推荐 _ 那些提升开发人员工作效率的在线工具\ncategories: Tool\ntags: tool\ndate: 2018-11-11 11:34:14\n---\n\n转自：https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ\n\n作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。\n\n<!-- more -->\n\nHollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。\n\n# Java源代码搜索\n\n```\nhttp://grepcode.com/\n```\nGrepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311103935370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 开源代码及文档搜索\n\n```\nhttps://searchcode.com/\n```\nSearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104010761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 电子书搜索\n\n```\nhttps://www.jiumodiary.com/\n```\n鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104045643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 网盘资源搜索\n\n```\nhttp://pansou.com/\n```\n这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019031110411749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 无版权图片搜索\n\n```\nhttps://unsplash.com\n```\n不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。\n\nunsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104149732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线UML制图\n\n```\nhttps://www.processon.com/\n```\nProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、\nBPMN、UML图、UI界面原型设计、iOS界面原型设计等。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104228574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Json在线验证及格式化\n\n```\nhttps://www.json.cn/\n```\n我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019031110430455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Diff Check\n\n```\nhttps://www.diffchecker.com/\n```\n使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104338557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# MarkDown编辑器\n\n```\nMaHua ：http://mahua.jser.me/\n\n马克飞象 ：https://maxiang.io/\n\nCmd ：https://www.zybuluo.com/mdeditor\n```\n以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104415971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Maven依赖查询\n\n```\nhttp://mvnrepository.com/\n```\nmvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104442532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线代码运行\n\n```\nhttps://tool.lu/coderunner/\n```\ncoderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104513843.png)\n\n# 在线翻译\n\n```\nGoogle翻译 ：https://translate.google.cn/\n\n百度翻译 ：http://fanyi.baidu.com/\n\n有道翻译 ：http://fanyi.youdao.com/\n```\n说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。\n\n不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104552780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# SQL自动生成Java代码\n\n```\nhttp://www.autojcode.com/code/sql2class.jsp\n```\nAutoJCode可以从sql的建表语句中生成一个DO类。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104621862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# json生成java类\n\n```\nhttp://www.bejson.com/json2javapojo\n```\njson是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104649747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# SQL美化/格式化/压缩\n\n```\nhttps://tool.lu/sql/\n```\nsql在线美化，格式化，压缩：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104721341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 编码转换\n\n```\nhttp://tool.chinaz.com/tools/unicode.aspx\n```\n站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104751609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# Corn表达式生成\n\n```\nhttp://www.pdtools.net/tools/becron.jsp\n```\nCron 一般用于配置定时任务的执行。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104824473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 正则验证\n\n```\nhttp://tool.chinaz.com/regex\n```\nJava开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104902757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 正则代码生成\n\n```\nhttp://tool.chinaz.com/tools/regexgenerate\n```\n站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311104941195.png)\n\n# 时间戳转换\n\n```\nhttp://tool.chinaz.com/Tools/unixtime.aspx\n```\n时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\n\n\n\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105009835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 世界时间转换\n\n```\nhttp://www.timebie.com/cn/easternbeijing.php\n```\n世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105046966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 加密解密\n\n```\nhttp://tool.chinaz.com/tools/textencrypt.aspx\n```\n加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105116593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n# 查看网页源代码\n\n```\nhttp://s.tool.chinaz.com/tools/pagecode.aspx\n```\n这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105200126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 单位换算\n\n```\nhttps://www.convertworld.com/zh-hans/\n```\nconvertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105227429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 在线调色板\n\n```\nhttp://tool.chinaz.com/Tools/OnlineColor.aspx\n```\n这个对前端开发比较有用，可以在线调色。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105309971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# ASCII ART生成\n\n```\nhttp://patorjk.com/software/taag/\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190311105406891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n# 常用对照表\n\nASCII对照表 ： http://tool.oschina.net/commons?type=4\n\nHTTP状态码 ： http://tool.oschina.net/commons?type=5\n\nHTTP Content-type ： http://tool.oschina.net/commons\n\nTCP/UDP常见端口参考 ： http://tool.oschina.net/commons?type=7\n\nHTML转义字符 ： http://tool.oschina.net/commons?type=2\n\nRGB颜色参考 ： http://tool.oschina.net/commons?type=3\n\n网页字体参考 ： http://tool.oschina.net/commons?type=8\n","slug":"吐血推荐 _ 那些提升开发人员工作效率的在线工具","published":1,"updated":"2019-04-20T12:27:28.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xuk004qvq6bncijd7g8","content":"<p>转自：<a href=\"https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ</a></p>\n<p>作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。</p>\n<a id=\"more\"></a>\n<p>Hollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。</p>\n<h1 id=\"java源代码搜索\">Java源代码搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://grepcode.com/</span><br></pre></td></tr></table></figure>\n<p>Grepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311103935370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"开源代码及文档搜索\">开源代码及文档搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://searchcode.com/</span><br></pre></td></tr></table></figure>\n<p>SearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104010761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"电子书搜索\">电子书搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jiumodiary.com/</span><br></pre></td></tr></table></figure>\n<p>鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104045643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"网盘资源搜索\">网盘资源搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://pansou.com/</span><br></pre></td></tr></table></figure>\n<p>这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。<br>\n<img src=\"https://img-blog.csdnimg.cn/2019031110411749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"无版权图片搜索\">无版权图片搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://unsplash.com</span><br></pre></td></tr></table></figure>\n<p>不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。</p>\n<p>unsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104149732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"在线uml制图\">在线UML制图</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.processon.com/</span><br></pre></td></tr></table></figure>\n<p>ProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、<br>\nBPMN、UML图、UI界面原型设计、iOS界面原型设计等。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104228574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"json在线验证及格式化\">Json在线验证及格式化</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.json.cn/</span><br></pre></td></tr></table></figure>\n<p>我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/2019031110430455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"diff-check\">Diff Check</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.diffchecker.com/</span><br></pre></td></tr></table></figure>\n<p>使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104338557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"markdown编辑器\">MarkDown编辑器</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaHua ：http://mahua.jser.me/</span><br><span class=\"line\"></span><br><span class=\"line\">马克飞象 ：https://maxiang.io/</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd ：https://www.zybuluo.com/mdeditor</span><br></pre></td></tr></table></figure>\n<p>以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104415971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"maven依赖查询\">Maven依赖查询</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mvnrepository.com/</span><br></pre></td></tr></table></figure>\n<p>mvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104442532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"在线代码运行\">在线代码运行</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/coderunner/</span><br></pre></td></tr></table></figure>\n<p>coderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104513843.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"在线翻译\">在线翻译</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google翻译 ：https://translate.google.cn/</span><br><span class=\"line\"></span><br><span class=\"line\">百度翻译 ：http://fanyi.baidu.com/</span><br><span class=\"line\"></span><br><span class=\"line\">有道翻译 ：http://fanyi.youdao.com/</span><br></pre></td></tr></table></figure>\n<p>说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。</p>\n<p>不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104552780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"sql自动生成java代码\">SQL自动生成Java代码</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.autojcode.com/code/sql2class.jsp</span><br></pre></td></tr></table></figure>\n<p>AutoJCode可以从sql的建表语句中生成一个DO类。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104621862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"json生成java类\">json生成java类</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.bejson.com/json2javapojo</span><br></pre></td></tr></table></figure>\n<p>json是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104649747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"sql美化格式化压缩\">SQL美化/格式化/压缩</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/sql/</span><br></pre></td></tr></table></figure>\n<p>sql在线美化，格式化，压缩：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104721341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"编码转换\">编码转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/unicode.aspx</span><br></pre></td></tr></table></figure>\n<p>站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104751609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"corn表达式生成\">Corn表达式生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pdtools.net/tools/becron.jsp</span><br></pre></td></tr></table></figure>\n<p>Cron 一般用于配置定时任务的执行。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104824473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"正则验证\">正则验证</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/regex</span><br></pre></td></tr></table></figure>\n<p>Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104902757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"正则代码生成\">正则代码生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/regexgenerate</span><br></pre></td></tr></table></figure>\n<p>站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104941195.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"时间戳转换\">时间戳转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/Tools/unixtime.aspx</span><br></pre></td></tr></table></figure>\n<p>时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。</p>\n<p>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105009835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"世界时间转换\">世界时间转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.timebie.com/cn/easternbeijing.php</span><br></pre></td></tr></table></figure>\n<p>世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105046966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"加密解密\">加密解密</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/textencrypt.aspx</span><br></pre></td></tr></table></figure>\n<p>加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105116593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"查看网页源代码\">查看网页源代码</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://s.tool.chinaz.com/tools/pagecode.aspx</span><br></pre></td></tr></table></figure>\n<p>这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105200126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"单位换算\">单位换算</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.convertworld.com/zh-hans/</span><br></pre></td></tr></table></figure>\n<p>convertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105227429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"在线调色板\">在线调色板</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/Tools/OnlineColor.aspx</span><br></pre></td></tr></table></figure>\n<p>这个对前端开发比较有用，可以在线调色。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105309971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"ascii-art生成\">ASCII ART生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://patorjk.com/software/taag/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311105406891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"常用对照表\">常用对照表</h1>\n<p>ASCII对照表 ： <a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=4</a></p>\n<p>HTTP状态码 ： <a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=5</a></p>\n<p>HTTP Content-type ： <a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>TCP/UDP常见端口参考 ： <a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=7</a></p>\n<p>HTML转义字符 ： <a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>RGB颜色参考 ： <a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=3</a></p>\n<p>网页字体参考 ： <a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=8</a></p>\n","site":{"data":{}},"excerpt":"<p>转自：<a href=\"https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/AJKA1LYR6TgqGMbsclC6wQ</a></p>\n<p>作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。</p>","more":"<p>Hollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。</p>\n<h1>Java源代码搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://grepcode.com/</span><br></pre></td></tr></table></figure>\n<p>Grepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311103935370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>开源代码及文档搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://searchcode.com/</span><br></pre></td></tr></table></figure>\n<p>SearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104010761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>电子书搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jiumodiary.com/</span><br></pre></td></tr></table></figure>\n<p>鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104045643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>网盘资源搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://pansou.com/</span><br></pre></td></tr></table></figure>\n<p>这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。<br>\n<img src=\"https://img-blog.csdnimg.cn/2019031110411749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>无版权图片搜索</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://unsplash.com</span><br></pre></td></tr></table></figure>\n<p>不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。</p>\n<p>unsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104149732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>在线UML制图</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.processon.com/</span><br></pre></td></tr></table></figure>\n<p>ProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、<br>\nBPMN、UML图、UI界面原型设计、iOS界面原型设计等。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104228574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>Json在线验证及格式化</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.json.cn/</span><br></pre></td></tr></table></figure>\n<p>我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/2019031110430455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>Diff Check</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.diffchecker.com/</span><br></pre></td></tr></table></figure>\n<p>使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104338557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>MarkDown编辑器</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaHua ：http://mahua.jser.me/</span><br><span class=\"line\"></span><br><span class=\"line\">马克飞象 ：https://maxiang.io/</span><br><span class=\"line\"></span><br><span class=\"line\">Cmd ：https://www.zybuluo.com/mdeditor</span><br></pre></td></tr></table></figure>\n<p>以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104415971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>Maven依赖查询</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mvnrepository.com/</span><br></pre></td></tr></table></figure>\n<p>mvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104442532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>在线代码运行</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/coderunner/</span><br></pre></td></tr></table></figure>\n<p>coderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104513843.png\" alt=\"在这里插入图片描述\"></p>\n<h1>在线翻译</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google翻译 ：https://translate.google.cn/</span><br><span class=\"line\"></span><br><span class=\"line\">百度翻译 ：http://fanyi.baidu.com/</span><br><span class=\"line\"></span><br><span class=\"line\">有道翻译 ：http://fanyi.youdao.com/</span><br></pre></td></tr></table></figure>\n<p>说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。</p>\n<p>不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104552780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>SQL自动生成Java代码</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.autojcode.com/code/sql2class.jsp</span><br></pre></td></tr></table></figure>\n<p>AutoJCode可以从sql的建表语句中生成一个DO类。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104621862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>json生成java类</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.bejson.com/json2javapojo</span><br></pre></td></tr></table></figure>\n<p>json是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104649747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>SQL美化/格式化/压缩</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/sql/</span><br></pre></td></tr></table></figure>\n<p>sql在线美化，格式化，压缩：<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104721341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>编码转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/unicode.aspx</span><br></pre></td></tr></table></figure>\n<p>站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104751609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>Corn表达式生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pdtools.net/tools/becron.jsp</span><br></pre></td></tr></table></figure>\n<p>Cron 一般用于配置定时任务的执行。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311104824473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>正则验证</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/regex</span><br></pre></td></tr></table></figure>\n<p>Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104902757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>正则代码生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/regexgenerate</span><br></pre></td></tr></table></figure>\n<p>站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311104941195.png\" alt=\"在这里插入图片描述\"></p>\n<h1>时间戳转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/Tools/unixtime.aspx</span><br></pre></td></tr></table></figure>\n<p>时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。</p>\n<p>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105009835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>世界时间转换</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.timebie.com/cn/easternbeijing.php</span><br></pre></td></tr></table></figure>\n<p>世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105046966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>加密解密</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/tools/textencrypt.aspx</span><br></pre></td></tr></table></figure>\n<p>加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105116593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>查看网页源代码</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://s.tool.chinaz.com/tools/pagecode.aspx</span><br></pre></td></tr></table></figure>\n<p>这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105200126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>单位换算</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.convertworld.com/zh-hans/</span><br></pre></td></tr></table></figure>\n<p>convertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105227429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>在线调色板</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tool.chinaz.com/Tools/OnlineColor.aspx</span><br></pre></td></tr></table></figure>\n<p>这个对前端开发比较有用，可以在线调色。<br>\n<img src=\"https://img-blog.csdnimg.cn/20190311105309971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>ASCII ART生成</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://patorjk.com/software/taag/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20190311105406891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1>常用对照表</h1>\n<p>ASCII对照表 ： <a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=4</a></p>\n<p>HTTP状态码 ： <a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=5</a></p>\n<p>HTTP Content-type ： <a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>TCP/UDP常见端口参考 ： <a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=7</a></p>\n<p>HTML转义字符 ： <a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>RGB颜色参考 ： <a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=3</a></p>\n<p>网页字体参考 ： <a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=8</a></p>"},{"title":"数字格式化工具类     持续更新","date":"2017-12-06T12:34:14.000Z","_content":"\n```\n/**\n * 数字格式化工具类\n */\npublic class NumberUtils {\n    /**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。\n\t * <pre>\n\t * \t\"3.1415926\", 1\t\t\t--> 3.1\n\t * \t\"3.1415926\", 3\t\t\t--> 3.142\n\t * \t\"3.1415926\", 4\t\t\t--> 3.1416\n\t * \t\"3.1415926\", 6\t\t\t--> 3.141593\n\t * \t\"1234567891234567.1415926\", 3\t--> 1234567891234567.142\n\t * </pre>\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(String number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();\n\t}\n <!-- more -->\n\t/**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --> 123.0<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(Number number, int precision) {\n\t\treturn keepPrecision(String.valueOf(number), precision);\n\t}\n \n\t/**\n\t * 对double类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return double 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static double keepPrecision(double number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n \n\t/**\n\t * 对float类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static float keepPrecision(float number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();\n\t}\n\t\n\t/**\n\t * 获取 ±number 的随机数。<br>\n\t * @param number  要保留小数的数字\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tprivate static float getRandomNum(int number) {\n\t\tRandom random = new Random();\n\t\t//return num /2 + random.nextFloat() * num * -1;\n\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);\n\t\tString rd = randomNum + \".\" + random.nextInt(10);\n\t\treturn Float.parseFloat(rd);\n\t}\n\t\n\t/**\n\t * 去掉小数点后多余的0。<br>\n\t * 例如: 1.0 则返回 1。<br>\n\t * @param number  要处理的数字\n\t * @return double \n\t */\n\tpublic static double rvZeroAndDot(double number){\n\t\tString s = String.valueOf(number);\n\t\tif (s.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(s.indexOf(\".\") > 0){\n\t\t\ts = s.replaceAll(\"0+?$\", \"\");//去掉多余的0\n\t\t\ts = s.replaceAll(\"[.]$\", \"\");//如最后一位是.则去掉\n\t\t}\n\t\treturn Double.parseDouble(s);\n\t}\n\t/**\n\t * 数字格式化工具类\n\t */\n\tpublic class NumberUtils {\n    /**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。\n\t * <pre>\n\t * \t\"3.1415926\", 1\t\t\t--> 3.1\n\t * \t\"3.1415926\", 3\t\t\t--> 3.142\n\t * \t\"3.1415926\", 4\t\t\t--> 3.1416\n\t * \t\"3.1415926\", 6\t\t\t--> 3.141593\n\t * \t\"1234567891234567.1415926\", 3\t--> 1234567891234567.142\n\t * </pre>\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(String number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();\n\t}\n \n\t/**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --> 123.0<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(Number number, int precision) {\n\t\treturn keepPrecision(String.valueOf(number), precision);\n\t}\n \n\t/**\n\t * 对double类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return double 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static double keepPrecision(double number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n \n\t/**\n\t * 对float类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static float keepPrecision(float number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();\n\t}\n\t\n\t/**\n\t * 获取 ±number 的随机数。<br>\n\t * @param number  要保留小数的数字\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tprivate static float getRandomNum(int number) {\n\t\tRandom random = new Random();\n\t\t//return num /2 + random.nextFloat() * num * -1;\n\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);\n\t\tString rd = randomNum + \".\" + random.nextInt(10);\n\t\treturn Float.parseFloat(rd);\n\t}\n\t\n\t/**\n\t * 去掉小数点后多余的0。<br>\n\t * 例如: 1.0 则返回 1。<br>\n\t * @param number  要处理的数字\n\t * @return double \n\t */\n\tpublic static double rvZeroAndDot(double number){\n\t\tString s = String.valueOf(number);\n\t\tif (s.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(s.indexOf(\".\") > 0){\n\t\t\ts = s.replaceAll(\"0+?$\", \"\");//去掉多余的0\n\t\t\ts = s.replaceAll(\"[.]$\", \"\");//如最后一位是.则去掉\n\t\t}\n\t\treturn Double.parseDouble(s);\n\t}\n\n\tpublic static float generateRandomValue(float min, float max) {\n        int mins= (int) (min*1000);\n        int maxs= (int) (max*1000);\n        Random random = new Random();\n        float s = (random.nextInt(maxs)%(maxs-mins+1) + mins) / 1000f;\n        return s;\n    }\n \n}\n\n```\n\n","source":"_posts/数字格式化工具类     持续更新.md","raw":"---\ntitle: 数字格式化工具类     持续更新\ncategories: Java\ntags: java\ndate: 2017-12-06 20:34:14\n---\n\n```\n/**\n * 数字格式化工具类\n */\npublic class NumberUtils {\n    /**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。\n\t * <pre>\n\t * \t\"3.1415926\", 1\t\t\t--> 3.1\n\t * \t\"3.1415926\", 3\t\t\t--> 3.142\n\t * \t\"3.1415926\", 4\t\t\t--> 3.1416\n\t * \t\"3.1415926\", 6\t\t\t--> 3.141593\n\t * \t\"1234567891234567.1415926\", 3\t--> 1234567891234567.142\n\t * </pre>\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(String number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();\n\t}\n <!-- more -->\n\t/**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --> 123.0<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(Number number, int precision) {\n\t\treturn keepPrecision(String.valueOf(number), precision);\n\t}\n \n\t/**\n\t * 对double类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return double 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static double keepPrecision(double number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n \n\t/**\n\t * 对float类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static float keepPrecision(float number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();\n\t}\n\t\n\t/**\n\t * 获取 ±number 的随机数。<br>\n\t * @param number  要保留小数的数字\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tprivate static float getRandomNum(int number) {\n\t\tRandom random = new Random();\n\t\t//return num /2 + random.nextFloat() * num * -1;\n\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);\n\t\tString rd = randomNum + \".\" + random.nextInt(10);\n\t\treturn Float.parseFloat(rd);\n\t}\n\t\n\t/**\n\t * 去掉小数点后多余的0。<br>\n\t * 例如: 1.0 则返回 1。<br>\n\t * @param number  要处理的数字\n\t * @return double \n\t */\n\tpublic static double rvZeroAndDot(double number){\n\t\tString s = String.valueOf(number);\n\t\tif (s.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(s.indexOf(\".\") > 0){\n\t\t\ts = s.replaceAll(\"0+?$\", \"\");//去掉多余的0\n\t\t\ts = s.replaceAll(\"[.]$\", \"\");//如最后一位是.则去掉\n\t\t}\n\t\treturn Double.parseDouble(s);\n\t}\n\t/**\n\t * 数字格式化工具类\n\t */\n\tpublic class NumberUtils {\n    /**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。\n\t * <pre>\n\t * \t\"3.1415926\", 1\t\t\t--> 3.1\n\t * \t\"3.1415926\", 3\t\t\t--> 3.142\n\t * \t\"3.1415926\", 4\t\t\t--> 3.1416\n\t * \t\"3.1415926\", 6\t\t\t--> 3.141593\n\t * \t\"1234567891234567.1415926\", 3\t--> 1234567891234567.142\n\t * </pre>\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(String number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();\n\t}\n \n\t/**\n\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --> 123.0<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param //String类型的数字对象\n\t * @param precision  小数精确度总位数,如2表示两位小数\n\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)\n\t */\n\tpublic static String keepPrecision(Number number, int precision) {\n\t\treturn keepPrecision(String.valueOf(number), precision);\n\t}\n \n\t/**\n\t * 对double类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return double 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static double keepPrecision(double number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n \n\t/**\n\t * 对float类型的数值保留指定位数的小数。<br>\n\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。<br>\n\t * <b>注意：</b>如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法\n\t * @param number  要保留小数的数字\n\t * @param precision 小数位数\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tpublic static float keepPrecision(float number, int precision) {\n\t\tBigDecimal bg = new BigDecimal(number);\n\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();\n\t}\n\t\n\t/**\n\t * 获取 ±number 的随机数。<br>\n\t * @param number  要保留小数的数字\n\t * @return float 如果数值较大，则使用科学计数法表示\n\t */\n\tprivate static float getRandomNum(int number) {\n\t\tRandom random = new Random();\n\t\t//return num /2 + random.nextFloat() * num * -1;\n\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);\n\t\tString rd = randomNum + \".\" + random.nextInt(10);\n\t\treturn Float.parseFloat(rd);\n\t}\n\t\n\t/**\n\t * 去掉小数点后多余的0。<br>\n\t * 例如: 1.0 则返回 1。<br>\n\t * @param number  要处理的数字\n\t * @return double \n\t */\n\tpublic static double rvZeroAndDot(double number){\n\t\tString s = String.valueOf(number);\n\t\tif (s.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(s.indexOf(\".\") > 0){\n\t\t\ts = s.replaceAll(\"0+?$\", \"\");//去掉多余的0\n\t\t\ts = s.replaceAll(\"[.]$\", \"\");//如最后一位是.则去掉\n\t\t}\n\t\treturn Double.parseDouble(s);\n\t}\n\n\tpublic static float generateRandomValue(float min, float max) {\n        int mins= (int) (min*1000);\n        int maxs= (int) (max*1000);\n        Random random = new Random();\n        float s = (random.nextInt(maxs)%(maxs-mins+1) + mins) / 1000f;\n        return s;\n    }\n \n}\n\n```\n\n","slug":"数字格式化工具类     持续更新","published":1,"updated":"2019-04-20T12:27:13.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xul004tvq6bi9m1533t","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 数字格式化工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NumberUtils &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class=\"line\">\t * &lt;pre&gt;</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 1\t\t\t--&gt; 3.1</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 3\t\t\t--&gt; 3.142</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 4\t\t\t--&gt; 3.1416</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 6\t\t\t--&gt; 3.141593</span><br><span class=\"line\">\t * \t&quot;1234567891234567.1415926&quot;, 3\t--&gt; 1234567891234567.142</span><br><span class=\"line\">\t * &lt;/pre&gt;</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(String number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &lt;!-- more --&gt;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --&gt; 123.0&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(Number number, int precision) &#123;</span><br><span class=\"line\">\t\treturn keepPrecision(String.valueOf(number), precision);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对double类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return double 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double keepPrecision(double number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对float类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static float keepPrecision(float number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 ±number 的随机数。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static float getRandomNum(int number) &#123;</span><br><span class=\"line\">\t\tRandom random = new Random();</span><br><span class=\"line\">\t\t//return num /2 + random.nextFloat() * num * -1;</span><br><span class=\"line\">\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);</span><br><span class=\"line\">\t\tString rd = randomNum + &quot;.&quot; + random.nextInt(10);</span><br><span class=\"line\">\t\treturn Float.parseFloat(rd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 去掉小数点后多余的0。&lt;br&gt;</span><br><span class=\"line\">\t * 例如: 1.0 则返回 1。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要处理的数字</span><br><span class=\"line\">\t * @return double </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double rvZeroAndDot(double number)&#123;</span><br><span class=\"line\">\t\tString s = String.valueOf(number);</span><br><span class=\"line\">\t\tif (s.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(s.indexOf(&quot;.&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;0+?$&quot;, &quot;&quot;);//去掉多余的0</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;[.]$&quot;, &quot;&quot;);//如最后一位是.则去掉</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn Double.parseDouble(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 数字格式化工具类</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic class NumberUtils &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class=\"line\">\t * &lt;pre&gt;</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 1\t\t\t--&gt; 3.1</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 3\t\t\t--&gt; 3.142</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 4\t\t\t--&gt; 3.1416</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 6\t\t\t--&gt; 3.141593</span><br><span class=\"line\">\t * \t&quot;1234567891234567.1415926&quot;, 3\t--&gt; 1234567891234567.142</span><br><span class=\"line\">\t * &lt;/pre&gt;</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(String number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --&gt; 123.0&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(Number number, int precision) &#123;</span><br><span class=\"line\">\t\treturn keepPrecision(String.valueOf(number), precision);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对double类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return double 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double keepPrecision(double number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对float类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static float keepPrecision(float number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 ±number 的随机数。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static float getRandomNum(int number) &#123;</span><br><span class=\"line\">\t\tRandom random = new Random();</span><br><span class=\"line\">\t\t//return num /2 + random.nextFloat() * num * -1;</span><br><span class=\"line\">\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);</span><br><span class=\"line\">\t\tString rd = randomNum + &quot;.&quot; + random.nextInt(10);</span><br><span class=\"line\">\t\treturn Float.parseFloat(rd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 去掉小数点后多余的0。&lt;br&gt;</span><br><span class=\"line\">\t * 例如: 1.0 则返回 1。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要处理的数字</span><br><span class=\"line\">\t * @return double </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double rvZeroAndDot(double number)&#123;</span><br><span class=\"line\">\t\tString s = String.valueOf(number);</span><br><span class=\"line\">\t\tif (s.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(s.indexOf(&quot;.&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;0+?$&quot;, &quot;&quot;);//去掉多余的0</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;[.]$&quot;, &quot;&quot;);//如最后一位是.则去掉</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn Double.parseDouble(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static float generateRandomValue(float min, float max) &#123;</span><br><span class=\"line\">        int mins= (int) (min*1000);</span><br><span class=\"line\">        int maxs= (int) (max*1000);</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        float s = (random.nextInt(maxs)%(maxs-mins+1) + mins) / 1000f;</span><br><span class=\"line\">        return s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 数字格式化工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NumberUtils &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class=\"line\">\t * &lt;pre&gt;</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 1\t\t\t--&gt; 3.1</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 3\t\t\t--&gt; 3.142</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 4\t\t\t--&gt; 3.1416</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 6\t\t\t--&gt; 3.141593</span><br><span class=\"line\">\t * \t&quot;1234567891234567.1415926&quot;, 3\t--&gt; 1234567891234567.142</span><br><span class=\"line\">\t * &lt;/pre&gt;</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(String number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &lt;!-- more --&gt;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --&gt; 123.0&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(Number number, int precision) &#123;</span><br><span class=\"line\">\t\treturn keepPrecision(String.valueOf(number), precision);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对double类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return double 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double keepPrecision(double number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对float类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static float keepPrecision(float number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 ±number 的随机数。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static float getRandomNum(int number) &#123;</span><br><span class=\"line\">\t\tRandom random = new Random();</span><br><span class=\"line\">\t\t//return num /2 + random.nextFloat() * num * -1;</span><br><span class=\"line\">\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);</span><br><span class=\"line\">\t\tString rd = randomNum + &quot;.&quot; + random.nextInt(10);</span><br><span class=\"line\">\t\treturn Float.parseFloat(rd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 去掉小数点后多余的0。&lt;br&gt;</span><br><span class=\"line\">\t * 例如: 1.0 则返回 1。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要处理的数字</span><br><span class=\"line\">\t * @return double </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double rvZeroAndDot(double number)&#123;</span><br><span class=\"line\">\t\tString s = String.valueOf(number);</span><br><span class=\"line\">\t\tif (s.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(s.indexOf(&quot;.&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;0+?$&quot;, &quot;&quot;);//去掉多余的0</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;[.]$&quot;, &quot;&quot;);//如最后一位是.则去掉</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn Double.parseDouble(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 数字格式化工具类</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic class NumberUtils &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class=\"line\">\t * &lt;pre&gt;</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 1\t\t\t--&gt; 3.1</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 3\t\t\t--&gt; 3.142</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 4\t\t\t--&gt; 3.1416</span><br><span class=\"line\">\t * \t&quot;3.1415926&quot;, 6\t\t\t--&gt; 3.141593</span><br><span class=\"line\">\t * \t&quot;1234567891234567.1415926&quot;, 3\t--&gt; 1234567891234567.142</span><br><span class=\"line\">\t * &lt;/pre&gt;</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(String number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).toPlainString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 格式化为指定位小数的数字,返回未使用科学计数法表示的具有指定位数的字符串。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * 如果给定的数字没有小数，则转换之后将以0填充；例如：int 123  1 --&gt; 123.0&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param //String类型的数字对象</span><br><span class=\"line\">\t * @param precision  小数精确度总位数,如2表示两位小数</span><br><span class=\"line\">\t * @return 返回数字格式化后的字符串表示形式(注意返回的字符串未使用科学计数法)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static String keepPrecision(Number number, int precision) &#123;</span><br><span class=\"line\">\t\treturn keepPrecision(String.valueOf(number), precision);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对double类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return double 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double keepPrecision(double number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 对float类型的数值保留指定位数的小数。&lt;br&gt;</span><br><span class=\"line\">\t * 该方法舍入模式：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。&lt;br&gt;</span><br><span class=\"line\">\t * &lt;b&gt;注意：&lt;/b&gt;如果精度要求比较精确请使用 keepPrecision(String number, int precision)方法</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @param precision 小数位数</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static float keepPrecision(float number, int precision) &#123;</span><br><span class=\"line\">\t\tBigDecimal bg = new BigDecimal(number);</span><br><span class=\"line\">\t\treturn bg.setScale(precision, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 ±number 的随机数。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要保留小数的数字</span><br><span class=\"line\">\t * @return float 如果数值较大，则使用科学计数法表示</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static float getRandomNum(int number) &#123;</span><br><span class=\"line\">\t\tRandom random = new Random();</span><br><span class=\"line\">\t\t//return num /2 + random.nextFloat() * num * -1;</span><br><span class=\"line\">\t\tint randomNum = (random.nextInt(number)) * (random.nextInt(2) == 0 ? -1 : 1);</span><br><span class=\"line\">\t\tString rd = randomNum + &quot;.&quot; + random.nextInt(10);</span><br><span class=\"line\">\t\treturn Float.parseFloat(rd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 去掉小数点后多余的0。&lt;br&gt;</span><br><span class=\"line\">\t * 例如: 1.0 则返回 1。&lt;br&gt;</span><br><span class=\"line\">\t * @param number  要处理的数字</span><br><span class=\"line\">\t * @return double </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double rvZeroAndDot(double number)&#123;</span><br><span class=\"line\">\t\tString s = String.valueOf(number);</span><br><span class=\"line\">\t\tif (s.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(s.indexOf(&quot;.&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;0+?$&quot;, &quot;&quot;);//去掉多余的0</span><br><span class=\"line\">\t\t\ts = s.replaceAll(&quot;[.]$&quot;, &quot;&quot;);//如最后一位是.则去掉</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn Double.parseDouble(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static float generateRandomValue(float min, float max) &#123;</span><br><span class=\"line\">        int mins= (int) (min*1000);</span><br><span class=\"line\">        int maxs= (int) (max*1000);</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        float s = (random.nextInt(maxs)%(maxs-mins+1) + mins) / 1000f;</span><br><span class=\"line\">        return s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"自定义EditText设置图片文字居中","date":"2017-10-21T12:44:14.000Z","_content":"\n* JAVA\n\n> 自定义类继承EditText or AppCompatEditText\n\n<!-- more -->\n\n```\nimport android.content.Context;\nimport android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.support.v7.widget.AppCompatEditText;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class SearchText extends AppCompatEditText {\n\n    private Drawable searchDrawable;\n    private int offset;\n    private int searchWidth;\n    private String hintString;\n    private int w;\n    private int flag = 0;\n\n    public SearchText(Context context) {\n        super(context);\n        init();\n    }\n\n    public SearchText(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public SearchText(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        setOnFocusChangeListener(new OnFocusChangeListener() {\n            @Override\n            public void onFocusChange(View v, boolean hasFocus) {\n                if (hasFocus) {\n                    // 获得焦点\n                    setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);\n                } else {\n                    // 失去焦点\n                    setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n                }\n            }\n        });\n        setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        super.onLayout(changed, left, top, right, bottom);\n        //圈1\n        searchWidth = getMeasuredWidth();\n        hintString = getHint().toString();\n        //圈2\n        Paint paint = new Paint();\n        Rect rect = new Rect();\n        paint.getTextBounds(hintString, 0, hintString.length(), rect);\n        w = dip2px(getContext(), rect.width());\n        offset = searchWidth / 2 - w * 2;\n        if (flag == 0) {\n            //圈3  //圈4\n            setTextDrawable();\n        }\n        flag++;\n    }\n\n    public static int dip2px(Context context, float dpValue) {\n        final float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (dpValue * scale + 0.5f);\n    }\n\n    @Override\n    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) {\n        super.onTextChanged(text, start, lengthBefore, lengthAfter);\n        if (searchDrawable == null) {\n            getDrawable();\n        }\n        if (length() > 0) {\n            setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);\n            setCompoundDrawables(null, null, null, null);\n        } else if (length() == 0) {\n            setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n            setTextDrawable();\n        }\n    }\n\n    void getDrawable() {\n        //圈5\n        Drawable[] compoundDrawables = getCompoundDrawables();\n        searchDrawable = compoundDrawables[0];\n    }\n\n    void setTextDrawable() {\n        searchDrawable.setBounds(offset, 0, offset + searchDrawable.getIntrinsicWidth(), searchDrawable.getIntrinsicHeight());\n        setCompoundDrawables(searchDrawable, null, null, null);\n    }\n}\n```\n\n* XML(包名改成自己的)\n\n```\n <com.*.*.SearchText\n        android:id=\"@+id/work_detail_deal_research\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"30dp\"\n        android:background=\"@color/white\"\n        android:layout_marginBottom=\"2dp\"\n        android:layout_gravity=\"center\"\n        android:gravity=\"center\"\n        android:drawableLeft=\"@drawable/research\"\n        android:hint=\"搜索\"\n        android:textSize=\"@dimen/txtSize_title\"\n        android:textColor=\"@color/txt_color1\"/>\n```\n\n* 图标\n\n> ![search](https://img-blog.csdn.net/20180716152058577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70) ![search2x](https://img-blog.csdn.net/20180716152122751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)![这里写图片描述](https://img-blog.csdn.net/2018071615215058?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n* dimon \n\n```\n<dimen name=\"txtSize_title\">16dp</dimen>\n```\n\n原文: https://blog.csdn.net/qq_29951983/article/details/78248068\n","source":"_posts/自定义EditText设置图片文字居中.md","raw":"---\ntitle: 自定义EditText设置图片文字居中\ncategories: Android\ntags: android\ndate: 2017-10-21 20:44:14\n---\n\n* JAVA\n\n> 自定义类继承EditText or AppCompatEditText\n\n<!-- more -->\n\n```\nimport android.content.Context;\nimport android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.support.v7.widget.AppCompatEditText;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class SearchText extends AppCompatEditText {\n\n    private Drawable searchDrawable;\n    private int offset;\n    private int searchWidth;\n    private String hintString;\n    private int w;\n    private int flag = 0;\n\n    public SearchText(Context context) {\n        super(context);\n        init();\n    }\n\n    public SearchText(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public SearchText(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        setOnFocusChangeListener(new OnFocusChangeListener() {\n            @Override\n            public void onFocusChange(View v, boolean hasFocus) {\n                if (hasFocus) {\n                    // 获得焦点\n                    setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);\n                } else {\n                    // 失去焦点\n                    setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n                }\n            }\n        });\n        setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        super.onLayout(changed, left, top, right, bottom);\n        //圈1\n        searchWidth = getMeasuredWidth();\n        hintString = getHint().toString();\n        //圈2\n        Paint paint = new Paint();\n        Rect rect = new Rect();\n        paint.getTextBounds(hintString, 0, hintString.length(), rect);\n        w = dip2px(getContext(), rect.width());\n        offset = searchWidth / 2 - w * 2;\n        if (flag == 0) {\n            //圈3  //圈4\n            setTextDrawable();\n        }\n        flag++;\n    }\n\n    public static int dip2px(Context context, float dpValue) {\n        final float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (dpValue * scale + 0.5f);\n    }\n\n    @Override\n    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) {\n        super.onTextChanged(text, start, lengthBefore, lengthAfter);\n        if (searchDrawable == null) {\n            getDrawable();\n        }\n        if (length() > 0) {\n            setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);\n            setCompoundDrawables(null, null, null, null);\n        } else if (length() == 0) {\n            setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);\n            setTextDrawable();\n        }\n    }\n\n    void getDrawable() {\n        //圈5\n        Drawable[] compoundDrawables = getCompoundDrawables();\n        searchDrawable = compoundDrawables[0];\n    }\n\n    void setTextDrawable() {\n        searchDrawable.setBounds(offset, 0, offset + searchDrawable.getIntrinsicWidth(), searchDrawable.getIntrinsicHeight());\n        setCompoundDrawables(searchDrawable, null, null, null);\n    }\n}\n```\n\n* XML(包名改成自己的)\n\n```\n <com.*.*.SearchText\n        android:id=\"@+id/work_detail_deal_research\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"30dp\"\n        android:background=\"@color/white\"\n        android:layout_marginBottom=\"2dp\"\n        android:layout_gravity=\"center\"\n        android:gravity=\"center\"\n        android:drawableLeft=\"@drawable/research\"\n        android:hint=\"搜索\"\n        android:textSize=\"@dimen/txtSize_title\"\n        android:textColor=\"@color/txt_color1\"/>\n```\n\n* 图标\n\n> ![search](https://img-blog.csdn.net/20180716152058577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70) ![search2x](https://img-blog.csdn.net/20180716152122751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)![这里写图片描述](https://img-blog.csdn.net/2018071615215058?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n* dimon \n\n```\n<dimen name=\"txtSize_title\">16dp</dimen>\n```\n\n原文: https://blog.csdn.net/qq_29951983/article/details/78248068\n","slug":"自定义EditText设置图片文字居中","published":1,"updated":"2019-04-20T12:27:57.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xun004yvq6bx7jv33ij","content":"<ul>\n<li>JAVA</li>\n</ul>\n<blockquote>\n<p>自定义类继承EditText or AppCompatEditText</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.graphics.Paint;</span><br><span class=\"line\">import android.graphics.Rect;</span><br><span class=\"line\">import android.graphics.drawable.Drawable;</span><br><span class=\"line\">import android.support.v7.widget.AppCompatEditText;</span><br><span class=\"line\">import android.util.AttributeSet;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SearchText extends AppCompatEditText &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Drawable searchDrawable;</span><br><span class=\"line\">    private int offset;</span><br><span class=\"line\">    private int searchWidth;</span><br><span class=\"line\">    private String hintString;</span><br><span class=\"line\">    private int w;</span><br><span class=\"line\">    private int flag = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context) &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context, AttributeSet attrs) &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class=\"line\">        super(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void init() &#123;</span><br><span class=\"line\">        setOnFocusChangeListener(new OnFocusChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFocusChange(View v, boolean hasFocus) &#123;</span><br><span class=\"line\">                if (hasFocus) &#123;</span><br><span class=\"line\">                    // 获得焦点</span><br><span class=\"line\">                    setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    // 失去焦点</span><br><span class=\"line\">                    setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</span><br><span class=\"line\">        super.onLayout(changed, left, top, right, bottom);</span><br><span class=\"line\">        //圈1</span><br><span class=\"line\">        searchWidth = getMeasuredWidth();</span><br><span class=\"line\">        hintString = getHint().toString();</span><br><span class=\"line\">        //圈2</span><br><span class=\"line\">        Paint paint = new Paint();</span><br><span class=\"line\">        Rect rect = new Rect();</span><br><span class=\"line\">        paint.getTextBounds(hintString, 0, hintString.length(), rect);</span><br><span class=\"line\">        w = dip2px(getContext(), rect.width());</span><br><span class=\"line\">        offset = searchWidth / 2 - w * 2;</span><br><span class=\"line\">        if (flag == 0) &#123;</span><br><span class=\"line\">            //圈3  //圈4</span><br><span class=\"line\">            setTextDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int dip2px(Context context, float dpValue) &#123;</span><br><span class=\"line\">        final float scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        return (int) (dpValue * scale + 0.5f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) &#123;</span><br><span class=\"line\">        super.onTextChanged(text, start, lengthBefore, lengthAfter);</span><br><span class=\"line\">        if (searchDrawable == null) &#123;</span><br><span class=\"line\">            getDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (length() &gt; 0) &#123;</span><br><span class=\"line\">            setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);</span><br><span class=\"line\">            setCompoundDrawables(null, null, null, null);</span><br><span class=\"line\">        &#125; else if (length() == 0) &#123;</span><br><span class=\"line\">            setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">            setTextDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void getDrawable() &#123;</span><br><span class=\"line\">        //圈5</span><br><span class=\"line\">        Drawable[] compoundDrawables = getCompoundDrawables();</span><br><span class=\"line\">        searchDrawable = compoundDrawables[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void setTextDrawable() &#123;</span><br><span class=\"line\">        searchDrawable.setBounds(offset, 0, offset + searchDrawable.getIntrinsicWidth(), searchDrawable.getIntrinsicHeight());</span><br><span class=\"line\">        setCompoundDrawables(searchDrawable, null, null, null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>XML(包名改成自己的)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.*.*.SearchText</span><br><span class=\"line\">       android:id=&quot;@+id/work_detail_deal_research&quot;</span><br><span class=\"line\">       android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">       android:layout_height=&quot;30dp&quot;</span><br><span class=\"line\">       android:background=&quot;@color/white&quot;</span><br><span class=\"line\">       android:layout_marginBottom=&quot;2dp&quot;</span><br><span class=\"line\">       android:layout_gravity=&quot;center&quot;</span><br><span class=\"line\">       android:gravity=&quot;center&quot;</span><br><span class=\"line\">       android:drawableLeft=&quot;@drawable/research&quot;</span><br><span class=\"line\">       android:hint=&quot;搜索&quot;</span><br><span class=\"line\">       android:textSize=&quot;@dimen/txtSize_title&quot;</span><br><span class=\"line\">       android:textColor=&quot;@color/txt_color1&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>图标</li>\n</ul>\n<blockquote>\n<p><img src=\"https://img-blog.csdn.net/20180716152058577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"search\"> <img src=\"https://img-blog.csdn.net/20180716152122751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"search2x\"><img src=\"https://img-blog.csdn.net/2018071615215058?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<ul>\n<li>dimon</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dimen name=&quot;txtSize_title&quot;&gt;16dp&lt;/dimen&gt;</span><br></pre></td></tr></table></figure>\n<p>原文: <a href=\"https://blog.csdn.net/qq_29951983/article/details/78248068\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_29951983/article/details/78248068</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>JAVA</li>\n</ul>\n<blockquote>\n<p>自定义类继承EditText or AppCompatEditText</p>\n</blockquote>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.graphics.Paint;</span><br><span class=\"line\">import android.graphics.Rect;</span><br><span class=\"line\">import android.graphics.drawable.Drawable;</span><br><span class=\"line\">import android.support.v7.widget.AppCompatEditText;</span><br><span class=\"line\">import android.util.AttributeSet;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SearchText extends AppCompatEditText &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Drawable searchDrawable;</span><br><span class=\"line\">    private int offset;</span><br><span class=\"line\">    private int searchWidth;</span><br><span class=\"line\">    private String hintString;</span><br><span class=\"line\">    private int w;</span><br><span class=\"line\">    private int flag = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context) &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context, AttributeSet attrs) &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SearchText(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class=\"line\">        super(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void init() &#123;</span><br><span class=\"line\">        setOnFocusChangeListener(new OnFocusChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFocusChange(View v, boolean hasFocus) &#123;</span><br><span class=\"line\">                if (hasFocus) &#123;</span><br><span class=\"line\">                    // 获得焦点</span><br><span class=\"line\">                    setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    // 失去焦点</span><br><span class=\"line\">                    setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</span><br><span class=\"line\">        super.onLayout(changed, left, top, right, bottom);</span><br><span class=\"line\">        //圈1</span><br><span class=\"line\">        searchWidth = getMeasuredWidth();</span><br><span class=\"line\">        hintString = getHint().toString();</span><br><span class=\"line\">        //圈2</span><br><span class=\"line\">        Paint paint = new Paint();</span><br><span class=\"line\">        Rect rect = new Rect();</span><br><span class=\"line\">        paint.getTextBounds(hintString, 0, hintString.length(), rect);</span><br><span class=\"line\">        w = dip2px(getContext(), rect.width());</span><br><span class=\"line\">        offset = searchWidth / 2 - w * 2;</span><br><span class=\"line\">        if (flag == 0) &#123;</span><br><span class=\"line\">            //圈3  //圈4</span><br><span class=\"line\">            setTextDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int dip2px(Context context, float dpValue) &#123;</span><br><span class=\"line\">        final float scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        return (int) (dpValue * scale + 0.5f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) &#123;</span><br><span class=\"line\">        super.onTextChanged(text, start, lengthBefore, lengthAfter);</span><br><span class=\"line\">        if (searchDrawable == null) &#123;</span><br><span class=\"line\">            getDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (length() &gt; 0) &#123;</span><br><span class=\"line\">            setTextAlignment(TextView.TEXT_ALIGNMENT_VIEW_START);</span><br><span class=\"line\">            setCompoundDrawables(null, null, null, null);</span><br><span class=\"line\">        &#125; else if (length() == 0) &#123;</span><br><span class=\"line\">            setTextAlignment(TextView.TEXT_ALIGNMENT_CENTER);</span><br><span class=\"line\">            setTextDrawable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void getDrawable() &#123;</span><br><span class=\"line\">        //圈5</span><br><span class=\"line\">        Drawable[] compoundDrawables = getCompoundDrawables();</span><br><span class=\"line\">        searchDrawable = compoundDrawables[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void setTextDrawable() &#123;</span><br><span class=\"line\">        searchDrawable.setBounds(offset, 0, offset + searchDrawable.getIntrinsicWidth(), searchDrawable.getIntrinsicHeight());</span><br><span class=\"line\">        setCompoundDrawables(searchDrawable, null, null, null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>XML(包名改成自己的)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.*.*.SearchText</span><br><span class=\"line\">       android:id=&quot;@+id/work_detail_deal_research&quot;</span><br><span class=\"line\">       android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">       android:layout_height=&quot;30dp&quot;</span><br><span class=\"line\">       android:background=&quot;@color/white&quot;</span><br><span class=\"line\">       android:layout_marginBottom=&quot;2dp&quot;</span><br><span class=\"line\">       android:layout_gravity=&quot;center&quot;</span><br><span class=\"line\">       android:gravity=&quot;center&quot;</span><br><span class=\"line\">       android:drawableLeft=&quot;@drawable/research&quot;</span><br><span class=\"line\">       android:hint=&quot;搜索&quot;</span><br><span class=\"line\">       android:textSize=&quot;@dimen/txtSize_title&quot;</span><br><span class=\"line\">       android:textColor=&quot;@color/txt_color1&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>图标</li>\n</ul>\n<blockquote>\n<p><img src=\"https://img-blog.csdn.net/20180716152058577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"search\"> <img src=\"https://img-blog.csdn.net/20180716152122751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"search2x\"><img src=\"https://img-blog.csdn.net/2018071615215058?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<ul>\n<li>dimon</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dimen name=&quot;txtSize_title&quot;&gt;16dp&lt;/dimen&gt;</span><br></pre></td></tr></table></figure>\n<p>原文: <a href=\"https://blog.csdn.net/qq_29951983/article/details/78248068\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_29951983/article/details/78248068</a></p>"},{"title":"阿里Java开发手册","date":"2018-03-14T13:34:14.000Z","_content":"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181217125434472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n传送门\npdf [阿里巴巴Java开发手册](https://alitech-private.oss-cn-beijing.aliyuncs.com/1528269849853/Java_manual.pdf?Expires=1545026045&OSSAccessKeyId=LTAIgu8IHyutlWfc&Signature=DeK2I9/0f5KfxlulJpdYQmhHYTI%3D)\ngithub [阿里巴巴Java开发手册（详尽版）.pdf ](https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf)\n","source":"_posts/阿里Java开发手册.md","raw":"---\ntitle: 阿里Java开发手册\ncategories: Java\ntags: java\ndate: 2018-03-14 21:34:14\n---\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181217125434472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n传送门\npdf [阿里巴巴Java开发手册](https://alitech-private.oss-cn-beijing.aliyuncs.com/1528269849853/Java_manual.pdf?Expires=1545026045&OSSAccessKeyId=LTAIgu8IHyutlWfc&Signature=DeK2I9/0f5KfxlulJpdYQmhHYTI%3D)\ngithub [阿里巴巴Java开发手册（详尽版）.pdf ](https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf)\n","slug":"阿里Java开发手册","published":1,"updated":"2019-04-20T12:26:11.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xup0051vq6bmjybnk7p","content":"<p><img src=\"https://img-blog.csdnimg.cn/20181217125434472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n传送门<br>\npdf <a href=\"https://alitech-private.oss-cn-beijing.aliyuncs.com/1528269849853/Java_manual.pdf?Expires=1545026045&amp;OSSAccessKeyId=LTAIgu8IHyutlWfc&amp;Signature=DeK2I9/0f5KfxlulJpdYQmhHYTI%3D\" target=\"_blank\" rel=\"noopener\">阿里巴巴Java开发手册</a><br>\ngithub <a href=\"https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf\" target=\"_blank\" rel=\"noopener\">阿里巴巴Java开发手册（详尽版）.pdf </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://img-blog.csdnimg.cn/20181217125434472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n传送门<br>\npdf <a href=\"https://alitech-private.oss-cn-beijing.aliyuncs.com/1528269849853/Java_manual.pdf?Expires=1545026045&amp;OSSAccessKeyId=LTAIgu8IHyutlWfc&amp;Signature=DeK2I9/0f5KfxlulJpdYQmhHYTI%3D\" target=\"_blank\" rel=\"noopener\">阿里巴巴Java开发手册</a><br>\ngithub <a href=\"https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf\" target=\"_blank\" rel=\"noopener\">阿里巴巴Java开发手册（详尽版）.pdf </a></p>\n"},{"title":"阿里Android开发手册","date":"2018-09-11T13:34:14.000Z","_content":"\n阿里巴巴Android开发手册  [传送门](https://alitech-private.oss-cn-beijing.aliyuncs.com/1520478361732/Android_v9.pdf?Expires=1545024845&OSSAccessKeyId=LTAIgu8IHyutlWfc&Signature=babkFy428i2J/u6I6JSwNHr3Ac4=) 在浏览器中打开即可浏览。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181217124458501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/阿里Android开发手册.md","raw":"---\ntitle: 阿里Android开发手册\ncategories: Android\ntags: android\ndate: 2018-09-11 21:34:14\n---\n\n阿里巴巴Android开发手册  [传送门](https://alitech-private.oss-cn-beijing.aliyuncs.com/1520478361732/Android_v9.pdf?Expires=1545024845&OSSAccessKeyId=LTAIgu8IHyutlWfc&Signature=babkFy428i2J/u6I6JSwNHr3Ac4=) 在浏览器中打开即可浏览。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181217124458501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70)\n\n","slug":"阿里Android开发手册","published":1,"updated":"2019-04-20T12:25:57.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjusc5xus0056vq6bctsm1sto","content":"<p>阿里巴巴Android开发手册  <a href=\"https://alitech-private.oss-cn-beijing.aliyuncs.com/1520478361732/Android_v9.pdf?Expires=1545024845&amp;OSSAccessKeyId=LTAIgu8IHyutlWfc&amp;Signature=babkFy428i2J/u6I6JSwNHr3Ac4=\" target=\"_blank\" rel=\"noopener\">传送门</a> 在浏览器中打开即可浏览。<br>\n<img src=\"https://img-blog.csdnimg.cn/20181217124458501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>阿里巴巴Android开发手册  <a href=\"https://alitech-private.oss-cn-beijing.aliyuncs.com/1520478361732/Android_v9.pdf?Expires=1545024845&amp;OSSAccessKeyId=LTAIgu8IHyutlWfc&amp;Signature=babkFy428i2J/u6I6JSwNHr3Ac4=\" target=\"_blank\" rel=\"noopener\">传送门</a> 在浏览器中打开即可浏览。<br>\n<img src=\"https://img-blog.csdnimg.cn/20181217124458501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTc0NzU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo-theme-huweihuang/Demo.png","slug":"Demo.png","post":"cjusc5xu0003lvq6b287nayw1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjusc5xry0001vq6b4kia3vv4","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xsg000fvq6b6jmq8xuh"},{"post_id":"cjusc5xs20003vq6b0qb8hnw9","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xsk000lvq6b3ah421z1"},{"post_id":"cjusc5xs70007vq6bt890407a","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xsq000svq6b9zzjvii7"},{"post_id":"cjusc5xsn000ovq6b53pivzgd","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xst000yvq6bz73uaurn"},{"post_id":"cjusc5xs90008vq6b588kr67b","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xsv0012vq6bmou8k1mw"},{"post_id":"cjusc5xso000qvq6bccdhfn4x","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xsw0015vq6bffv4ehp8"},{"post_id":"cjusc5xsr000vvq6bxpbhajgb","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xsy001avq6bop66ayhk"},{"post_id":"cjusc5xsa0009vq6b9i7ecg45","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xsz001dvq6bpje0g4hd"},{"post_id":"cjusc5xss000xvq6b32wp0mt4","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xt0001hvq6b7w4zjwwt"},{"post_id":"cjusc5xsu0011vq6bgk0x37sz","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xt2001lvq6b3tpppnkg"},{"post_id":"cjusc5xsc000dvq6bbcdzmdtw","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xt3001ovq6b2xc1lfln"},{"post_id":"cjusc5xsx0019vq6bi8ltiq4u","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xt5001tvq6bmeh67lus"},{"post_id":"cjusc5xsf000evq6b2lsgrhso","category_id":"cjusc5xsw0016vq6bwksu9vle","_id":"cjusc5xt7001wvq6bj6uo1ats"},{"post_id":"cjusc5xt1001kvq6bvh2ikfp1","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xt90021vq6bvjgjvoyy"},{"post_id":"cjusc5xsh000ivq6b2m55mfn9","category_id":"cjusc5xsz001fvq6b2dlpskfs","_id":"cjusc5xta0024vq6b6nl3cg4z"},{"post_id":"cjusc5xt2001nvq6b00tambmz","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xtc0029vq6brryislpg"},{"post_id":"cjusc5xt4001svq6bcsqfpdaq","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xtd002cvq6bztrmp7lv"},{"post_id":"cjusc5xsj000kvq6btp3ylbg5","category_id":"cjusc5xsz001fvq6b2dlpskfs","_id":"cjusc5xtf002hvq6bsjsngt2c"},{"post_id":"cjusc5xt6001vvq6buug06w72","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xtg002kvq6bcslk84ms"},{"post_id":"cjusc5xt80020vq6b9t2tccld","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xti002ovq6br74dsiym"},{"post_id":"cjusc5xsv0014vq6bnyfbnzjm","category_id":"cjusc5xt7001xvq6b45dswu4d","_id":"cjusc5xtk002svq6bf677gkql"},{"post_id":"cjusc5xta0023vq6bjq1x664u","category_id":"cjusc5xs50005vq6b1etvr75d","_id":"cjusc5xtm002vvq6bilpzsjp7"},{"post_id":"cjusc5xsy001cvq6bomu36o7b","category_id":"cjusc5xtb0025vq6bwt6ofya8","_id":"cjusc5xto0030vq6b02dy0u8v"},{"post_id":"cjusc5xsz001gvq6b2n3gu3dh","category_id":"cjusc5xtd002dvq6bwsy5bwmg","_id":"cjusc5xtr0033vq6bk8btw50m"},{"post_id":"cjusc5xtf002jvq6bs9w3z8eg","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xtu0037vq6bv09b0ueu"},{"post_id":"cjusc5xtg002nvq6byv5st8mn","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xtw003avq6b2kxuo86g"},{"post_id":"cjusc5xtj002rvq6bx6gt07bl","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xty003fvq6bze1jkmpd"},{"post_id":"cjusc5xtb0028vq6bbjqhq7d3","category_id":"cjusc5xtg002mvq6b88excb78","_id":"cjusc5xtz003ivq6blh3lpx1l"},{"post_id":"cjusc5xtk002uvq6bi7b4hode","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xu1003mvq6bsr7lshz2"},{"post_id":"cjusc5xtn002zvq6bg5xrzuoz","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xu2003pvq6bsxrb6qyj"},{"post_id":"cjusc5xtc002bvq6bm4s22dr2","category_id":"cjusc5xtm002wvq6bg6ajfbfk","_id":"cjusc5xu4003tvq6bxcjy3uem"},{"post_id":"cjusc5xtt0036vq6bhucjithd","category_id":"cjusc5xtg002mvq6b88excb78","_id":"cjusc5xu6003wvq6b504a9g60"},{"post_id":"cjusc5xte002gvq6b01jmadm8","category_id":"cjusc5xtm002wvq6bg6ajfbfk","_id":"cjusc5xu7003yvq6brkcu7hbn"},{"post_id":"cjusc5xtq0032vq6bkb56shj6","category_id":"cjusc5xtw003bvq6bcp2yfzdk","_id":"cjusc5xu90043vq6bo6sige4l"},{"post_id":"cjusc5xty003hvq6basegfhzo","category_id":"cjusc5xtw003bvq6bcp2yfzdk","_id":"cjusc5xub0046vq6bos2uyzl0"},{"post_id":"cjusc5xtv0039vq6bko7iuwcw","category_id":"cjusc5xu0003jvq6b33ot8ejd","_id":"cjusc5xue004bvq6bcvri4gqb"},{"post_id":"cjusc5xtx003evq6bk67lm5yh","category_id":"cjusc5xu3003qvq6b5new160t","_id":"cjusc5xuf004evq6bptp7dwbr"},{"post_id":"cjusc5xu6003xvq6bhwdy6i58","category_id":"cjusc5xtg002mvq6b88excb78","_id":"cjusc5xuh004jvq6bmtqgjdmz"},{"post_id":"cjusc5xu80042vq6bpgzre5fl","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xuj004mvq6brtupz2qp"},{"post_id":"cjusc5xu2003ovq6bg3cua4ex","category_id":"cjusc5xu7003zvq6b6jsxbaav","_id":"cjusc5xul004rvq6b9f6fr0hl"},{"post_id":"cjusc5xu3003svq6b69gfwu7u","category_id":"cjusc5xub0048vq6b1i8nfxtl","_id":"cjusc5xum004uvq6b7h9bf2zi"},{"post_id":"cjusc5xug004ivq6b5n5b6c50","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xuo004zvq6bp6ifq8na"},{"post_id":"cjusc5xu5003vvq6b9e0wo4e7","category_id":"cjusc5xu7003zvq6b6jsxbaav","_id":"cjusc5xur0052vq6b51dqshfb"},{"post_id":"cjusc5xui004lvq6b7iufq6cj","category_id":"cjusc5xtd002dvq6bwsy5bwmg","_id":"cjusc5xut0057vq6bimfcg0xn"},{"post_id":"cjusc5xu90045vq6bscgadwu9","category_id":"cjusc5xuj004ovq6brhxjeyla","_id":"cjusc5xuu0059vq6bg7clnmtj"},{"post_id":"cjusc5xul004tvq6bi9m1533t","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xuv005bvq6b8veggc0y"},{"post_id":"cjusc5xun004yvq6bx7jv33ij","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xuw005fvq6bfrpywm2k"},{"post_id":"cjusc5xud004avq6bbhgbantj","category_id":"cjusc5xuj004ovq6brhxjeyla","_id":"cjusc5xuw005hvq6bz3vmyl33"},{"post_id":"cjusc5xup0051vq6bmjybnk7p","category_id":"cjusc5xsb000avq6bt26y3zid","_id":"cjusc5xuw005kvq6bwqh1gabm"},{"post_id":"cjusc5xus0056vq6bctsm1sto","category_id":"cjusc5xsg000gvq6be172khv3","_id":"cjusc5xux005mvq6bgosttckq"},{"post_id":"cjusc5xue004dvq6bghoudu54","category_id":"cjusc5xur0053vq6bspcr3jgw","_id":"cjusc5xux005ovq6be5yauh0g"},{"post_id":"cjusc5xuk004qvq6bncijd7g8","category_id":"cjusc5xuv005cvq6bq06m6krk","_id":"cjusc5xuy005qvq6bhab6q8f2"}],"PostTag":[{"post_id":"cjusc5xry0001vq6b4kia3vv4","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xsc000cvq6b4os5xxc7"},{"post_id":"cjusc5xs20003vq6b0qb8hnw9","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xsi000jvq6b1f0xs39y"},{"post_id":"cjusc5xs70007vq6bt890407a","tag_id":"cjusc5xsh000hvq6b8hftg7s6","_id":"cjusc5xso000pvq6byhb71gij"},{"post_id":"cjusc5xsn000ovq6b53pivzgd","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xsq000uvq6bv161p0pc"},{"post_id":"cjusc5xs90008vq6b588kr67b","tag_id":"cjusc5xsh000hvq6b8hftg7s6","_id":"cjusc5xss000wvq6b64g0a5dx"},{"post_id":"cjusc5xsa0009vq6b9i7ecg45","tag_id":"cjusc5xsq000tvq6b61dbsudc","_id":"cjusc5xsv0013vq6bxshxke5s"},{"post_id":"cjusc5xss000xvq6b32wp0mt4","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xsx0017vq6b5sj4w6pw"},{"post_id":"cjusc5xsu0011vq6bgk0x37sz","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xsy001bvq6bpv63c3uc"},{"post_id":"cjusc5xsc000dvq6bbcdzmdtw","tag_id":"cjusc5xsh000hvq6b8hftg7s6","_id":"cjusc5xsz001evq6bvcipvhb8"},{"post_id":"cjusc5xsx0019vq6bi8ltiq4u","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xt1001jvq6b9tmpfvxe"},{"post_id":"cjusc5xsf000evq6b2lsgrhso","tag_id":"cjusc5xsx0018vq6b4wy4ei4l","_id":"cjusc5xt2001mvq6b76uvzxl6"},{"post_id":"cjusc5xt1001kvq6bvh2ikfp1","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xt4001rvq6bwzyeu121"},{"post_id":"cjusc5xsh000ivq6b2m55mfn9","tag_id":"cjusc5xt0001ivq6buzqjq313","_id":"cjusc5xt6001uvq6b652o4epd"},{"post_id":"cjusc5xt2001nvq6b00tambmz","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xt8001zvq6bzbnpuf74"},{"post_id":"cjusc5xt4001svq6bcsqfpdaq","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xt90022vq6biabm1e9i"},{"post_id":"cjusc5xsj000kvq6btp3ylbg5","tag_id":"cjusc5xt0001ivq6buzqjq313","_id":"cjusc5xtb0027vq6bcxpki4zb"},{"post_id":"cjusc5xt6001vvq6buug06w72","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xtc002avq6b79zw8yj7"},{"post_id":"cjusc5xt80020vq6b9t2tccld","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xte002evq6bqs6x267h"},{"post_id":"cjusc5xso000qvq6bccdhfn4x","tag_id":"cjusc5xt8001yvq6b2uypc490","_id":"cjusc5xtf002ivq6bcca8mlhf"},{"post_id":"cjusc5xta0023vq6bjq1x664u","tag_id":"cjusc5xs60006vq6bz0dc8dsg","_id":"cjusc5xtg002lvq6ba0y7lh7m"},{"post_id":"cjusc5xsr000vvq6bxpbhajgb","tag_id":"cjusc5xtb0026vq6bulvc84zq","_id":"cjusc5xti002qvq6bp52ect12"},{"post_id":"cjusc5xsv0014vq6bnyfbnzjm","tag_id":"cjusc5xte002fvq6bmss4dlng","_id":"cjusc5xtk002tvq6b60ig6akb"},{"post_id":"cjusc5xtg002nvq6byv5st8mn","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xtn002yvq6b5tgjj7se"},{"post_id":"cjusc5xsy001cvq6bomu36o7b","tag_id":"cjusc5xte002fvq6bmss4dlng","_id":"cjusc5xtp0031vq6b7hj8sfpm"},{"post_id":"cjusc5xsz001gvq6b2n3gu3dh","tag_id":"cjusc5xtn002xvq6bwmuxxovn","_id":"cjusc5xtu0038vq6bzb7b0gm5"},{"post_id":"cjusc5xtt0036vq6bhucjithd","tag_id":"cjusc5xtr0035vq6b90xgjix1","_id":"cjusc5xtx003dvq6blr72uxbr"},{"post_id":"cjusc5xtb0028vq6bbjqhq7d3","tag_id":"cjusc5xtr0035vq6b90xgjix1","_id":"cjusc5xty003gvq6b5qzxdfl5"},{"post_id":"cjusc5xtc002bvq6bm4s22dr2","tag_id":"cjusc5xtx003cvq6birmrw2my","_id":"cjusc5xu1003nvq6bxyaav22k"},{"post_id":"cjusc5xte002gvq6b01jmadm8","tag_id":"cjusc5xtx003cvq6birmrw2my","_id":"cjusc5xu5003uvq6bq0jsua0c"},{"post_id":"cjusc5xtf002jvq6bs9w3z8eg","tag_id":"cjusc5xu3003rvq6b51m1275q","_id":"cjusc5xu80041vq6brx4a473y"},{"post_id":"cjusc5xu6003xvq6bhwdy6i58","tag_id":"cjusc5xtr0035vq6b90xgjix1","_id":"cjusc5xu90044vq6boi6onis4"},{"post_id":"cjusc5xtj002rvq6bx6gt07bl","tag_id":"cjusc5xu3003rvq6b51m1275q","_id":"cjusc5xud0049vq6bmmqtdhh0"},{"post_id":"cjusc5xu90045vq6bscgadwu9","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xue004cvq6bhqeqwi5u"},{"post_id":"cjusc5xud004avq6bbhgbantj","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xug004hvq6btw067sg7"},{"post_id":"cjusc5xtk002uvq6bi7b4hode","tag_id":"cjusc5xub0047vq6bciw0fix3","_id":"cjusc5xui004kvq6b65044lxa"},{"post_id":"cjusc5xug004ivq6b5n5b6c50","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xuk004pvq6b48khfriq"},{"post_id":"cjusc5xtn002zvq6bg5xrzuoz","tag_id":"cjusc5xu3003rvq6b51m1275q","_id":"cjusc5xul004svq6bl6gthgfb"},{"post_id":"cjusc5xui004lvq6b7iufq6cj","tag_id":"cjusc5xtn002xvq6bwmuxxovn","_id":"cjusc5xun004xvq6bo693gw99"},{"post_id":"cjusc5xtq0032vq6bkb56shj6","tag_id":"cjusc5xuj004nvq6bsf231qnq","_id":"cjusc5xup0050vq6bntblo08u"},{"post_id":"cjusc5xul004tvq6bi9m1533t","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xus0055vq6bstdbq6xy"},{"post_id":"cjusc5xun004yvq6bx7jv33ij","tag_id":"cjusc5xsh000hvq6b8hftg7s6","_id":"cjusc5xuu0058vq6bql5sc76p"},{"post_id":"cjusc5xtv0039vq6bko7iuwcw","tag_id":"cjusc5xun004vvq6btjejkhta","_id":"cjusc5xuu005avq6bdt2b07it"},{"post_id":"cjusc5xup0051vq6bmjybnk7p","tag_id":"cjusc5xsb000bvq6bu7rq952r","_id":"cjusc5xuw005evq6b7w7zopew"},{"post_id":"cjusc5xus0056vq6bctsm1sto","tag_id":"cjusc5xsh000hvq6b8hftg7s6","_id":"cjusc5xuw005gvq6bo06j2xz4"},{"post_id":"cjusc5xtx003evq6bk67lm5yh","tag_id":"cjusc5xus0054vq6bqebk9cn0","_id":"cjusc5xuw005jvq6b257mb97c"},{"post_id":"cjusc5xty003hvq6basegfhzo","tag_id":"cjusc5xuj004nvq6bsf231qnq","_id":"cjusc5xux005lvq6bb1n4is0h"},{"post_id":"cjusc5xu0003lvq6b287nayw1","tag_id":"cjusc5xuw005ivq6bo28g3v15","_id":"cjusc5xuy005pvq6bjqzlwupi"},{"post_id":"cjusc5xu3003svq6b69gfwu7u","tag_id":"cjusc5xux005nvq6bgrletjg0","_id":"cjusc5xuy005svq6be62z5b11"},{"post_id":"cjusc5xu5003vvq6b9e0wo4e7","tag_id":"cjusc5xuy005rvq6bc4mw362k","_id":"cjusc5xuz005uvq6bg2c6wjj3"},{"post_id":"cjusc5xu80042vq6bpgzre5fl","tag_id":"cjusc5xuy005tvq6b8rktog7s","_id":"cjusc5xuz005wvq6b22uqt32z"},{"post_id":"cjusc5xue004dvq6bghoudu54","tag_id":"cjusc5xuz005vvq6bfmb5k5dv","_id":"cjusc5xuz005yvq6b19wsju57"},{"post_id":"cjusc5xuk004qvq6bncijd7g8","tag_id":"cjusc5xuz005xvq6b46xvrvui","_id":"cjusc5xv0005zvq6be1cse0md"}],"Tag":[{"name":"linux","_id":"cjusc5xs60006vq6bz0dc8dsg"},{"name":"java","_id":"cjusc5xsb000bvq6bu7rq952r"},{"name":"android","_id":"cjusc5xsh000hvq6b8hftg7s6"},{"name":"EditText","_id":"cjusc5xsq000tvq6b61dbsudc"},{"name":"idea","_id":"cjusc5xsx0018vq6b4wy4ei4l"},{"name":"git","_id":"cjusc5xt0001ivq6buzqjq313"},{"name":"openoffice","_id":"cjusc5xt8001yvq6b2uypc490"},{"name":"java,random","_id":"cjusc5xtb0026vq6bulvc84zq"},{"name":"kafka","_id":"cjusc5xte002fvq6bmss4dlng"},{"name":"多线程","_id":"cjusc5xtn002xvq6bwmuxxovn"},{"name":"netty","_id":"cjusc5xtr0035vq6b90xgjix1"},{"name":"mysql","_id":"cjusc5xtx003cvq6birmrw2my"},{"name":"java, springboot","_id":"cjusc5xu3003rvq6b51m1275q"},{"name":"java, schedule","_id":"cjusc5xub0047vq6bciw0fix3"},{"name":"vim","_id":"cjusc5xuj004nvq6bsf231qnq"},{"name":"vue","_id":"cjusc5xun004vvq6btjejkhta"},{"name":"springboot","_id":"cjusc5xus0054vq6bqebk9cn0"},{"name":"Hexo","_id":"cjusc5xuw005ivq6bo28g3v15"},{"name":"nginx","_id":"cjusc5xux005nvq6bgrletjg0"},{"name":"winsw","_id":"cjusc5xuy005rvq6bc4mw362k"},{"name":"java, poi-tl","_id":"cjusc5xuy005tvq6b8rktog7s"},{"name":"other","_id":"cjusc5xuz005vvq6bfmb5k5dv"},{"name":"tool","_id":"cjusc5xuz005xvq6b46xvrvui"}]}}